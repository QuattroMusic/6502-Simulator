//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION :: 2048;
D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 2048;
D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION :: 512;
D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 256;
D3D_FL9_1_DEFAULT_MAX_ANISOTROPY :: 2;
D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT :: 65535;
D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT :: 1048575;
D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT :: 1;
D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT :: 4;
D3D_FL9_1_MAX_TEXTURE_REPEAT :: 128;
D3D_FL9_2_MAX_TEXTURE_REPEAT :: 2048;
D3D_FL9_3_MAX_TEXTURE_REPEAT :: 8192;

D3D_SHADER_FEATURE_DOUBLES :: 0x00001;
D3D_SHADER_FEATURE_COMPUTE_SHADERS_PLUS_RAW_AND_STRUCTURED_BUFFERS_VIA_SHADER_4_X :: 0x00002;
D3D_SHADER_FEATURE_UAVS_AT_EVERY_STAGE :: 0x00004;
D3D_SHADER_FEATURE_64_UAVS :: 0x00008;
D3D_SHADER_FEATURE_MINIMUM_PRECISION :: 0x00010;
D3D_SHADER_FEATURE_11_1_DOUBLE_EXTENSIONS :: 0x00020;
D3D_SHADER_FEATURE_11_1_SHADER_EXTENSIONS :: 0x00040;
D3D_SHADER_FEATURE_LEVEL_9_COMPARISON_FILTERING :: 0x00080;
D3D_SHADER_FEATURE_TILED_RESOURCES :: 0x00100;
D3D_SHADER_FEATURE_STENCIL_REF :: 0x00200;
D3D_SHADER_FEATURE_INNER_COVERAGE :: 0x00400;
D3D_SHADER_FEATURE_TYPED_UAV_LOAD_ADDITIONAL_FORMATS :: 0x00800;
D3D_SHADER_FEATURE_ROVS :: 0x01000;
D3D_SHADER_FEATURE_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER :: 0x02000;
D3D_SHADER_FEATURE_WAVE_OPS :: 0x04000;
D3D_SHADER_FEATURE_INT64_OPS :: 0x08000;
D3D_SHADER_FEATURE_VIEW_ID :: 0x10000;
D3D_SHADER_FEATURE_BARYCENTRICS :: 0x20000;
D3D_SHADER_FEATURE_NATIVE_16BIT_OPS :: 0x40000;
D3D_SHADER_FEATURE_SHADING_RATE :: 0x80000;
D3D_SHADER_FEATURE_RAYTRACING_TIER_1_1 :: 0x100000;
D3D_SHADER_FEATURE_SAMPLER_FEEDBACK :: 0x200000;

D3D_SHADER_REQUIRES :: enum_flags {
    TILED_RESOURCES              :: 0x00000100;

    DOUBLES                      :: 0x00000001;
    EARLY_DEPTH_STENCIL          :: 0x00000002;
    UAVS_AT_EVERY_STAGE          :: 0x00000004;
    _64_UAVS                     :: 0x00000008;
    MINIMUM_PRECISION            :: 0x00000010;
    _11_1_DOUBLE_EXTENSIONS      :: 0x00000020;
    _11_1_SHADER_EXTENSIONS      :: 0x00000040;
    LEVEL_9_COMPARISON_FILTERING :: 0x00000080;
    D3D_SHADER_REQUIRES_TILED_RESOURCES              :: TILED_RESOURCES;

    D3D_SHADER_REQUIRES_DOUBLES                      :: DOUBLES;
    D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL          :: EARLY_DEPTH_STENCIL;
    D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE          :: UAVS_AT_EVERY_STAGE;
    D3D_SHADER_REQUIRES_64_UAVS                      :: _64_UAVS;
    D3D_SHADER_REQUIRES_MINIMUM_PRECISION            :: MINIMUM_PRECISION;
    D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS       :: _11_1_DOUBLE_EXTENSIONS;
    D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS       :: _11_1_SHADER_EXTENSIONS;
    D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING :: LEVEL_9_COMPARISON_FILTERING;
}

D3D_COMPONENT_MASK :: enum_flags {
    X :: 1;
    Y :: 2;
    Z :: 4;
    W :: 8;

    D3D_COMPONENT_MASK_X :: X;
    D3D_COMPONENT_MASK_Y :: Y;
    D3D_COMPONENT_MASK_Z :: Z;
    D3D_COMPONENT_MASK_W :: W;
}

D3D11_16BIT_INDEX_STRIP_CUT_VALUE :: 0xffff;

D3D11_32BIT_INDEX_STRIP_CUT_VALUE :: 0xffffffff;

D3D11_8BIT_INDEX_STRIP_CUT_VALUE :: 0xff;

D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT :: 9;

D3D11_CLIP_OR_CULL_DISTANCE_COUNT :: 8;

D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT :: 2;

D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT :: 14;

D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS :: 4;

D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT :: 32;

D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT :: 15;

D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT :: 16;

D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;

D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT :: 15;

D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;

D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;

D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT :: 64;

D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;

D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT :: 1;

D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;

D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;

D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT :: 32;

D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS :: 1;

D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT :: 128;

D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST :: 1;

D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS :: 1;

D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT :: 128;

D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS :: 1;

D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT :: 16;

D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST :: 1;

D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS :: 1;

D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT :: 16;

D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT :: 32;

D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS :: 4;

D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_COMMONSHADER_TEMP_REGISTER_COUNT :: 4096;

D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST :: 3;

D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS :: 3;

D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX :: 10;

D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN :: -10;

D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE :: -8;

D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE :: 7;

D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 256;

D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP :: 64;

D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 240;

D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP :: 68;

D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 224;

D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP :: 72;

D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 208;

D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP :: 76;

D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 192;

D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP :: 84;

D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 176;

D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP :: 92;

D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 160;

D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP :: 100;

D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 144;

D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP :: 112;

D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 128;

D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP :: 128;

D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 112;

D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP :: 144;

D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 96;

D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP :: 168;

D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 80;

D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP :: 204;

D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 64;

D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP :: 256;

D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 48;

D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP :: 340;

D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 32;

D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP :: 512;

D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 16;

D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP :: 768;

D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION :: 1;

D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT :: 256;

D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 768;

D3D11_CS_4_X_THREAD_GROUP_MAX_X :: 768;

D3D11_CS_4_X_THREAD_GROUP_MAX_Y :: 768;

D3D11_CS_4_X_UAV_REGISTER_COUNT :: 1;

D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION :: 65535;

D3D11_CS_TGSM_REGISTER_COUNT :: 8192;

D3D11_CS_TGSM_REGISTER_READS_PER_INST :: 1;

D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS :: 1;

D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS :: 1;

D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS :: 3;

D3D11_CS_THREADGROUPID_REGISTER_COUNT :: 1;

D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS :: 1;

D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT :: 1;

D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS :: 3;

D3D11_CS_THREADIDINGROUP_REGISTER_COUNT :: 1;

D3D11_CS_THREADID_REGISTER_COMPONENTS :: 3;

D3D11_CS_THREADID_REGISTER_COUNT :: 1;

D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 1024;

D3D11_CS_THREAD_GROUP_MAX_X :: 1024;

D3D11_CS_THREAD_GROUP_MAX_Y :: 1024;

D3D11_CS_THREAD_GROUP_MAX_Z :: 64;

D3D11_CS_THREAD_GROUP_MIN_X :: 1;

D3D11_CS_THREAD_GROUP_MIN_Y :: 1;

D3D11_CS_THREAD_GROUP_MIN_Z :: 1;

D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL :: 16384;

D3D11_DEFAULT_BLEND_FACTOR_ALPHA :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_BLUE :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_GREEN :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_RED :: 1.0;
D3D11_DEFAULT_BORDER_COLOR_COMPONENT :: 0.0;
D3D11_DEFAULT_DEPTH_BIAS :: 0;

D3D11_DEFAULT_DEPTH_BIAS_CLAMP :: 0.0;
D3D11_DEFAULT_MAX_ANISOTROPY :: 16;

D3D11_DEFAULT_MIP_LOD_BIAS :: 0.0;
D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX :: 0;

D3D11_DEFAULT_SAMPLE_MASK :: 0xffffffff;

D3D11_DEFAULT_SCISSOR_ENDX :: 0;

D3D11_DEFAULT_SCISSOR_ENDY :: 0;

D3D11_DEFAULT_SCISSOR_STARTX :: 0;

D3D11_DEFAULT_SCISSOR_STARTY :: 0;

D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS :: 0.0;
D3D11_DEFAULT_STENCIL_READ_MASK :: 0xff;

D3D11_DEFAULT_STENCIL_REFERENCE :: 0;

D3D11_DEFAULT_STENCIL_WRITE_MASK :: 0xff;

D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX :: 0;

D3D11_DEFAULT_VIEWPORT_HEIGHT :: 0;

D3D11_DEFAULT_VIEWPORT_MAX_DEPTH :: 0.0;
D3D11_DEFAULT_VIEWPORT_MIN_DEPTH :: 0.0;
D3D11_DEFAULT_VIEWPORT_TOPLEFTX :: 0;

D3D11_DEFAULT_VIEWPORT_TOPLEFTY :: 0;

D3D11_DEFAULT_VIEWPORT_WIDTH :: 0;

D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;

D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS :: 4;

D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT :: 32;

D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;

D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS :: 1;

D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS :: 3;

D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT :: 1;

D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST :: 2;

D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS :: 1;

D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;

D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;

D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;

D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;

D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;

D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;

D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;

D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;

D3D11_DS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_DS_OUTPUT_REGISTER_COUNT :: 32;

D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP :: 0.6;
D3D11_FLOAT32_MAX :: 3.402823466e+38;
D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP :: 0.6;
D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR :: 2.4;
D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR :: 1.0;
D3D11_FLOAT_TO_SRGB_OFFSET :: 0.055;
D3D11_FLOAT_TO_SRGB_SCALE_1 :: 12.92;
D3D11_FLOAT_TO_SRGB_SCALE_2 :: 1.055;
D3D11_FLOAT_TO_SRGB_THRESHOLD :: 0.0031308;
D3D11_FTOI_INSTRUCTION_MAX_INPUT :: 2147483647.999;
D3D11_FTOI_INSTRUCTION_MIN_INPUT :: -2147483648.999;
D3D11_FTOU_INSTRUCTION_MAX_INPUT :: 4294967295.999;
D3D11_FTOU_INSTRUCTION_MIN_INPUT :: 0.0;
D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST :: 2;

D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS :: 1;

D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS :: 1;

D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT :: 1;

D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST :: 2;

D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS :: 1;

D3D11_GS_INPUT_REGISTER_COMPONENTS :: 4;

D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_GS_INPUT_REGISTER_COUNT :: 32;

D3D11_GS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D11_GS_INPUT_REGISTER_READ_PORTS :: 1;

D3D11_GS_INPUT_REGISTER_VERTICES :: 32;

D3D11_GS_MAX_INSTANCE_COUNT :: 32;

D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES :: 1024;

D3D11_GS_OUTPUT_ELEMENTS :: 32;

D3D11_GS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_GS_OUTPUT_REGISTER_COUNT :: 32;

D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT :: 32;

D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT :: 32;

D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS :: 4;

D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;

D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS :: 1;

D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 0xffffffff;

D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;

D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS :: 1;

D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;

D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS :: 1;

D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;

D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;

D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;

D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;

D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 0xffffffff;

D3D11_HS_MAXTESSFACTOR_LOWER_BOUND :: 1.0;
D3D11_HS_MAXTESSFACTOR_UPPER_BOUND :: 64.0;
D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;

D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS :: 1;

D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT :: 1;

D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST :: 2;

D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS :: 1;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;

D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS :: 128;

D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES :: 0;

D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY :: 0;

D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES :: 0;

D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT :: 1;

D3D11_IA_INSTANCE_ID_BIT_COUNT :: 32;

D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT :: 32;

D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT :: 32;

D3D11_IA_PRIMITIVE_ID_BIT_COUNT :: 32;

D3D11_IA_VERTEX_ID_BIT_COUNT :: 32;

D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT :: 32;

D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS :: 128;

D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT :: 32;

D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT :: 0xffffffff;

D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER :: 0xffffffff;

D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL :: 0xffffffff;

D3D11_KEEP_UNORDERED_ACCESS_VIEWS :: 0xffffffff;

D3D11_LINEAR_GAMMA :: 1.0;
D3D11_MAJOR_VERSION :: 11;

D3D11_MAX_BORDER_COLOR_COMPONENT :: 1.0;
D3D11_MAX_DEPTH :: 1.0;
D3D11_MAX_MAXANISOTROPY :: 16;

D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT :: 32;

D3D11_MAX_POSITION_VALUE :: 3.402823466e+34;
D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP :: 17;

D3D11_MINOR_VERSION :: 0;

D3D11_MIN_BORDER_COLOR_COMPONENT :: 0.0;
D3D11_MIN_DEPTH :: 0.0;
D3D11_MIN_MAXANISOTROPY :: 0;

D3D11_MIP_LOD_BIAS_MAX :: 15.99;
D3D11_MIP_LOD_BIAS_MIN :: -16.0;
D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT :: 8;

D3D11_MIP_LOD_RANGE_BIT_COUNT :: 8;

D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH :: 1.4;
D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT :: 0;

D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 15;

D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 16;

D3D11_PS_CS_UAV_REGISTER_COMPONENTS :: 1;

D3D11_PS_CS_UAV_REGISTER_COUNT :: 8;

D3D11_PS_CS_UAV_REGISTER_READS_PER_INST :: 1;

D3D11_PS_CS_UAV_REGISTER_READ_PORTS :: 1;

D3D11_PS_FRONTFACING_DEFAULT_VALUE :: 0xffffffff;

D3D11_PS_FRONTFACING_FALSE_VALUE :: 0;

D3D11_PS_FRONTFACING_TRUE_VALUE :: 0xffffffff;

D3D11_PS_INPUT_REGISTER_COMPONENTS :: 4;

D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_PS_INPUT_REGISTER_COUNT :: 32;

D3D11_PS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D11_PS_INPUT_REGISTER_READ_PORTS :: 1;

D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.0;
D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS :: 1;

D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT :: 1;

D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS :: 1;

D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_PS_OUTPUT_MASK_REGISTER_COUNT :: 1;

D3D11_PS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_PS_OUTPUT_REGISTER_COUNT :: 8;

D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.5;
D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT :: 16;

D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP :: 27;

D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;

D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 32;

D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP :: 32;

D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION :: 16384;

D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT :: 1024;

D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;

D3D11_REQ_MAXANISOTROPY :: 16;

D3D11_REQ_MIP_LEVELS :: 15;

D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES :: 2048;

D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH :: 16384;

D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM :: 128;

D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM :: 0.25;
D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM :: 2048;

D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP :: 20;

D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION :: 2048;

D3D11_REQ_TEXTURE1D_U_DIMENSION :: 16384;

D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION :: 2048;

D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 16384;

D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 2048;

D3D11_REQ_TEXTURECUBE_DIMENSION :: 16384;

D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL :: 0;

D3D11_SHADER_MAJOR_VERSION :: 5;

D3D11_SHADER_MAX_INSTANCES :: 65535;

D3D11_SHADER_MAX_INTERFACES :: 253;

D3D11_SHADER_MAX_INTERFACE_CALL_SITES :: 4096;

D3D11_SHADER_MAX_TYPES :: 65535;

D3D11_SHADER_MINOR_VERSION :: 0;

D3D11_SHIFT_INSTRUCTION_PAD_VALUE :: 0;

D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT :: 5;

D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT :: 8;

D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES :: 2048;

D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES :: 512;

D3D11_SO_BUFFER_SLOT_COUNT :: 4;

D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP :: 0xffffffff;

D3D11_SO_NO_RASTERIZED_STREAM :: 0xffffffff;

D3D11_SO_OUTPUT_COMPONENT_COUNT :: 128;

D3D11_SO_STREAM_COUNT :: 4;

D3D11_SPEC_DATE_DAY :: 16;

D3D11_SPEC_DATE_MONTH :: 0x5 /* 05 */;

D3D11_SPEC_DATE_YEAR :: 2011;

D3D11_SPEC_VERSION :: 1.07;
D3D11_SRGB_GAMMA :: 2.2;
D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 :: 12.92;
D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 :: 1.055;
D3D11_SRGB_TO_FLOAT_EXPONENT :: 2.4;
D3D11_SRGB_TO_FLOAT_OFFSET :: 0.055;
D3D11_SRGB_TO_FLOAT_THRESHOLD :: 0.04045;
D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP :: 0.5;
D3D11_STANDARD_COMPONENT_BIT_COUNT :: 32;

D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED :: 64;

D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE :: 4;

D3D11_STANDARD_PIXEL_COMPONENT_COUNT :: 128;

D3D11_STANDARD_PIXEL_ELEMENT_COUNT :: 32;

D3D11_STANDARD_VECTOR_SIZE :: 4;

D3D11_STANDARD_VERTEX_ELEMENT_COUNT :: 32;

D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT :: 64;

D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT :: 8;

D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT :: 8;

D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR :: 64;

D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 64;

D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR :: 63;

D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR :: 64;

D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR :: 2;

D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 1;

D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR :: 1;

D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT :: 16;

D3D11_UNBOUND_MEMORY_ACCESS_RESULT :: 0;

D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX :: 15;

D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE :: 16;

D3D11_VIEWPORT_BOUNDS_MAX :: 32767;

D3D11_VIEWPORT_BOUNDS_MIN :: -32768;

D3D11_VS_INPUT_REGISTER_COMPONENTS :: 4;

D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_VS_INPUT_REGISTER_COUNT :: 32;

D3D11_VS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D11_VS_INPUT_REGISTER_READ_PORTS :: 1;

D3D11_VS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D11_VS_OUTPUT_REGISTER_COUNT :: 32;

D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT :: 10;

D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 25;

D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP :: 25;

D3D11_1_UAV_SLOT_COUNT :: 64;

D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES :: 65536;

D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS :: 4;

D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT :: 256;

_FACD3D11 :: 0x87c;

_FACD3D11DEBUG :: ( _FACD3D11 + 1 );

D3D11_APPEND_ALIGNED_ELEMENT :: 0xffffffff;

D3D11_FILTER_REDUCTION_TYPE_MASK :: 0x3;

D3D11_FILTER_REDUCTION_TYPE_SHIFT :: 7;

D3D11_FILTER_TYPE_MASK :: 0x3;

D3D11_MIN_FILTER_SHIFT :: 4;

D3D11_MAG_FILTER_SHIFT :: 2;

D3D11_MIP_FILTER_SHIFT :: 0;

D3D11_COMPARISON_FILTERING_BIT :: 0x80;

D3D11_ANISOTROPIC_FILTERING_BIT :: 0x40;

D3D11_SDK_VERSION :: 7;

D3D_RETURN_PARAMETER_INDEX :: -1;

D3D_DRIVER_TYPE :: enum s32 {
    UNKNOWN   :: 0;
    HARDWARE  :: 1;
    REFERENCE :: 2;
    NULL      :: 3;
    SOFTWARE  :: 4;
    WARP      :: 5;

    D3D_DRIVER_TYPE_UNKNOWN   :: UNKNOWN;
    D3D_DRIVER_TYPE_HARDWARE  :: HARDWARE;
    D3D_DRIVER_TYPE_REFERENCE :: REFERENCE;
    D3D_DRIVER_TYPE_NULL      :: NULL;
    D3D_DRIVER_TYPE_SOFTWARE  :: SOFTWARE;
    D3D_DRIVER_TYPE_WARP      :: WARP;
}

D3D_FEATURE_LEVEL :: enum s32 {
    _1_0_CORE :: 4096;
    _9_1      :: 37120;
    _9_2      :: 37376;
    _9_3      :: 37632;
    _10_0     :: 40960;
    _10_1     :: 41216;
    _11_0     :: 45056;
    _11_1     :: 45312;
    _12_0     :: 49152;
    _12_1     :: 49408;
    _12_2     :: 49664;

    D3D_FEATURE_LEVEL_1_0_CORE :: _1_0_CORE;
    D3D_FEATURE_LEVEL_9_1      :: _9_1;
    D3D_FEATURE_LEVEL_9_2      :: _9_2;
    D3D_FEATURE_LEVEL_9_3      :: _9_3;
    D3D_FEATURE_LEVEL_10_0     :: _10_0;
    D3D_FEATURE_LEVEL_10_1     :: _10_1;
    D3D_FEATURE_LEVEL_11_0     :: _11_0;
    D3D_FEATURE_LEVEL_11_1     :: _11_1;
    D3D_FEATURE_LEVEL_12_0     :: _12_0;
    D3D_FEATURE_LEVEL_12_1     :: _12_1;
    D3D_FEATURE_LEVEL_12_2     :: _12_2;
}

D3D_PRIMITIVE_TOPOLOGY :: enum s32 {
    UNDEFINED                                           :: 0;
    POINTLIST                                           :: 1;
    LINELIST                                            :: 2;
    LINESTRIP                                           :: 3;
    TRIANGLELIST                                        :: 4;
    TRIANGLESTRIP                                       :: 5;
    LINELIST_ADJ                                        :: 10;
    LINESTRIP_ADJ                                       :: 11;
    TRIANGLELIST_ADJ                                    :: 12;
    TRIANGLESTRIP_ADJ                                   :: 13;
    _1_CONTROL_POINT_PATCHLIST                          :: 33;
    _2_CONTROL_POINT_PATCHLIST                          :: 34;
    _3_CONTROL_POINT_PATCHLIST                          :: 35;
    _4_CONTROL_POINT_PATCHLIST                          :: 36;
    _5_CONTROL_POINT_PATCHLIST                          :: 37;
    _6_CONTROL_POINT_PATCHLIST                          :: 38;
    _7_CONTROL_POINT_PATCHLIST                          :: 39;
    _8_CONTROL_POINT_PATCHLIST                          :: 40;
    _9_CONTROL_POINT_PATCHLIST                          :: 41;
    _10_CONTROL_POINT_PATCHLIST                         :: 42;
    _11_CONTROL_POINT_PATCHLIST                         :: 43;
    _12_CONTROL_POINT_PATCHLIST                         :: 44;
    _13_CONTROL_POINT_PATCHLIST                         :: 45;
    _14_CONTROL_POINT_PATCHLIST                         :: 46;
    _15_CONTROL_POINT_PATCHLIST                         :: 47;
    _16_CONTROL_POINT_PATCHLIST                         :: 48;
    _17_CONTROL_POINT_PATCHLIST                         :: 49;
    _18_CONTROL_POINT_PATCHLIST                         :: 50;
    _19_CONTROL_POINT_PATCHLIST                         :: 51;
    _20_CONTROL_POINT_PATCHLIST                         :: 52;
    _21_CONTROL_POINT_PATCHLIST                         :: 53;
    _22_CONTROL_POINT_PATCHLIST                         :: 54;
    _23_CONTROL_POINT_PATCHLIST                         :: 55;
    _24_CONTROL_POINT_PATCHLIST                         :: 56;
    _25_CONTROL_POINT_PATCHLIST                         :: 57;
    _26_CONTROL_POINT_PATCHLIST                         :: 58;
    _27_CONTROL_POINT_PATCHLIST                         :: 59;
    _28_CONTROL_POINT_PATCHLIST                         :: 60;
    _29_CONTROL_POINT_PATCHLIST                         :: 61;
    _30_CONTROL_POINT_PATCHLIST                         :: 62;
    _31_CONTROL_POINT_PATCHLIST                         :: 63;
    _32_CONTROL_POINT_PATCHLIST                         :: 64;
    D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: 0;
    D3D10_PRIMITIVE_TOPOLOGY_POINTLIST                  :: 1;
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST                   :: 2;
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: 3;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: 4;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: 5;
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: 10;
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: 11;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: 12;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: 13;
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: 0;
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST                  :: 1;
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST                   :: 2;
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: 3;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: 4;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: 5;
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: 10;
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: 11;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: 12;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: 13;
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST  :: 33;
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST  :: 34;
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST  :: 35;
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST  :: 36;
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST  :: 37;
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST  :: 38;
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST  :: 39;
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST  :: 40;
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST  :: 41;
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST :: 42;
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST :: 43;
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST :: 44;
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST :: 45;
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST :: 46;
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST :: 47;
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST :: 48;
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST :: 49;
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST :: 50;
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST :: 51;
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST :: 52;
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST :: 53;
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST :: 54;
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST :: 55;
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST :: 56;
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST :: 57;
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST :: 58;
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST :: 59;
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST :: 60;
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST :: 61;
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST :: 62;
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST :: 63;
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST :: 64;

    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: UNDEFINED;
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST                  :: POINTLIST;
    D3D_PRIMITIVE_TOPOLOGY_LINELIST                   :: LINELIST;
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: LINESTRIP;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: TRIANGLELIST;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: TRIANGLESTRIP;
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: LINELIST_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: LINESTRIP_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: TRIANGLELIST_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: TRIANGLESTRIP_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST  :: _1_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST  :: _2_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST  :: _3_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST  :: _4_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST  :: _5_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST  :: _6_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST  :: _7_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST  :: _8_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST  :: _9_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST :: _10_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST :: _11_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST :: _12_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST :: _13_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST :: _14_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST :: _15_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST :: _16_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST :: _17_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST :: _18_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST :: _19_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST :: _20_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST :: _21_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST :: _22_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST :: _23_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST :: _24_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST :: _25_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST :: _26_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST :: _27_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST :: _28_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST :: _29_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST :: _30_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST :: _31_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST :: _32_CONTROL_POINT_PATCHLIST;
}

D3D_PRIMITIVE :: enum s32 {
    UNDEFINED                              :: 0;
    POINT                                  :: 1;
    LINE                                   :: 2;
    TRIANGLE                               :: 3;
    LINE_ADJ                               :: 6;
    TRIANGLE_ADJ                           :: 7;
    _1_CONTROL_POINT_PATCH                 :: 8;
    _2_CONTROL_POINT_PATCH                 :: 9;
    _3_CONTROL_POINT_PATCH                 :: 10;
    _4_CONTROL_POINT_PATCH                 :: 11;
    _5_CONTROL_POINT_PATCH                 :: 12;
    _6_CONTROL_POINT_PATCH                 :: 13;
    _7_CONTROL_POINT_PATCH                 :: 14;
    _8_CONTROL_POINT_PATCH                 :: 15;
    _9_CONTROL_POINT_PATCH                 :: 16;
    _10_CONTROL_POINT_PATCH                :: 17;
    _11_CONTROL_POINT_PATCH                :: 18;
    _12_CONTROL_POINT_PATCH                :: 19;
    _13_CONTROL_POINT_PATCH                :: 20;
    _14_CONTROL_POINT_PATCH                :: 21;
    _15_CONTROL_POINT_PATCH                :: 22;
    _16_CONTROL_POINT_PATCH                :: 23;
    _17_CONTROL_POINT_PATCH                :: 24;
    _18_CONTROL_POINT_PATCH                :: 25;
    _19_CONTROL_POINT_PATCH                :: 26;
    _20_CONTROL_POINT_PATCH                :: 27;
    _21_CONTROL_POINT_PATCH                :: 28;
    _22_CONTROL_POINT_PATCH                :: 29;
    _23_CONTROL_POINT_PATCH                :: 30;
    _24_CONTROL_POINT_PATCH                :: 31;
    _25_CONTROL_POINT_PATCH                :: 32;
    _26_CONTROL_POINT_PATCH                :: 33;
    _27_CONTROL_POINT_PATCH                :: 34;
    _28_CONTROL_POINT_PATCH                :: 35;
    _29_CONTROL_POINT_PATCH                :: 36;
    _30_CONTROL_POINT_PATCH                :: 37;
    _31_CONTROL_POINT_PATCH                :: 38;
    _32_CONTROL_POINT_PATCH                :: 39;
    D3D10_PRIMITIVE_UNDEFINED              :: 0;
    D3D10_PRIMITIVE_POINT                  :: 1;
    D3D10_PRIMITIVE_LINE                   :: 2;
    D3D10_PRIMITIVE_TRIANGLE               :: 3;
    D3D10_PRIMITIVE_LINE_ADJ               :: 6;
    D3D10_PRIMITIVE_TRIANGLE_ADJ           :: 7;
    D3D11_PRIMITIVE_UNDEFINED              :: 0;
    D3D11_PRIMITIVE_POINT                  :: 1;
    D3D11_PRIMITIVE_LINE                   :: 2;
    D3D11_PRIMITIVE_TRIANGLE               :: 3;
    D3D11_PRIMITIVE_LINE_ADJ               :: 6;
    D3D11_PRIMITIVE_TRIANGLE_ADJ           :: 7;
    D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH  :: 8;
    D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH  :: 9;
    D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH  :: 10;
    D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH  :: 11;
    D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH  :: 12;
    D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH  :: 13;
    D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH  :: 14;
    D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH  :: 15;
    D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH  :: 16;
    D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH :: 17;
    D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH :: 18;
    D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH :: 19;
    D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH :: 20;
    D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH :: 21;
    D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH :: 22;
    D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH :: 23;
    D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH :: 24;
    D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH :: 25;
    D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH :: 26;
    D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH :: 27;
    D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH :: 28;
    D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH :: 29;
    D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH :: 30;
    D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH :: 31;
    D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH :: 32;
    D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH :: 33;
    D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH :: 34;
    D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH :: 35;
    D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH :: 36;
    D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH :: 37;
    D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH :: 38;
    D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH :: 39;

    D3D_PRIMITIVE_UNDEFINED              :: UNDEFINED;
    D3D_PRIMITIVE_POINT                  :: POINT;
    D3D_PRIMITIVE_LINE                   :: LINE;
    D3D_PRIMITIVE_TRIANGLE               :: TRIANGLE;
    D3D_PRIMITIVE_LINE_ADJ               :: LINE_ADJ;
    D3D_PRIMITIVE_TRIANGLE_ADJ           :: TRIANGLE_ADJ;
    D3D_PRIMITIVE_1_CONTROL_POINT_PATCH  :: _1_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_2_CONTROL_POINT_PATCH  :: _2_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_3_CONTROL_POINT_PATCH  :: _3_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_4_CONTROL_POINT_PATCH  :: _4_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_5_CONTROL_POINT_PATCH  :: _5_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_6_CONTROL_POINT_PATCH  :: _6_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_7_CONTROL_POINT_PATCH  :: _7_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_8_CONTROL_POINT_PATCH  :: _8_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_9_CONTROL_POINT_PATCH  :: _9_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_10_CONTROL_POINT_PATCH :: _10_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_11_CONTROL_POINT_PATCH :: _11_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_12_CONTROL_POINT_PATCH :: _12_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_13_CONTROL_POINT_PATCH :: _13_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_14_CONTROL_POINT_PATCH :: _14_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_15_CONTROL_POINT_PATCH :: _15_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_16_CONTROL_POINT_PATCH :: _16_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_17_CONTROL_POINT_PATCH :: _17_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_18_CONTROL_POINT_PATCH :: _18_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_19_CONTROL_POINT_PATCH :: _19_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_20_CONTROL_POINT_PATCH :: _20_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_21_CONTROL_POINT_PATCH :: _21_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_22_CONTROL_POINT_PATCH :: _22_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_23_CONTROL_POINT_PATCH :: _23_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_24_CONTROL_POINT_PATCH :: _24_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_25_CONTROL_POINT_PATCH :: _25_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_26_CONTROL_POINT_PATCH :: _26_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_27_CONTROL_POINT_PATCH :: _27_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_28_CONTROL_POINT_PATCH :: _28_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_29_CONTROL_POINT_PATCH :: _29_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_30_CONTROL_POINT_PATCH :: _30_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_31_CONTROL_POINT_PATCH :: _31_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_32_CONTROL_POINT_PATCH :: _32_CONTROL_POINT_PATCH;
}

D3D_SRV_DIMENSION :: enum s32 {
    UNKNOWN                                :: 0;
    BUFFER                                 :: 1;
    TEXTURE1D                              :: 2;
    TEXTURE1DARRAY                         :: 3;
    TEXTURE2D                              :: 4;
    TEXTURE2DARRAY                         :: 5;
    TEXTURE2DMS                            :: 6;
    TEXTURE2DMSARRAY                       :: 7;
    TEXTURE3D                              :: 8;
    TEXTURECUBE                            :: 9;
    TEXTURECUBEARRAY                       :: 10;
    BUFFEREX                               :: 11;
    D3D10_SRV_DIMENSION_UNKNOWN            :: 0;
    D3D10_SRV_DIMENSION_BUFFER             :: 1;
    D3D10_SRV_DIMENSION_TEXTURE1D          :: 2;
    D3D10_SRV_DIMENSION_TEXTURE1DARRAY     :: 3;
    D3D10_SRV_DIMENSION_TEXTURE2D          :: 4;
    D3D10_SRV_DIMENSION_TEXTURE2DARRAY     :: 5;
    D3D10_SRV_DIMENSION_TEXTURE2DMS        :: 6;
    D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY   :: 7;
    D3D10_SRV_DIMENSION_TEXTURE3D          :: 8;
    D3D10_SRV_DIMENSION_TEXTURECUBE        :: 9;
    D3D10_1_SRV_DIMENSION_UNKNOWN          :: 0;
    D3D10_1_SRV_DIMENSION_BUFFER           :: 1;
    D3D10_1_SRV_DIMENSION_TEXTURE1D        :: 2;
    D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY   :: 3;
    D3D10_1_SRV_DIMENSION_TEXTURE2D        :: 4;
    D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY   :: 5;
    D3D10_1_SRV_DIMENSION_TEXTURE2DMS      :: 6;
    D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY :: 7;
    D3D10_1_SRV_DIMENSION_TEXTURE3D        :: 8;
    D3D10_1_SRV_DIMENSION_TEXTURECUBE      :: 9;
    D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY :: 10;
    D3D11_SRV_DIMENSION_UNKNOWN            :: 0;
    D3D11_SRV_DIMENSION_BUFFER             :: 1;
    D3D11_SRV_DIMENSION_TEXTURE1D          :: 2;
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY     :: 3;
    D3D11_SRV_DIMENSION_TEXTURE2D          :: 4;
    D3D11_SRV_DIMENSION_TEXTURE2DARRAY     :: 5;
    D3D11_SRV_DIMENSION_TEXTURE2DMS        :: 6;
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY   :: 7;
    D3D11_SRV_DIMENSION_TEXTURE3D          :: 8;
    D3D11_SRV_DIMENSION_TEXTURECUBE        :: 9;
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY   :: 10;
    D3D11_SRV_DIMENSION_BUFFEREX           :: 11;

    D3D_SRV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D_SRV_DIMENSION_BUFFER           :: BUFFER;
    D3D_SRV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D_SRV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D_SRV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D_SRV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D_SRV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D_SRV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
    D3D_SRV_DIMENSION_TEXTURE3D        :: TEXTURE3D;
    D3D_SRV_DIMENSION_TEXTURECUBE      :: TEXTURECUBE;
    D3D_SRV_DIMENSION_TEXTURECUBEARRAY :: TEXTURECUBEARRAY;
    D3D_SRV_DIMENSION_BUFFEREX         :: BUFFEREX;
}

PFN_DESTRUCTION_CALLBACK :: #type (pData: *void) -> void #c_call;


ID3DDestructionNotifier_UUID :: "a06eb39a-50da-425b-8c31-4eecd6c270f3";
ID3DDestructionNotifier :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3ddestructionnotifier_vtable: *ID3DDestructionNotifier_VTable;
}
ID3DDestructionNotifier_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    RegisterDestructionCallback: (this: *ID3DDestructionNotifier, callbackFn: PFN_DESTRUCTION_CALLBACK, pData: *void, pCallbackID: *u32) -> HRESULT #cpp_method;
    UnregisterDestructionCallback: (this: *ID3DDestructionNotifier, callbackID: u32) -> HRESULT #cpp_method;
}
ID3DDestructionNotifier_RegisterDestructionCallback :: inline (this: *ID3DDestructionNotifier, callbackFn: PFN_DESTRUCTION_CALLBACK, pData: *void, pCallbackID: *u32) -> HRESULT { return this.id3ddestructionnotifier_vtable.RegisterDestructionCallback(this, callbackFn, pData, pCallbackID); }
ID3DDestructionNotifier_UnregisterDestructionCallback :: inline (this: *ID3DDestructionNotifier, callbackID: u32) -> HRESULT { return this.id3ddestructionnotifier_vtable.UnregisterDestructionCallback(this, callbackID); }

vtable :: (obj: *ID3DDestructionNotifier) -> *ID3DDestructionNotifier_VTable { return obj.id3ddestructionnotifier_vtable; }


D3D_SHADER_VARIABLE_CLASS :: enum s32 {
    SVC_SCALAR                :: 0;
    SVC_VECTOR                :: 1;
    SVC_MATRIX_ROWS           :: 2;
    SVC_MATRIX_COLUMNS        :: 3;
    SVC_OBJECT                :: 4;
    SVC_STRUCT                :: 5;
    SVC_INTERFACE_CLASS       :: 6;
    SVC_INTERFACE_POINTER     :: 7;
    _10_SVC_SCALAR            :: 0;
    _10_SVC_VECTOR            :: 1;
    _10_SVC_MATRIX_ROWS       :: 2;
    _10_SVC_MATRIX_COLUMNS    :: 3;
    _10_SVC_OBJECT            :: 4;
    _10_SVC_STRUCT            :: 5;
    _11_SVC_INTERFACE_CLASS   :: 6;
    _11_SVC_INTERFACE_POINTER :: 7;
    SVC_FORCE_DWORD           :: 2147483647;

    D3D_SVC_SCALAR              :: SVC_SCALAR;
    D3D_SVC_VECTOR              :: SVC_VECTOR;
    D3D_SVC_MATRIX_ROWS         :: SVC_MATRIX_ROWS;
    D3D_SVC_MATRIX_COLUMNS      :: SVC_MATRIX_COLUMNS;
    D3D_SVC_OBJECT              :: SVC_OBJECT;
    D3D_SVC_STRUCT              :: SVC_STRUCT;
    D3D_SVC_INTERFACE_CLASS     :: SVC_INTERFACE_CLASS;
    D3D_SVC_INTERFACE_POINTER   :: SVC_INTERFACE_POINTER;
    D3D10_SVC_SCALAR            :: _10_SVC_SCALAR;
    D3D10_SVC_VECTOR            :: _10_SVC_VECTOR;
    D3D10_SVC_MATRIX_ROWS       :: _10_SVC_MATRIX_ROWS;
    D3D10_SVC_MATRIX_COLUMNS    :: _10_SVC_MATRIX_COLUMNS;
    D3D10_SVC_OBJECT            :: _10_SVC_OBJECT;
    D3D10_SVC_STRUCT            :: _10_SVC_STRUCT;
    D3D11_SVC_INTERFACE_CLASS   :: _11_SVC_INTERFACE_CLASS;
    D3D11_SVC_INTERFACE_POINTER :: _11_SVC_INTERFACE_POINTER;
    D3D_SVC_FORCE_DWORD         :: SVC_FORCE_DWORD;
}

D3D_SHADER_VARIABLE_FLAGS :: enum_flags u32 {
    SVF_USERPACKED              :: 0x1;
    SVF_USED                    :: 0x2;
    SVF_INTERFACE_POINTER       :: 0x4;
    SVF_INTERFACE_PARAMETER     :: 0x8;
    _10_SVF_USERPACKED          :: 0x1;
    _10_SVF_USED                :: 0x2;
    _11_SVF_INTERFACE_POINTER   :: 0x4;
    _11_SVF_INTERFACE_PARAMETER :: 0x8;
    SVF_FORCE_DWORD             :: 0x7fffffff;

    D3D_SVF_USERPACKED            :: SVF_USERPACKED;
    D3D_SVF_USED                  :: SVF_USED;
    D3D_SVF_INTERFACE_POINTER     :: SVF_INTERFACE_POINTER;
    D3D_SVF_INTERFACE_PARAMETER   :: SVF_INTERFACE_PARAMETER;
    D3D10_SVF_USERPACKED          :: _10_SVF_USERPACKED;
    D3D10_SVF_USED                :: _10_SVF_USED;
    D3D11_SVF_INTERFACE_POINTER   :: _11_SVF_INTERFACE_POINTER;
    D3D11_SVF_INTERFACE_PARAMETER :: _11_SVF_INTERFACE_PARAMETER;
    D3D_SVF_FORCE_DWORD           :: SVF_FORCE_DWORD;
}

D3D_SHADER_VARIABLE_TYPE :: enum s32 {
    SVT_VOID                          :: 0;
    SVT_BOOL                          :: 1;
    SVT_INT                           :: 2;
    SVT_FLOAT                         :: 3;
    SVT_STRING                        :: 4;
    SVT_TEXTURE                       :: 5;
    SVT_TEXTURE1D                     :: 6;
    SVT_TEXTURE2D                     :: 7;
    SVT_TEXTURE3D                     :: 8;
    SVT_TEXTURECUBE                   :: 9;
    SVT_SAMPLER                       :: 10;
    SVT_SAMPLER1D                     :: 11;
    SVT_SAMPLER2D                     :: 12;
    SVT_SAMPLER3D                     :: 13;
    SVT_SAMPLERCUBE                   :: 14;
    SVT_PIXELSHADER                   :: 15;
    SVT_VERTEXSHADER                  :: 16;
    SVT_PIXELFRAGMENT                 :: 17;
    SVT_VERTEXFRAGMENT                :: 18;
    SVT_UINT                          :: 19;
    SVT_UINT8                         :: 20;
    SVT_GEOMETRYSHADER                :: 21;
    SVT_RASTERIZER                    :: 22;
    SVT_DEPTHSTENCIL                  :: 23;
    SVT_BLEND                         :: 24;
    SVT_BUFFER                        :: 25;
    SVT_CBUFFER                       :: 26;
    SVT_TBUFFER                       :: 27;
    SVT_TEXTURE1DARRAY                :: 28;
    SVT_TEXTURE2DARRAY                :: 29;
    SVT_RENDERTARGETVIEW              :: 30;
    SVT_DEPTHSTENCILVIEW              :: 31;
    SVT_TEXTURE2DMS                   :: 32;
    SVT_TEXTURE2DMSARRAY              :: 33;
    SVT_TEXTURECUBEARRAY              :: 34;
    SVT_HULLSHADER                    :: 35;
    SVT_DOMAINSHADER                  :: 36;
    SVT_INTERFACE_POINTER             :: 37;
    SVT_COMPUTESHADER                 :: 38;
    SVT_DOUBLE                        :: 39;
    SVT_RWTEXTURE1D                   :: 40;
    SVT_RWTEXTURE1DARRAY              :: 41;
    SVT_RWTEXTURE2D                   :: 42;
    SVT_RWTEXTURE2DARRAY              :: 43;
    SVT_RWTEXTURE3D                   :: 44;
    SVT_RWBUFFER                      :: 45;
    SVT_BYTEADDRESS_BUFFER            :: 46;
    SVT_RWBYTEADDRESS_BUFFER          :: 47;
    SVT_STRUCTURED_BUFFER             :: 48;
    SVT_RWSTRUCTURED_BUFFER           :: 49;
    SVT_APPEND_STRUCTURED_BUFFER      :: 50;
    SVT_CONSUME_STRUCTURED_BUFFER     :: 51;
    SVT_MIN8FLOAT                     :: 52;
    SVT_MIN10FLOAT                    :: 53;
    SVT_MIN16FLOAT                    :: 54;
    SVT_MIN12INT                      :: 55;
    SVT_MIN16INT                      :: 56;
    SVT_MIN16UINT                     :: 57;
    _10_SVT_VOID                      :: 0;
    _10_SVT_BOOL                      :: 1;
    _10_SVT_INT                       :: 2;
    _10_SVT_FLOAT                     :: 3;
    _10_SVT_STRING                    :: 4;
    _10_SVT_TEXTURE                   :: 5;
    _10_SVT_TEXTURE1D                 :: 6;
    _10_SVT_TEXTURE2D                 :: 7;
    _10_SVT_TEXTURE3D                 :: 8;
    _10_SVT_TEXTURECUBE               :: 9;
    _10_SVT_SAMPLER                   :: 10;
    _10_SVT_SAMPLER1D                 :: 11;
    _10_SVT_SAMPLER2D                 :: 12;
    _10_SVT_SAMPLER3D                 :: 13;
    _10_SVT_SAMPLERCUBE               :: 14;
    _10_SVT_PIXELSHADER               :: 15;
    _10_SVT_VERTEXSHADER              :: 16;
    _10_SVT_PIXELFRAGMENT             :: 17;
    _10_SVT_VERTEXFRAGMENT            :: 18;
    _10_SVT_UINT                      :: 19;
    _10_SVT_UINT8                     :: 20;
    _10_SVT_GEOMETRYSHADER            :: 21;
    _10_SVT_RASTERIZER                :: 22;
    _10_SVT_DEPTHSTENCIL              :: 23;
    _10_SVT_BLEND                     :: 24;
    _10_SVT_BUFFER                    :: 25;
    _10_SVT_CBUFFER                   :: 26;
    _10_SVT_TBUFFER                   :: 27;
    _10_SVT_TEXTURE1DARRAY            :: 28;
    _10_SVT_TEXTURE2DARRAY            :: 29;
    _10_SVT_RENDERTARGETVIEW          :: 30;
    _10_SVT_DEPTHSTENCILVIEW          :: 31;
    _10_SVT_TEXTURE2DMS               :: 32;
    _10_SVT_TEXTURE2DMSARRAY          :: 33;
    _10_SVT_TEXTURECUBEARRAY          :: 34;
    _11_SVT_HULLSHADER                :: 35;
    _11_SVT_DOMAINSHADER              :: 36;
    _11_SVT_INTERFACE_POINTER         :: 37;
    _11_SVT_COMPUTESHADER             :: 38;
    _11_SVT_DOUBLE                    :: 39;
    _11_SVT_RWTEXTURE1D               :: 40;
    _11_SVT_RWTEXTURE1DARRAY          :: 41;
    _11_SVT_RWTEXTURE2D               :: 42;
    _11_SVT_RWTEXTURE2DARRAY          :: 43;
    _11_SVT_RWTEXTURE3D               :: 44;
    _11_SVT_RWBUFFER                  :: 45;
    _11_SVT_BYTEADDRESS_BUFFER        :: 46;
    _11_SVT_RWBYTEADDRESS_BUFFER      :: 47;
    _11_SVT_STRUCTURED_BUFFER         :: 48;
    _11_SVT_RWSTRUCTURED_BUFFER       :: 49;
    _11_SVT_APPEND_STRUCTURED_BUFFER  :: 50;
    _11_SVT_CONSUME_STRUCTURED_BUFFER :: 51;
    SVT_FORCE_DWORD                   :: 2147483647;

    D3D_SVT_VOID                        :: SVT_VOID;
    D3D_SVT_BOOL                        :: SVT_BOOL;
    D3D_SVT_INT                         :: SVT_INT;
    D3D_SVT_FLOAT                       :: SVT_FLOAT;
    D3D_SVT_STRING                      :: SVT_STRING;
    D3D_SVT_TEXTURE                     :: SVT_TEXTURE;
    D3D_SVT_TEXTURE1D                   :: SVT_TEXTURE1D;
    D3D_SVT_TEXTURE2D                   :: SVT_TEXTURE2D;
    D3D_SVT_TEXTURE3D                   :: SVT_TEXTURE3D;
    D3D_SVT_TEXTURECUBE                 :: SVT_TEXTURECUBE;
    D3D_SVT_SAMPLER                     :: SVT_SAMPLER;
    D3D_SVT_SAMPLER1D                   :: SVT_SAMPLER1D;
    D3D_SVT_SAMPLER2D                   :: SVT_SAMPLER2D;
    D3D_SVT_SAMPLER3D                   :: SVT_SAMPLER3D;
    D3D_SVT_SAMPLERCUBE                 :: SVT_SAMPLERCUBE;
    D3D_SVT_PIXELSHADER                 :: SVT_PIXELSHADER;
    D3D_SVT_VERTEXSHADER                :: SVT_VERTEXSHADER;
    D3D_SVT_PIXELFRAGMENT               :: SVT_PIXELFRAGMENT;
    D3D_SVT_VERTEXFRAGMENT              :: SVT_VERTEXFRAGMENT;
    D3D_SVT_UINT                        :: SVT_UINT;
    D3D_SVT_UINT8                       :: SVT_UINT8;
    D3D_SVT_GEOMETRYSHADER              :: SVT_GEOMETRYSHADER;
    D3D_SVT_RASTERIZER                  :: SVT_RASTERIZER;
    D3D_SVT_DEPTHSTENCIL                :: SVT_DEPTHSTENCIL;
    D3D_SVT_BLEND                       :: SVT_BLEND;
    D3D_SVT_BUFFER                      :: SVT_BUFFER;
    D3D_SVT_CBUFFER                     :: SVT_CBUFFER;
    D3D_SVT_TBUFFER                     :: SVT_TBUFFER;
    D3D_SVT_TEXTURE1DARRAY              :: SVT_TEXTURE1DARRAY;
    D3D_SVT_TEXTURE2DARRAY              :: SVT_TEXTURE2DARRAY;
    D3D_SVT_RENDERTARGETVIEW            :: SVT_RENDERTARGETVIEW;
    D3D_SVT_DEPTHSTENCILVIEW            :: SVT_DEPTHSTENCILVIEW;
    D3D_SVT_TEXTURE2DMS                 :: SVT_TEXTURE2DMS;
    D3D_SVT_TEXTURE2DMSARRAY            :: SVT_TEXTURE2DMSARRAY;
    D3D_SVT_TEXTURECUBEARRAY            :: SVT_TEXTURECUBEARRAY;
    D3D_SVT_HULLSHADER                  :: SVT_HULLSHADER;
    D3D_SVT_DOMAINSHADER                :: SVT_DOMAINSHADER;
    D3D_SVT_INTERFACE_POINTER           :: SVT_INTERFACE_POINTER;
    D3D_SVT_COMPUTESHADER               :: SVT_COMPUTESHADER;
    D3D_SVT_DOUBLE                      :: SVT_DOUBLE;
    D3D_SVT_RWTEXTURE1D                 :: SVT_RWTEXTURE1D;
    D3D_SVT_RWTEXTURE1DARRAY            :: SVT_RWTEXTURE1DARRAY;
    D3D_SVT_RWTEXTURE2D                 :: SVT_RWTEXTURE2D;
    D3D_SVT_RWTEXTURE2DARRAY            :: SVT_RWTEXTURE2DARRAY;
    D3D_SVT_RWTEXTURE3D                 :: SVT_RWTEXTURE3D;
    D3D_SVT_RWBUFFER                    :: SVT_RWBUFFER;
    D3D_SVT_BYTEADDRESS_BUFFER          :: SVT_BYTEADDRESS_BUFFER;
    D3D_SVT_RWBYTEADDRESS_BUFFER        :: SVT_RWBYTEADDRESS_BUFFER;
    D3D_SVT_STRUCTURED_BUFFER           :: SVT_STRUCTURED_BUFFER;
    D3D_SVT_RWSTRUCTURED_BUFFER         :: SVT_RWSTRUCTURED_BUFFER;
    D3D_SVT_APPEND_STRUCTURED_BUFFER    :: SVT_APPEND_STRUCTURED_BUFFER;
    D3D_SVT_CONSUME_STRUCTURED_BUFFER   :: SVT_CONSUME_STRUCTURED_BUFFER;
    D3D_SVT_MIN8FLOAT                   :: SVT_MIN8FLOAT;
    D3D_SVT_MIN10FLOAT                  :: SVT_MIN10FLOAT;
    D3D_SVT_MIN16FLOAT                  :: SVT_MIN16FLOAT;
    D3D_SVT_MIN12INT                    :: SVT_MIN12INT;
    D3D_SVT_MIN16INT                    :: SVT_MIN16INT;
    D3D_SVT_MIN16UINT                   :: SVT_MIN16UINT;
    D3D10_SVT_VOID                      :: _10_SVT_VOID;
    D3D10_SVT_BOOL                      :: _10_SVT_BOOL;
    D3D10_SVT_INT                       :: _10_SVT_INT;
    D3D10_SVT_FLOAT                     :: _10_SVT_FLOAT;
    D3D10_SVT_STRING                    :: _10_SVT_STRING;
    D3D10_SVT_TEXTURE                   :: _10_SVT_TEXTURE;
    D3D10_SVT_TEXTURE1D                 :: _10_SVT_TEXTURE1D;
    D3D10_SVT_TEXTURE2D                 :: _10_SVT_TEXTURE2D;
    D3D10_SVT_TEXTURE3D                 :: _10_SVT_TEXTURE3D;
    D3D10_SVT_TEXTURECUBE               :: _10_SVT_TEXTURECUBE;
    D3D10_SVT_SAMPLER                   :: _10_SVT_SAMPLER;
    D3D10_SVT_SAMPLER1D                 :: _10_SVT_SAMPLER1D;
    D3D10_SVT_SAMPLER2D                 :: _10_SVT_SAMPLER2D;
    D3D10_SVT_SAMPLER3D                 :: _10_SVT_SAMPLER3D;
    D3D10_SVT_SAMPLERCUBE               :: _10_SVT_SAMPLERCUBE;
    D3D10_SVT_PIXELSHADER               :: _10_SVT_PIXELSHADER;
    D3D10_SVT_VERTEXSHADER              :: _10_SVT_VERTEXSHADER;
    D3D10_SVT_PIXELFRAGMENT             :: _10_SVT_PIXELFRAGMENT;
    D3D10_SVT_VERTEXFRAGMENT            :: _10_SVT_VERTEXFRAGMENT;
    D3D10_SVT_UINT                      :: _10_SVT_UINT;
    D3D10_SVT_UINT8                     :: _10_SVT_UINT8;
    D3D10_SVT_GEOMETRYSHADER            :: _10_SVT_GEOMETRYSHADER;
    D3D10_SVT_RASTERIZER                :: _10_SVT_RASTERIZER;
    D3D10_SVT_DEPTHSTENCIL              :: _10_SVT_DEPTHSTENCIL;
    D3D10_SVT_BLEND                     :: _10_SVT_BLEND;
    D3D10_SVT_BUFFER                    :: _10_SVT_BUFFER;
    D3D10_SVT_CBUFFER                   :: _10_SVT_CBUFFER;
    D3D10_SVT_TBUFFER                   :: _10_SVT_TBUFFER;
    D3D10_SVT_TEXTURE1DARRAY            :: _10_SVT_TEXTURE1DARRAY;
    D3D10_SVT_TEXTURE2DARRAY            :: _10_SVT_TEXTURE2DARRAY;
    D3D10_SVT_RENDERTARGETVIEW          :: _10_SVT_RENDERTARGETVIEW;
    D3D10_SVT_DEPTHSTENCILVIEW          :: _10_SVT_DEPTHSTENCILVIEW;
    D3D10_SVT_TEXTURE2DMS               :: _10_SVT_TEXTURE2DMS;
    D3D10_SVT_TEXTURE2DMSARRAY          :: _10_SVT_TEXTURE2DMSARRAY;
    D3D10_SVT_TEXTURECUBEARRAY          :: _10_SVT_TEXTURECUBEARRAY;
    D3D11_SVT_HULLSHADER                :: _11_SVT_HULLSHADER;
    D3D11_SVT_DOMAINSHADER              :: _11_SVT_DOMAINSHADER;
    D3D11_SVT_INTERFACE_POINTER         :: _11_SVT_INTERFACE_POINTER;
    D3D11_SVT_COMPUTESHADER             :: _11_SVT_COMPUTESHADER;
    D3D11_SVT_DOUBLE                    :: _11_SVT_DOUBLE;
    D3D11_SVT_RWTEXTURE1D               :: _11_SVT_RWTEXTURE1D;
    D3D11_SVT_RWTEXTURE1DARRAY          :: _11_SVT_RWTEXTURE1DARRAY;
    D3D11_SVT_RWTEXTURE2D               :: _11_SVT_RWTEXTURE2D;
    D3D11_SVT_RWTEXTURE2DARRAY          :: _11_SVT_RWTEXTURE2DARRAY;
    D3D11_SVT_RWTEXTURE3D               :: _11_SVT_RWTEXTURE3D;
    D3D11_SVT_RWBUFFER                  :: _11_SVT_RWBUFFER;
    D3D11_SVT_BYTEADDRESS_BUFFER        :: _11_SVT_BYTEADDRESS_BUFFER;
    D3D11_SVT_RWBYTEADDRESS_BUFFER      :: _11_SVT_RWBYTEADDRESS_BUFFER;
    D3D11_SVT_STRUCTURED_BUFFER         :: _11_SVT_STRUCTURED_BUFFER;
    D3D11_SVT_RWSTRUCTURED_BUFFER       :: _11_SVT_RWSTRUCTURED_BUFFER;
    D3D11_SVT_APPEND_STRUCTURED_BUFFER  :: _11_SVT_APPEND_STRUCTURED_BUFFER;
    D3D11_SVT_CONSUME_STRUCTURED_BUFFER :: _11_SVT_CONSUME_STRUCTURED_BUFFER;
    D3D_SVT_FORCE_DWORD                 :: SVT_FORCE_DWORD;
}

D3D_SHADER_INPUT_FLAGS :: enum_flags u32 {
    SIF_USERPACKED              :: 0x1;
    SIF_COMPARISON_SAMPLER      :: 0x2;
    SIF_TEXTURE_COMPONENT_0     :: 0x4;
    SIF_TEXTURE_COMPONENT_1     :: 0x8;
    SIF_TEXTURE_COMPONENTS      :: 0xc;
    SIF_UNUSED                  :: 0x10;
    _10_SIF_USERPACKED          :: 0x1;
    _10_SIF_COMPARISON_SAMPLER  :: 0x2;
    _10_SIF_TEXTURE_COMPONENT_0 :: 0x4;
    _10_SIF_TEXTURE_COMPONENT_1 :: 0x8;
    _10_SIF_TEXTURE_COMPONENTS  :: 0xc;
    SIF_FORCE_DWORD             :: 0x7fffffff;

    D3D_SIF_USERPACKED            :: SIF_USERPACKED;
    D3D_SIF_COMPARISON_SAMPLER    :: SIF_COMPARISON_SAMPLER;
    D3D_SIF_TEXTURE_COMPONENT_0   :: SIF_TEXTURE_COMPONENT_0;
    D3D_SIF_TEXTURE_COMPONENT_1   :: SIF_TEXTURE_COMPONENT_1;
    D3D_SIF_TEXTURE_COMPONENTS    :: SIF_TEXTURE_COMPONENTS;
    D3D_SIF_UNUSED                :: SIF_UNUSED;
    D3D10_SIF_USERPACKED          :: _10_SIF_USERPACKED;
    D3D10_SIF_COMPARISON_SAMPLER  :: _10_SIF_COMPARISON_SAMPLER;
    D3D10_SIF_TEXTURE_COMPONENT_0 :: _10_SIF_TEXTURE_COMPONENT_0;
    D3D10_SIF_TEXTURE_COMPONENT_1 :: _10_SIF_TEXTURE_COMPONENT_1;
    D3D10_SIF_TEXTURE_COMPONENTS  :: _10_SIF_TEXTURE_COMPONENTS;
    D3D_SIF_FORCE_DWORD           :: SIF_FORCE_DWORD;
}

D3D_SHADER_INPUT_TYPE :: enum s32 {
    SIT_CBUFFER                           :: 0;
    SIT_TBUFFER                           :: 1;
    SIT_TEXTURE                           :: 2;
    SIT_SAMPLER                           :: 3;
    SIT_UAV_RWTYPED                       :: 4;
    SIT_STRUCTURED                        :: 5;
    SIT_UAV_RWSTRUCTURED                  :: 6;
    SIT_BYTEADDRESS                       :: 7;
    SIT_UAV_RWBYTEADDRESS                 :: 8;
    SIT_UAV_APPEND_STRUCTURED             :: 9;
    SIT_UAV_CONSUME_STRUCTURED            :: 10;
    SIT_UAV_RWSTRUCTURED_WITH_COUNTER     :: 11;
    SIT_RTACCELERATIONSTRUCTURE           :: 12;
    SIT_UAV_FEEDBACKTEXTURE               :: 13;
    _10_SIT_CBUFFER                       :: 0;
    _10_SIT_TBUFFER                       :: 1;
    _10_SIT_TEXTURE                       :: 2;
    _10_SIT_SAMPLER                       :: 3;
    _11_SIT_UAV_RWTYPED                   :: 4;
    _11_SIT_STRUCTURED                    :: 5;
    _11_SIT_UAV_RWSTRUCTURED              :: 6;
    _11_SIT_BYTEADDRESS                   :: 7;
    _11_SIT_UAV_RWBYTEADDRESS             :: 8;
    _11_SIT_UAV_APPEND_STRUCTURED         :: 9;
    _11_SIT_UAV_CONSUME_STRUCTURED        :: 10;
    _11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER :: 11;

    D3D_SIT_CBUFFER                         :: SIT_CBUFFER;
    D3D_SIT_TBUFFER                         :: SIT_TBUFFER;
    D3D_SIT_TEXTURE                         :: SIT_TEXTURE;
    D3D_SIT_SAMPLER                         :: SIT_SAMPLER;
    D3D_SIT_UAV_RWTYPED                     :: SIT_UAV_RWTYPED;
    D3D_SIT_STRUCTURED                      :: SIT_STRUCTURED;
    D3D_SIT_UAV_RWSTRUCTURED                :: SIT_UAV_RWSTRUCTURED;
    D3D_SIT_BYTEADDRESS                     :: SIT_BYTEADDRESS;
    D3D_SIT_UAV_RWBYTEADDRESS               :: SIT_UAV_RWBYTEADDRESS;
    D3D_SIT_UAV_APPEND_STRUCTURED           :: SIT_UAV_APPEND_STRUCTURED;
    D3D_SIT_UAV_CONSUME_STRUCTURED          :: SIT_UAV_CONSUME_STRUCTURED;
    D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER   :: SIT_UAV_RWSTRUCTURED_WITH_COUNTER;
    D3D_SIT_RTACCELERATIONSTRUCTURE         :: SIT_RTACCELERATIONSTRUCTURE;
    D3D_SIT_UAV_FEEDBACKTEXTURE             :: SIT_UAV_FEEDBACKTEXTURE;
    D3D10_SIT_CBUFFER                       :: _10_SIT_CBUFFER;
    D3D10_SIT_TBUFFER                       :: _10_SIT_TBUFFER;
    D3D10_SIT_TEXTURE                       :: _10_SIT_TEXTURE;
    D3D10_SIT_SAMPLER                       :: _10_SIT_SAMPLER;
    D3D11_SIT_UAV_RWTYPED                   :: _11_SIT_UAV_RWTYPED;
    D3D11_SIT_STRUCTURED                    :: _11_SIT_STRUCTURED;
    D3D11_SIT_UAV_RWSTRUCTURED              :: _11_SIT_UAV_RWSTRUCTURED;
    D3D11_SIT_BYTEADDRESS                   :: _11_SIT_BYTEADDRESS;
    D3D11_SIT_UAV_RWBYTEADDRESS             :: _11_SIT_UAV_RWBYTEADDRESS;
    D3D11_SIT_UAV_APPEND_STRUCTURED         :: _11_SIT_UAV_APPEND_STRUCTURED;
    D3D11_SIT_UAV_CONSUME_STRUCTURED        :: _11_SIT_UAV_CONSUME_STRUCTURED;
    D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER :: _11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER;
}

D3D_SHADER_CBUFFER_FLAGS :: enum_flags u32 {
    CBF_USERPACKED     :: 0x1;
    _10_CBF_USERPACKED :: 0x1;
    CBF_FORCE_DWORD    :: 0x7fffffff;

    D3D_CBF_USERPACKED   :: CBF_USERPACKED;
    D3D10_CBF_USERPACKED :: _10_CBF_USERPACKED;
    D3D_CBF_FORCE_DWORD  :: CBF_FORCE_DWORD;
}

D3D_CBUFFER_TYPE :: enum s32 {
    CT_CBUFFER                :: 0;
    CT_TBUFFER                :: 1;
    CT_INTERFACE_POINTERS     :: 2;
    CT_RESOURCE_BIND_INFO     :: 3;
    _10_CT_CBUFFER            :: 0;
    _10_CT_TBUFFER            :: 1;
    _11_CT_CBUFFER            :: 0;
    _11_CT_TBUFFER            :: 1;
    _11_CT_INTERFACE_POINTERS :: 2;
    _11_CT_RESOURCE_BIND_INFO :: 3;

    D3D_CT_CBUFFER              :: CT_CBUFFER;
    D3D_CT_TBUFFER              :: CT_TBUFFER;
    D3D_CT_INTERFACE_POINTERS   :: CT_INTERFACE_POINTERS;
    D3D_CT_RESOURCE_BIND_INFO   :: CT_RESOURCE_BIND_INFO;
    D3D10_CT_CBUFFER            :: _10_CT_CBUFFER;
    D3D10_CT_TBUFFER            :: _10_CT_TBUFFER;
    D3D11_CT_CBUFFER            :: _11_CT_CBUFFER;
    D3D11_CT_TBUFFER            :: _11_CT_TBUFFER;
    D3D11_CT_INTERFACE_POINTERS :: _11_CT_INTERFACE_POINTERS;
    D3D11_CT_RESOURCE_BIND_INFO :: _11_CT_RESOURCE_BIND_INFO;
}

D3D_NAME :: enum s32 {
    UNDEFINED                                :: 0;
    POSITION                                 :: 1;
    CLIP_DISTANCE                            :: 2;
    CULL_DISTANCE                            :: 3;
    RENDER_TARGET_ARRAY_INDEX                :: 4;
    VIEWPORT_ARRAY_INDEX                     :: 5;
    VERTEX_ID                                :: 6;
    PRIMITIVE_ID                             :: 7;
    INSTANCE_ID                              :: 8;
    IS_FRONT_FACE                            :: 9;
    SAMPLE_INDEX                             :: 10;
    FINAL_QUAD_EDGE_TESSFACTOR               :: 11;
    FINAL_QUAD_INSIDE_TESSFACTOR             :: 12;
    FINAL_TRI_EDGE_TESSFACTOR                :: 13;
    FINAL_TRI_INSIDE_TESSFACTOR              :: 14;
    FINAL_LINE_DETAIL_TESSFACTOR             :: 15;
    FINAL_LINE_DENSITY_TESSFACTOR            :: 16;
    BARYCENTRICS                             :: 23;
    SHADINGRATE                              :: 24;
    CULLPRIMITIVE                            :: 25;
    TARGET                                   :: 64;
    DEPTH                                    :: 65;
    COVERAGE                                 :: 66;
    DEPTH_GREATER_EQUAL                      :: 67;
    DEPTH_LESS_EQUAL                         :: 68;
    STENCIL_REF                              :: 69;
    INNER_COVERAGE                           :: 70;
    D3D10_NAME_UNDEFINED                     :: 0;
    D3D10_NAME_POSITION                      :: 1;
    D3D10_NAME_CLIP_DISTANCE                 :: 2;
    D3D10_NAME_CULL_DISTANCE                 :: 3;
    D3D10_NAME_RENDER_TARGET_ARRAY_INDEX     :: 4;
    D3D10_NAME_VIEWPORT_ARRAY_INDEX          :: 5;
    D3D10_NAME_VERTEX_ID                     :: 6;
    D3D10_NAME_PRIMITIVE_ID                  :: 7;
    D3D10_NAME_INSTANCE_ID                   :: 8;
    D3D10_NAME_IS_FRONT_FACE                 :: 9;
    D3D10_NAME_SAMPLE_INDEX                  :: 10;
    D3D10_NAME_TARGET                        :: 64;
    D3D10_NAME_DEPTH                         :: 65;
    D3D10_NAME_COVERAGE                      :: 66;
    D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR    :: 11;
    D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR  :: 12;
    D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR     :: 13;
    D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR   :: 14;
    D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR  :: 15;
    D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR :: 16;
    D3D11_NAME_DEPTH_GREATER_EQUAL           :: 67;
    D3D11_NAME_DEPTH_LESS_EQUAL              :: 68;
    D3D11_NAME_STENCIL_REF                   :: 69;
    D3D11_NAME_INNER_COVERAGE                :: 70;
    D3D12_NAME_BARYCENTRICS                  :: 23;
    D3D12_NAME_SHADINGRATE                   :: 24;
    D3D12_NAME_CULLPRIMITIVE                 :: 25;

    D3D_NAME_UNDEFINED                     :: UNDEFINED;
    D3D_NAME_POSITION                      :: POSITION;
    D3D_NAME_CLIP_DISTANCE                 :: CLIP_DISTANCE;
    D3D_NAME_CULL_DISTANCE                 :: CULL_DISTANCE;
    D3D_NAME_RENDER_TARGET_ARRAY_INDEX     :: RENDER_TARGET_ARRAY_INDEX;
    D3D_NAME_VIEWPORT_ARRAY_INDEX          :: VIEWPORT_ARRAY_INDEX;
    D3D_NAME_VERTEX_ID                     :: VERTEX_ID;
    D3D_NAME_PRIMITIVE_ID                  :: PRIMITIVE_ID;
    D3D_NAME_INSTANCE_ID                   :: INSTANCE_ID;
    D3D_NAME_IS_FRONT_FACE                 :: IS_FRONT_FACE;
    D3D_NAME_SAMPLE_INDEX                  :: SAMPLE_INDEX;
    D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR    :: FINAL_QUAD_EDGE_TESSFACTOR;
    D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR  :: FINAL_QUAD_INSIDE_TESSFACTOR;
    D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR     :: FINAL_TRI_EDGE_TESSFACTOR;
    D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR   :: FINAL_TRI_INSIDE_TESSFACTOR;
    D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR  :: FINAL_LINE_DETAIL_TESSFACTOR;
    D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR :: FINAL_LINE_DENSITY_TESSFACTOR;
    D3D_NAME_BARYCENTRICS                  :: BARYCENTRICS;
    D3D_NAME_SHADINGRATE                   :: SHADINGRATE;
    D3D_NAME_CULLPRIMITIVE                 :: CULLPRIMITIVE;
    D3D_NAME_TARGET                        :: TARGET;
    D3D_NAME_DEPTH                         :: DEPTH;
    D3D_NAME_COVERAGE                      :: COVERAGE;
    D3D_NAME_DEPTH_GREATER_EQUAL           :: DEPTH_GREATER_EQUAL;
    D3D_NAME_DEPTH_LESS_EQUAL              :: DEPTH_LESS_EQUAL;
    D3D_NAME_STENCIL_REF                   :: STENCIL_REF;
    D3D_NAME_INNER_COVERAGE                :: INNER_COVERAGE;
}

D3D_RESOURCE_RETURN_TYPE :: enum s32 {
    RETURN_TYPE_UNORM         :: 1;
    RETURN_TYPE_SNORM         :: 2;
    RETURN_TYPE_SINT          :: 3;
    RETURN_TYPE_UINT          :: 4;
    RETURN_TYPE_FLOAT         :: 5;
    RETURN_TYPE_MIXED         :: 6;
    RETURN_TYPE_DOUBLE        :: 7;
    RETURN_TYPE_CONTINUED     :: 8;
    _10_RETURN_TYPE_UNORM     :: 1;
    _10_RETURN_TYPE_SNORM     :: 2;
    _10_RETURN_TYPE_SINT      :: 3;
    _10_RETURN_TYPE_UINT      :: 4;
    _10_RETURN_TYPE_FLOAT     :: 5;
    _10_RETURN_TYPE_MIXED     :: 6;
    _11_RETURN_TYPE_UNORM     :: 1;
    _11_RETURN_TYPE_SNORM     :: 2;
    _11_RETURN_TYPE_SINT      :: 3;
    _11_RETURN_TYPE_UINT      :: 4;
    _11_RETURN_TYPE_FLOAT     :: 5;
    _11_RETURN_TYPE_MIXED     :: 6;
    _11_RETURN_TYPE_DOUBLE    :: 7;
    _11_RETURN_TYPE_CONTINUED :: 8;

    D3D_RETURN_TYPE_UNORM       :: RETURN_TYPE_UNORM;
    D3D_RETURN_TYPE_SNORM       :: RETURN_TYPE_SNORM;
    D3D_RETURN_TYPE_SINT        :: RETURN_TYPE_SINT;
    D3D_RETURN_TYPE_UINT        :: RETURN_TYPE_UINT;
    D3D_RETURN_TYPE_FLOAT       :: RETURN_TYPE_FLOAT;
    D3D_RETURN_TYPE_MIXED       :: RETURN_TYPE_MIXED;
    D3D_RETURN_TYPE_DOUBLE      :: RETURN_TYPE_DOUBLE;
    D3D_RETURN_TYPE_CONTINUED   :: RETURN_TYPE_CONTINUED;
    D3D10_RETURN_TYPE_UNORM     :: _10_RETURN_TYPE_UNORM;
    D3D10_RETURN_TYPE_SNORM     :: _10_RETURN_TYPE_SNORM;
    D3D10_RETURN_TYPE_SINT      :: _10_RETURN_TYPE_SINT;
    D3D10_RETURN_TYPE_UINT      :: _10_RETURN_TYPE_UINT;
    D3D10_RETURN_TYPE_FLOAT     :: _10_RETURN_TYPE_FLOAT;
    D3D10_RETURN_TYPE_MIXED     :: _10_RETURN_TYPE_MIXED;
    D3D11_RETURN_TYPE_UNORM     :: _11_RETURN_TYPE_UNORM;
    D3D11_RETURN_TYPE_SNORM     :: _11_RETURN_TYPE_SNORM;
    D3D11_RETURN_TYPE_SINT      :: _11_RETURN_TYPE_SINT;
    D3D11_RETURN_TYPE_UINT      :: _11_RETURN_TYPE_UINT;
    D3D11_RETURN_TYPE_FLOAT     :: _11_RETURN_TYPE_FLOAT;
    D3D11_RETURN_TYPE_MIXED     :: _11_RETURN_TYPE_MIXED;
    D3D11_RETURN_TYPE_DOUBLE    :: _11_RETURN_TYPE_DOUBLE;
    D3D11_RETURN_TYPE_CONTINUED :: _11_RETURN_TYPE_CONTINUED;
}

D3D_REGISTER_COMPONENT_TYPE :: enum s32 {
    REGISTER_COMPONENT_UNKNOWN     :: 0;
    REGISTER_COMPONENT_UINT32      :: 1;
    REGISTER_COMPONENT_SINT32      :: 2;
    REGISTER_COMPONENT_FLOAT32     :: 3;
    _10_REGISTER_COMPONENT_UNKNOWN :: 0;
    _10_REGISTER_COMPONENT_UINT32  :: 1;
    _10_REGISTER_COMPONENT_SINT32  :: 2;
    _10_REGISTER_COMPONENT_FLOAT32 :: 3;

    D3D_REGISTER_COMPONENT_UNKNOWN   :: REGISTER_COMPONENT_UNKNOWN;
    D3D_REGISTER_COMPONENT_UINT32    :: REGISTER_COMPONENT_UINT32;
    D3D_REGISTER_COMPONENT_SINT32    :: REGISTER_COMPONENT_SINT32;
    D3D_REGISTER_COMPONENT_FLOAT32   :: REGISTER_COMPONENT_FLOAT32;
    D3D10_REGISTER_COMPONENT_UNKNOWN :: _10_REGISTER_COMPONENT_UNKNOWN;
    D3D10_REGISTER_COMPONENT_UINT32  :: _10_REGISTER_COMPONENT_UINT32;
    D3D10_REGISTER_COMPONENT_SINT32  :: _10_REGISTER_COMPONENT_SINT32;
    D3D10_REGISTER_COMPONENT_FLOAT32 :: _10_REGISTER_COMPONENT_FLOAT32;
}

D3D_TESSELLATOR_DOMAIN :: enum s32 {
    UNDEFINED                          :: 0;
    ISOLINE                            :: 1;
    TRI                                :: 2;
    QUAD                               :: 3;
    D3D11_TESSELLATOR_DOMAIN_UNDEFINED :: 0;
    D3D11_TESSELLATOR_DOMAIN_ISOLINE   :: 1;
    D3D11_TESSELLATOR_DOMAIN_TRI       :: 2;
    D3D11_TESSELLATOR_DOMAIN_QUAD      :: 3;

    D3D_TESSELLATOR_DOMAIN_UNDEFINED :: UNDEFINED;
    D3D_TESSELLATOR_DOMAIN_ISOLINE   :: ISOLINE;
    D3D_TESSELLATOR_DOMAIN_TRI       :: TRI;
    D3D_TESSELLATOR_DOMAIN_QUAD      :: QUAD;
}

D3D_TESSELLATOR_PARTITIONING :: enum s32 {
    UNDEFINED                                      :: 0;
    INTEGER                                        :: 1;
    POW2                                           :: 2;
    FRACTIONAL_ODD                                 :: 3;
    FRACTIONAL_EVEN                                :: 4;
    D3D11_TESSELLATOR_PARTITIONING_UNDEFINED       :: 0;
    D3D11_TESSELLATOR_PARTITIONING_INTEGER         :: 1;
    D3D11_TESSELLATOR_PARTITIONING_POW2            :: 2;
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD  :: 3;
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN :: 4;

    D3D_TESSELLATOR_PARTITIONING_UNDEFINED       :: UNDEFINED;
    D3D_TESSELLATOR_PARTITIONING_INTEGER         :: INTEGER;
    D3D_TESSELLATOR_PARTITIONING_POW2            :: POW2;
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD  :: FRACTIONAL_ODD;
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN :: FRACTIONAL_EVEN;
}

D3D_TESSELLATOR_OUTPUT_PRIMITIVE :: enum s32 {
    TESSELLATOR_OUTPUT_UNDEFINED        :: 0;
    TESSELLATOR_OUTPUT_POINT            :: 1;
    TESSELLATOR_OUTPUT_LINE             :: 2;
    TESSELLATOR_OUTPUT_TRIANGLE_CW      :: 3;
    TESSELLATOR_OUTPUT_TRIANGLE_CCW     :: 4;
    _11_TESSELLATOR_OUTPUT_UNDEFINED    :: 0;
    _11_TESSELLATOR_OUTPUT_POINT        :: 1;
    _11_TESSELLATOR_OUTPUT_LINE         :: 2;
    _11_TESSELLATOR_OUTPUT_TRIANGLE_CW  :: 3;
    _11_TESSELLATOR_OUTPUT_TRIANGLE_CCW :: 4;

    D3D_TESSELLATOR_OUTPUT_UNDEFINED      :: TESSELLATOR_OUTPUT_UNDEFINED;
    D3D_TESSELLATOR_OUTPUT_POINT          :: TESSELLATOR_OUTPUT_POINT;
    D3D_TESSELLATOR_OUTPUT_LINE           :: TESSELLATOR_OUTPUT_LINE;
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW    :: TESSELLATOR_OUTPUT_TRIANGLE_CW;
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW   :: TESSELLATOR_OUTPUT_TRIANGLE_CCW;
    D3D11_TESSELLATOR_OUTPUT_UNDEFINED    :: _11_TESSELLATOR_OUTPUT_UNDEFINED;
    D3D11_TESSELLATOR_OUTPUT_POINT        :: _11_TESSELLATOR_OUTPUT_POINT;
    D3D11_TESSELLATOR_OUTPUT_LINE         :: _11_TESSELLATOR_OUTPUT_LINE;
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW  :: _11_TESSELLATOR_OUTPUT_TRIANGLE_CW;
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW :: _11_TESSELLATOR_OUTPUT_TRIANGLE_CCW;
}

D3D_MIN_PRECISION :: enum s32 {
    DEFAULT   :: 0;
    FLOAT_16  :: 1;
    FLOAT_2_8 :: 2;
    RESERVED  :: 3;
    SINT_16   :: 4;
    UINT_16   :: 5;
    ANY_16    :: 240;
    ANY_10    :: 241;

    D3D_MIN_PRECISION_DEFAULT   :: DEFAULT;
    D3D_MIN_PRECISION_FLOAT_16  :: FLOAT_16;
    D3D_MIN_PRECISION_FLOAT_2_8 :: FLOAT_2_8;
    D3D_MIN_PRECISION_RESERVED  :: RESERVED;
    D3D_MIN_PRECISION_SINT_16   :: SINT_16;
    D3D_MIN_PRECISION_UINT_16   :: UINT_16;
    D3D_MIN_PRECISION_ANY_16    :: ANY_16;
    D3D_MIN_PRECISION_ANY_10    :: ANY_10;
}

D3D_INTERPOLATION_MODE :: enum s32 {
    UNDEFINED                     :: 0;
    CONSTANT                      :: 1;
    LINEAR                        :: 2;
    LINEAR_CENTROID               :: 3;
    LINEAR_NOPERSPECTIVE          :: 4;
    LINEAR_NOPERSPECTIVE_CENTROID :: 5;
    LINEAR_SAMPLE                 :: 6;
    LINEAR_NOPERSPECTIVE_SAMPLE   :: 7;

    D3D_INTERPOLATION_UNDEFINED                     :: UNDEFINED;
    D3D_INTERPOLATION_CONSTANT                      :: CONSTANT;
    D3D_INTERPOLATION_LINEAR                        :: LINEAR;
    D3D_INTERPOLATION_LINEAR_CENTROID               :: LINEAR_CENTROID;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE          :: LINEAR_NOPERSPECTIVE;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID :: LINEAR_NOPERSPECTIVE_CENTROID;
    D3D_INTERPOLATION_LINEAR_SAMPLE                 :: LINEAR_SAMPLE;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE   :: LINEAR_NOPERSPECTIVE_SAMPLE;
}

D3D_PARAMETER_FLAGS :: enum_flags u32 {
    NONE        :: 0x0;
    IN          :: 0x1;
    OUT         :: 0x2;
    FORCE_DWORD :: 0x7fffffff;

    D3D_PF_NONE        :: NONE;
    D3D_PF_IN          :: IN;
    D3D_PF_OUT         :: OUT;
    D3D_PF_FORCE_DWORD :: FORCE_DWORD;
}

WKPDID_D3DDebugObjectNameW: GUID;
WKPDID_CommentStringW: GUID;
WKPDID_D3D12UniqueObjectId: GUID;

D3D_TEXTURE_LAYOUT_ROW_MAJOR: GUID;
D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE: GUID;

CD3D11_DEFAULT :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

D3D11_INPUT_CLASSIFICATION :: enum s32 {
    VERTEX_DATA   :: 0;
    INSTANCE_DATA :: 1;

    D3D11_INPUT_PER_VERTEX_DATA   :: VERTEX_DATA;
    D3D11_INPUT_PER_INSTANCE_DATA :: INSTANCE_DATA;
}

D3D11_INPUT_ELEMENT_DESC :: struct {
    SemanticName:         *u8;
    SemanticIndex:        u32;
    Format:               DXGI_FORMAT;
    InputSlot:            u32;
    AlignedByteOffset:    u32;
    InputSlotClass:       D3D11_INPUT_CLASSIFICATION;
    InstanceDataStepRate: u32;
}

D3D11_FILL_MODE :: enum s32 {
    WIREFRAME :: 2;
    SOLID     :: 3;

    D3D11_FILL_WIREFRAME :: WIREFRAME;
    D3D11_FILL_SOLID     :: SOLID;
}

D3D11_PRIMITIVE_TOPOLOGY :: D3D_PRIMITIVE_TOPOLOGY;

D3D11_PRIMITIVE :: D3D_PRIMITIVE;

D3D11_CULL_MODE :: enum s32 {
    NONE  :: 1;
    FRONT :: 2;
    BACK  :: 3;

    D3D11_CULL_NONE  :: NONE;
    D3D11_CULL_FRONT :: FRONT;
    D3D11_CULL_BACK  :: BACK;
}

D3D11_SO_DECLARATION_ENTRY :: struct {
    Stream:         u32;
    SemanticName:   *u8;
    SemanticIndex:  u32;
    StartComponent: u8;
    ComponentCount: u8;
    OutputSlot:     u8;
}

D3D11_VIEWPORT :: struct {
    TopLeftX: float;
    TopLeftY: float;
    Width:    float;
    Height:   float;
    MinDepth: float;
    MaxDepth: float;
}

D3D11_DRAW_INSTANCED_INDIRECT_ARGS :: struct {
    VertexCountPerInstance: u32;
    InstanceCount:          u32;
    StartVertexLocation:    u32;
    StartInstanceLocation:  u32;
}

D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS :: struct {
    IndexCountPerInstance: u32;
    InstanceCount:         u32;
    StartIndexLocation:    u32;
    BaseVertexLocation:    s32;
    StartInstanceLocation: u32;
}

D3D11_RESOURCE_DIMENSION :: enum s32 {
    UNKNOWN   :: 0;
    BUFFER    :: 1;
    TEXTURE1D :: 2;
    TEXTURE2D :: 3;
    TEXTURE3D :: 4;

    D3D11_RESOURCE_DIMENSION_UNKNOWN   :: UNKNOWN;
    D3D11_RESOURCE_DIMENSION_BUFFER    :: BUFFER;
    D3D11_RESOURCE_DIMENSION_TEXTURE1D :: TEXTURE1D;
    D3D11_RESOURCE_DIMENSION_TEXTURE2D :: TEXTURE2D;
    D3D11_RESOURCE_DIMENSION_TEXTURE3D :: TEXTURE3D;
}

D3D11_SRV_DIMENSION :: D3D_SRV_DIMENSION;

D3D11_DSV_DIMENSION :: enum s32 {
    UNKNOWN          :: 0;
    TEXTURE1D        :: 1;
    TEXTURE1DARRAY   :: 2;
    TEXTURE2D        :: 3;
    TEXTURE2DARRAY   :: 4;
    TEXTURE2DMS      :: 5;
    TEXTURE2DMSARRAY :: 6;

    D3D11_DSV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D11_DSV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D11_DSV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D11_DSV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
}

D3D11_RTV_DIMENSION :: enum s32 {
    UNKNOWN          :: 0;
    BUFFER           :: 1;
    TEXTURE1D        :: 2;
    TEXTURE1DARRAY   :: 3;
    TEXTURE2D        :: 4;
    TEXTURE2DARRAY   :: 5;
    TEXTURE2DMS      :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D        :: 8;

    D3D11_RTV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D11_RTV_DIMENSION_BUFFER           :: BUFFER;
    D3D11_RTV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D11_RTV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D11_RTV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
    D3D11_RTV_DIMENSION_TEXTURE3D        :: TEXTURE3D;
}

D3D11_UAV_DIMENSION :: enum s32 {
    UNKNOWN        :: 0;
    BUFFER         :: 1;
    TEXTURE1D      :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D      :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE3D      :: 8;

    D3D11_UAV_DIMENSION_UNKNOWN        :: UNKNOWN;
    D3D11_UAV_DIMENSION_BUFFER         :: BUFFER;
    D3D11_UAV_DIMENSION_TEXTURE1D      :: TEXTURE1D;
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY :: TEXTURE1DARRAY;
    D3D11_UAV_DIMENSION_TEXTURE2D      :: TEXTURE2D;
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY :: TEXTURE2DARRAY;
    D3D11_UAV_DIMENSION_TEXTURE3D      :: TEXTURE3D;
}

D3D11_USAGE :: enum s32 {
    DEFAULT   :: 0;
    IMMUTABLE :: 1;
    DYNAMIC   :: 2;
    STAGING   :: 3;

    D3D11_USAGE_DEFAULT   :: DEFAULT;
    D3D11_USAGE_IMMUTABLE :: IMMUTABLE;
    D3D11_USAGE_DYNAMIC   :: DYNAMIC;
    D3D11_USAGE_STAGING   :: STAGING;
}

D3D11_BIND_FLAG :: enum_flags u32 {
    VERTEX_BUFFER    :: 0x1;
    INDEX_BUFFER     :: 0x2;
    CONSTANT_BUFFER  :: 0x4;
    SHADER_RESOURCE  :: 0x8;
    STREAM_OUTPUT    :: 0x10;
    RENDER_TARGET    :: 0x20;
    DEPTH_STENCIL    :: 0x40;
    UNORDERED_ACCESS :: 0x80;
    DECODER          :: 0x200;
    VIDEO_ENCODER    :: 0x400;

    D3D11_BIND_VERTEX_BUFFER    :: VERTEX_BUFFER;
    D3D11_BIND_INDEX_BUFFER     :: INDEX_BUFFER;
    D3D11_BIND_CONSTANT_BUFFER  :: CONSTANT_BUFFER;
    D3D11_BIND_SHADER_RESOURCE  :: SHADER_RESOURCE;
    D3D11_BIND_STREAM_OUTPUT    :: STREAM_OUTPUT;
    D3D11_BIND_RENDER_TARGET    :: RENDER_TARGET;
    D3D11_BIND_DEPTH_STENCIL    :: DEPTH_STENCIL;
    D3D11_BIND_UNORDERED_ACCESS :: UNORDERED_ACCESS;
    D3D11_BIND_DECODER          :: DECODER;
    D3D11_BIND_VIDEO_ENCODER    :: VIDEO_ENCODER;
}

D3D11_CPU_ACCESS_FLAG :: enum_flags u32 {
    WRITE :: 0x10000;
    READ  :: 0x20000;

    D3D11_CPU_ACCESS_WRITE :: WRITE;
    D3D11_CPU_ACCESS_READ  :: READ;
}

D3D11_RESOURCE_MISC_FLAG :: enum_flags u32 {
    GENERATE_MIPS                   :: 0x1;
    SHARED                          :: 0x2;
    TEXTURECUBE                     :: 0x4;
    DRAWINDIRECT_ARGS               :: 0x10;
    BUFFER_ALLOW_RAW_VIEWS          :: 0x20;
    BUFFER_STRUCTURED               :: 0x40;
    RESOURCE_CLAMP                  :: 0x80;
    SHARED_KEYEDMUTEX               :: 0x100;
    GDI_COMPATIBLE                  :: 0x200;
    SHARED_NTHANDLE                 :: 0x800;
    RESTRICTED_CONTENT              :: 0x1000;
    RESTRICT_SHARED_RESOURCE        :: 0x2000;
    RESTRICT_SHARED_RESOURCE_DRIVER :: 0x4000;
    GUARDED                         :: 0x8000;
    TILE_POOL                       :: 0x20000;
    TILED                           :: 0x40000;
    HW_PROTECTED                    :: 0x80000;

    D3D11_RESOURCE_MISC_GENERATE_MIPS                   :: GENERATE_MIPS;
    D3D11_RESOURCE_MISC_SHARED                          :: SHARED;
    D3D11_RESOURCE_MISC_TEXTURECUBE                     :: TEXTURECUBE;
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS               :: DRAWINDIRECT_ARGS;
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS          :: BUFFER_ALLOW_RAW_VIEWS;
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED               :: BUFFER_STRUCTURED;
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP                  :: RESOURCE_CLAMP;
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX               :: SHARED_KEYEDMUTEX;
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE                  :: GDI_COMPATIBLE;
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE                 :: SHARED_NTHANDLE;
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT              :: RESTRICTED_CONTENT;
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE        :: RESTRICT_SHARED_RESOURCE;
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER :: RESTRICT_SHARED_RESOURCE_DRIVER;
    D3D11_RESOURCE_MISC_GUARDED                         :: GUARDED;
    D3D11_RESOURCE_MISC_TILE_POOL                       :: TILE_POOL;
    D3D11_RESOURCE_MISC_TILED                           :: TILED;
    D3D11_RESOURCE_MISC_HW_PROTECTED                    :: HW_PROTECTED;
}

D3D11_MAP :: enum s32 {
    READ               :: 1;
    WRITE              :: 2;
    READ_WRITE         :: 3;
    WRITE_DISCARD      :: 4;
    WRITE_NO_OVERWRITE :: 5;

    D3D11_MAP_READ               :: READ;
    D3D11_MAP_WRITE              :: WRITE;
    D3D11_MAP_READ_WRITE         :: READ_WRITE;
    D3D11_MAP_WRITE_DISCARD      :: WRITE_DISCARD;
    D3D11_MAP_WRITE_NO_OVERWRITE :: WRITE_NO_OVERWRITE;
}

D3D11_MAP_FLAG :: enum_flags u32 {
    DO_NOT_WAIT :: 0x100000;
    D3D11_MAP_FLAG_DO_NOT_WAIT :: DO_NOT_WAIT;
}

D3D11_RAISE_FLAG :: enum_flags u32 {
    DRIVER_INTERNAL_ERROR :: 0x1;
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR :: DRIVER_INTERNAL_ERROR;
}

D3D11_CLEAR_FLAG :: enum_flags u32 {
    DEPTH   :: 0x1;
    STENCIL :: 0x2;

    D3D11_CLEAR_DEPTH   :: DEPTH;
    D3D11_CLEAR_STENCIL :: STENCIL;
}

D3D11_RECT :: RECT;

CD3D11_RECT :: struct {
    #as using d3d11_rect: D3D11_RECT;
}

D3D11_BOX :: struct {
    left:   u32;
    top:    u32;
    front:  u32;
    right:  u32;
    bottom: u32;
    back:   u32;
}

CD3D11_BOX :: struct {
    #as using d3d11_box: D3D11_BOX;
}


ID3D11DeviceChild_UUID :: "1841e5c8-16b0-489b-bcc8-44cfb0d5deae";
ID3D11DeviceChild :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11devicechild_vtable: *ID3D11DeviceChild_VTable;
}
ID3D11DeviceChild_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetDevice: (this: *ID3D11DeviceChild, ppDevice: **ID3D11Device) -> void #cpp_method;
    GetPrivateData: (this: *ID3D11DeviceChild, guid: *GUID, pDataSize: *u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateData: (this: *ID3D11DeviceChild, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface: (this: *ID3D11DeviceChild, guid: *GUID, pData: *IUnknown) -> HRESULT #cpp_method;
}
ID3D11DeviceChild_GetDevice :: inline (this: *ID3D11DeviceChild, ppDevice: **ID3D11Device) { this.id3d11devicechild_vtable.GetDevice(this, ppDevice); }
ID3D11DeviceChild_GetPrivateData :: inline (this: *ID3D11DeviceChild, guid: *GUID, pDataSize: *u32, pData: *void) -> HRESULT { return this.id3d11devicechild_vtable.GetPrivateData(this, guid, pDataSize, pData); }
ID3D11DeviceChild_SetPrivateData :: inline (this: *ID3D11DeviceChild, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT { return this.id3d11devicechild_vtable.SetPrivateData(this, guid, DataSize, pData); }
ID3D11DeviceChild_SetPrivateDataInterface :: inline (this: *ID3D11DeviceChild, guid: *GUID, pData: *IUnknown) -> HRESULT { return this.id3d11devicechild_vtable.SetPrivateDataInterface(this, guid, pData); }

vtable :: (obj: *ID3D11DeviceChild) -> *ID3D11DeviceChild_VTable { return obj.id3d11devicechild_vtable; }


D3D11_COMPARISON_FUNC :: enum s32 {
    NEVER         :: 1;
    LESS          :: 2;
    EQUAL         :: 3;
    LESS_EQUAL    :: 4;
    GREATER       :: 5;
    NOT_EQUAL     :: 6;
    GREATER_EQUAL :: 7;
    ALWAYS        :: 8;

    D3D11_COMPARISON_NEVER         :: NEVER;
    D3D11_COMPARISON_LESS          :: LESS;
    D3D11_COMPARISON_EQUAL         :: EQUAL;
    D3D11_COMPARISON_LESS_EQUAL    :: LESS_EQUAL;
    D3D11_COMPARISON_GREATER       :: GREATER;
    D3D11_COMPARISON_NOT_EQUAL     :: NOT_EQUAL;
    D3D11_COMPARISON_GREATER_EQUAL :: GREATER_EQUAL;
    D3D11_COMPARISON_ALWAYS        :: ALWAYS;
}

D3D11_DEPTH_WRITE_MASK :: enum s32 {
    ZERO :: 0;
    ALL  :: 1;

    D3D11_DEPTH_WRITE_MASK_ZERO :: ZERO;
    D3D11_DEPTH_WRITE_MASK_ALL  :: ALL;
}

D3D11_STENCIL_OP :: enum s32 {
    KEEP     :: 1;
    ZERO     :: 2;
    REPLACE  :: 3;
    INCR_SAT :: 4;
    DECR_SAT :: 5;
    INVERT   :: 6;
    INCR     :: 7;
    DECR     :: 8;

    D3D11_STENCIL_OP_KEEP     :: KEEP;
    D3D11_STENCIL_OP_ZERO     :: ZERO;
    D3D11_STENCIL_OP_REPLACE  :: REPLACE;
    D3D11_STENCIL_OP_INCR_SAT :: INCR_SAT;
    D3D11_STENCIL_OP_DECR_SAT :: DECR_SAT;
    D3D11_STENCIL_OP_INVERT   :: INVERT;
    D3D11_STENCIL_OP_INCR     :: INCR;
    D3D11_STENCIL_OP_DECR     :: DECR;
}

D3D11_DEPTH_STENCILOP_DESC :: struct {
    StencilFailOp:      D3D11_STENCIL_OP;
    StencilDepthFailOp: D3D11_STENCIL_OP;
    StencilPassOp:      D3D11_STENCIL_OP;
    StencilFunc:        D3D11_COMPARISON_FUNC;
}

D3D11_DEPTH_STENCIL_DESC :: struct {
    DepthEnable:      BOOL;
    DepthWriteMask:   D3D11_DEPTH_WRITE_MASK;
    DepthFunc:        D3D11_COMPARISON_FUNC;
    StencilEnable:    BOOL;
    StencilReadMask:  u8;
    StencilWriteMask: u8;
    FrontFace:        D3D11_DEPTH_STENCILOP_DESC;
    BackFace:         D3D11_DEPTH_STENCILOP_DESC;
}

CD3D11_DEPTH_STENCIL_DESC :: struct {
    #as using d3d11_depth_stencil_desc: D3D11_DEPTH_STENCIL_DESC;
}


ID3D11DepthStencilState_UUID :: "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1";
ID3D11DepthStencilState :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11depthstencilstate_vtable: *ID3D11DepthStencilState_VTable;
}
ID3D11DepthStencilState_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDesc: (this: *ID3D11DepthStencilState, pDesc: *D3D11_DEPTH_STENCIL_DESC) -> void #cpp_method;
}
ID3D11DepthStencilState_GetDesc :: inline (this: *ID3D11DepthStencilState, pDesc: *D3D11_DEPTH_STENCIL_DESC) { this.id3d11depthstencilstate_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11DepthStencilState) -> *ID3D11DepthStencilState_VTable { return obj.id3d11depthstencilstate_vtable; }


D3D11_BLEND :: enum s32 {
    ZERO             :: 1;
    ONE              :: 2;
    SRC_COLOR        :: 3;
    INV_SRC_COLOR    :: 4;
    SRC_ALPHA        :: 5;
    INV_SRC_ALPHA    :: 6;
    DEST_ALPHA       :: 7;
    INV_DEST_ALPHA   :: 8;
    DEST_COLOR       :: 9;
    INV_DEST_COLOR   :: 10;
    SRC_ALPHA_SAT    :: 11;
    BLEND_FACTOR     :: 14;
    INV_BLEND_FACTOR :: 15;
    SRC1_COLOR       :: 16;
    INV_SRC1_COLOR   :: 17;
    SRC1_ALPHA       :: 18;
    INV_SRC1_ALPHA   :: 19;

    D3D11_BLEND_ZERO             :: ZERO;
    D3D11_BLEND_ONE              :: ONE;
    D3D11_BLEND_SRC_COLOR        :: SRC_COLOR;
    D3D11_BLEND_INV_SRC_COLOR    :: INV_SRC_COLOR;
    D3D11_BLEND_SRC_ALPHA        :: SRC_ALPHA;
    D3D11_BLEND_INV_SRC_ALPHA    :: INV_SRC_ALPHA;
    D3D11_BLEND_DEST_ALPHA       :: DEST_ALPHA;
    D3D11_BLEND_INV_DEST_ALPHA   :: INV_DEST_ALPHA;
    D3D11_BLEND_DEST_COLOR       :: DEST_COLOR;
    D3D11_BLEND_INV_DEST_COLOR   :: INV_DEST_COLOR;
    D3D11_BLEND_SRC_ALPHA_SAT    :: SRC_ALPHA_SAT;
    D3D11_BLEND_BLEND_FACTOR     :: BLEND_FACTOR;
    D3D11_BLEND_INV_BLEND_FACTOR :: INV_BLEND_FACTOR;
    D3D11_BLEND_SRC1_COLOR       :: SRC1_COLOR;
    D3D11_BLEND_INV_SRC1_COLOR   :: INV_SRC1_COLOR;
    D3D11_BLEND_SRC1_ALPHA       :: SRC1_ALPHA;
    D3D11_BLEND_INV_SRC1_ALPHA   :: INV_SRC1_ALPHA;
}

D3D11_BLEND_OP :: enum s32 {
    ADD          :: 1;
    SUBTRACT     :: 2;
    REV_SUBTRACT :: 3;
    MIN          :: 4;
    MAX          :: 5;

    D3D11_BLEND_OP_ADD          :: ADD;
    D3D11_BLEND_OP_SUBTRACT     :: SUBTRACT;
    D3D11_BLEND_OP_REV_SUBTRACT :: REV_SUBTRACT;
    D3D11_BLEND_OP_MIN          :: MIN;
    D3D11_BLEND_OP_MAX          :: MAX;
}

D3D11_COLOR_WRITE_ENABLE :: enum s32 {
    RED   :: 1;
    GREEN :: 2;
    BLUE  :: 4;
    ALPHA :: 8;
    ALL   :: 15;

    D3D11_COLOR_WRITE_ENABLE_RED   :: RED;
    D3D11_COLOR_WRITE_ENABLE_GREEN :: GREEN;
    D3D11_COLOR_WRITE_ENABLE_BLUE  :: BLUE;
    D3D11_COLOR_WRITE_ENABLE_ALPHA :: ALPHA;
    D3D11_COLOR_WRITE_ENABLE_ALL   :: ALL;
}

D3D11_RENDER_TARGET_BLEND_DESC :: struct {
    BlendEnable:           BOOL;
    SrcBlend:              D3D11_BLEND;
    DestBlend:             D3D11_BLEND;
    BlendOp:               D3D11_BLEND_OP;
    SrcBlendAlpha:         D3D11_BLEND;
    DestBlendAlpha:        D3D11_BLEND;
    BlendOpAlpha:          D3D11_BLEND_OP;
    RenderTargetWriteMask: u8;
}

D3D11_BLEND_DESC :: struct {
    AlphaToCoverageEnable:  BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget:           [8] D3D11_RENDER_TARGET_BLEND_DESC;
}

CD3D11_BLEND_DESC :: struct {
    #as using d3d11_blend_desc: D3D11_BLEND_DESC;
}


ID3D11BlendState_UUID :: "75b68faa-347d-4159-8f45-a0640f01cd9a";
ID3D11BlendState :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11blendstate_vtable: *ID3D11BlendState_VTable;
}
ID3D11BlendState_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDesc: (this: *ID3D11BlendState, pDesc: *D3D11_BLEND_DESC) -> void #cpp_method;
}
ID3D11BlendState_GetDesc :: inline (this: *ID3D11BlendState, pDesc: *D3D11_BLEND_DESC) { this.id3d11blendstate_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11BlendState) -> *ID3D11BlendState_VTable { return obj.id3d11blendstate_vtable; }


D3D11_RASTERIZER_DESC :: struct {
    FillMode:              D3D11_FILL_MODE;
    CullMode:              D3D11_CULL_MODE;
    FrontCounterClockwise: BOOL;
    DepthBias:             s32;
    DepthBiasClamp:        float;
    SlopeScaledDepthBias:  float;
    DepthClipEnable:       BOOL;
    ScissorEnable:         BOOL;
    MultisampleEnable:     BOOL;
    AntialiasedLineEnable: BOOL;
}

CD3D11_RASTERIZER_DESC :: struct {
    #as using d3d11_rasterizer_desc: D3D11_RASTERIZER_DESC;
}


ID3D11RasterizerState_UUID :: "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7";
ID3D11RasterizerState :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11rasterizerstate_vtable: *ID3D11RasterizerState_VTable;
}
ID3D11RasterizerState_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDesc: (this: *ID3D11RasterizerState, pDesc: *D3D11_RASTERIZER_DESC) -> void #cpp_method;
}
ID3D11RasterizerState_GetDesc :: inline (this: *ID3D11RasterizerState, pDesc: *D3D11_RASTERIZER_DESC) { this.id3d11rasterizerstate_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11RasterizerState) -> *ID3D11RasterizerState_VTable { return obj.id3d11rasterizerstate_vtable; }


D3D11_SUBRESOURCE_DATA :: struct {
    pSysMem:          *void;
    SysMemPitch:      u32;
    SysMemSlicePitch: u32;
}

D3D11_MAPPED_SUBRESOURCE :: struct {
    pData:      *void;
    RowPitch:   u32;
    DepthPitch: u32;
}


ID3D11Resource_UUID :: "dc8e63f3-d12b-4952-b47b-5e45026a862d";
ID3D11Resource :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11resource_vtable: *ID3D11Resource_VTable;
}
ID3D11Resource_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetType: (this: *ID3D11Resource, pResourceDimension: *D3D11_RESOURCE_DIMENSION) -> void #cpp_method;
    SetEvictionPriority: (this: *ID3D11Resource, EvictionPriority: u32) -> void #cpp_method;
    GetEvictionPriority: (this: *ID3D11Resource) -> u32 #cpp_method;
}
ID3D11Resource_GetType :: inline (this: *ID3D11Resource, pResourceDimension: *D3D11_RESOURCE_DIMENSION) { this.id3d11resource_vtable.GetType(this, pResourceDimension); }
ID3D11Resource_SetEvictionPriority :: inline (this: *ID3D11Resource, EvictionPriority: u32) { this.id3d11resource_vtable.SetEvictionPriority(this, EvictionPriority); }
ID3D11Resource_GetEvictionPriority :: inline (this: *ID3D11Resource) -> u32 { return this.id3d11resource_vtable.GetEvictionPriority(this); }

vtable :: (obj: *ID3D11Resource) -> *ID3D11Resource_VTable { return obj.id3d11resource_vtable; }


D3D11_BUFFER_DESC :: struct {
    ByteWidth:           u32;
    Usage:               D3D11_USAGE;
    BindFlags:           D3D11_BIND_FLAG;
    CPUAccessFlags:      D3D11_CPU_ACCESS_FLAG;
    MiscFlags:           D3D11_RESOURCE_MISC_FLAG;
    StructureByteStride: u32;
}

CD3D11_BUFFER_DESC :: struct {
    #as using d3d11_buffer_desc: D3D11_BUFFER_DESC;
}


ID3D11Buffer_UUID :: "48570b85-d1ee-4fcd-a250-eb350722b037";
ID3D11Buffer :: struct {
    #as using id3d11resource: ID3D11Resource;
    #place id3d11resource; id3d11buffer_vtable: *ID3D11Buffer_VTable;
}
ID3D11Buffer_VTable :: struct #type_info_none {
    using id3d11resource: ID3D11Resource_VTable;
    GetDesc: (this: *ID3D11Buffer, pDesc: *D3D11_BUFFER_DESC) -> void #cpp_method;
}
ID3D11Buffer_GetDesc :: inline (this: *ID3D11Buffer, pDesc: *D3D11_BUFFER_DESC) { this.id3d11buffer_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Buffer) -> *ID3D11Buffer_VTable { return obj.id3d11buffer_vtable; }


D3D11_TEXTURE1D_DESC :: struct {
    Width:          u32;
    MipLevels:      u32;
    ArraySize:      u32;
    Format:         DXGI_FORMAT;
    Usage:          D3D11_USAGE;
    BindFlags:      D3D11_BIND_FLAG;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
    MiscFlags:      D3D11_RESOURCE_MISC_FLAG;
}

CD3D11_TEXTURE1D_DESC :: struct {
    #as using d3d11_texture1d_desc: D3D11_TEXTURE1D_DESC;
}


ID3D11Texture1D_UUID :: "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c";
ID3D11Texture1D :: struct {
    #as using id3d11resource: ID3D11Resource;
    #place id3d11resource; id3d11texture1d_vtable: *ID3D11Texture1D_VTable;
}
ID3D11Texture1D_VTable :: struct #type_info_none {
    using id3d11resource: ID3D11Resource_VTable;
    GetDesc: (this: *ID3D11Texture1D, pDesc: *D3D11_TEXTURE1D_DESC) -> void #cpp_method;
}
ID3D11Texture1D_GetDesc :: inline (this: *ID3D11Texture1D, pDesc: *D3D11_TEXTURE1D_DESC) { this.id3d11texture1d_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Texture1D) -> *ID3D11Texture1D_VTable { return obj.id3d11texture1d_vtable; }


D3D11_TEXTURE2D_DESC :: struct {
    Width:          u32;
    Height:         u32;
    MipLevels:      u32;
    ArraySize:      u32;
    Format:         DXGI_FORMAT;
    SampleDesc:     DXGI_SAMPLE_DESC;
    Usage:          D3D11_USAGE;
    BindFlags:      D3D11_BIND_FLAG;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
    MiscFlags:      D3D11_RESOURCE_MISC_FLAG;
}

CD3D11_TEXTURE2D_DESC :: struct {
    #as using d3d11_texture2d_desc: D3D11_TEXTURE2D_DESC;
}


ID3D11Texture2D_UUID :: "6f15aaf2-d208-4e89-9ab4-489535d34f9c";
ID3D11Texture2D :: struct {
    #as using id3d11resource: ID3D11Resource;
    #place id3d11resource; id3d11texture2d_vtable: *ID3D11Texture2D_VTable;
}
ID3D11Texture2D_VTable :: struct #type_info_none {
    using id3d11resource: ID3D11Resource_VTable;
    GetDesc: (this: *ID3D11Texture2D, pDesc: *D3D11_TEXTURE2D_DESC) -> void #cpp_method;
}
ID3D11Texture2D_GetDesc :: inline (this: *ID3D11Texture2D, pDesc: *D3D11_TEXTURE2D_DESC) { this.id3d11texture2d_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Texture2D) -> *ID3D11Texture2D_VTable { return obj.id3d11texture2d_vtable; }


D3D11_TEXTURE3D_DESC :: struct {
    Width:          u32;
    Height:         u32;
    Depth:          u32;
    MipLevels:      u32;
    Format:         DXGI_FORMAT;
    Usage:          D3D11_USAGE;
    BindFlags:      D3D11_BIND_FLAG;
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
    MiscFlags:      D3D11_RESOURCE_MISC_FLAG;
}

CD3D11_TEXTURE3D_DESC :: struct {
    #as using d3d11_texture3d_desc: D3D11_TEXTURE3D_DESC;
}


ID3D11Texture3D_UUID :: "037e866e-f56d-4357-a8af-9dabbe6e250e";
ID3D11Texture3D :: struct {
    #as using id3d11resource: ID3D11Resource;
    #place id3d11resource; id3d11texture3d_vtable: *ID3D11Texture3D_VTable;
}
ID3D11Texture3D_VTable :: struct #type_info_none {
    using id3d11resource: ID3D11Resource_VTable;
    GetDesc: (this: *ID3D11Texture3D, pDesc: *D3D11_TEXTURE3D_DESC) -> void #cpp_method;
}
ID3D11Texture3D_GetDesc :: inline (this: *ID3D11Texture3D, pDesc: *D3D11_TEXTURE3D_DESC) { this.id3d11texture3d_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Texture3D) -> *ID3D11Texture3D_VTable { return obj.id3d11texture3d_vtable; }


D3D11_TEXTURECUBE_FACE :: enum s32 {
    POSITIVE_X :: 0;
    NEGATIVE_X :: 1;
    POSITIVE_Y :: 2;
    NEGATIVE_Y :: 3;
    POSITIVE_Z :: 4;
    NEGATIVE_Z :: 5;

    D3D11_TEXTURECUBE_FACE_POSITIVE_X :: POSITIVE_X;
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X :: NEGATIVE_X;
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y :: POSITIVE_Y;
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y :: NEGATIVE_Y;
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z :: POSITIVE_Z;
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z :: NEGATIVE_Z;
}


ID3D11View_UUID :: "839d1216-bb2e-412b-b7f4-a9dbebe08ed1";
ID3D11View :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11view_vtable: *ID3D11View_VTable;
}
ID3D11View_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetResource: (this: *ID3D11View, ppResource: **ID3D11Resource) -> void #cpp_method;
}
ID3D11View_GetResource :: inline (this: *ID3D11View, ppResource: **ID3D11Resource) { this.id3d11view_vtable.GetResource(this, ppResource); }

vtable :: (obj: *ID3D11View) -> *ID3D11View_VTable { return obj.id3d11view_vtable; }


D3D11_BUFFER_SRV :: struct {
    union {
        FirstElement:  u32;
        ElementOffset: u32;
    }

    union {
        NumElements:  u32;
        ElementWidth: u32;
    }
}

D3D11_BUFFEREX_SRV_FLAG :: enum_flags u32 {
    RAW :: 0x1;
    D3D11_BUFFEREX_SRV_FLAG_RAW :: RAW;
}

D3D11_BUFFEREX_SRV :: struct {
    FirstElement: u32;
    NumElements:  u32;
    Flags:        u32;
}

D3D11_TEX1D_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
}

D3D11_TEX1D_ARRAY_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2D_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
}

D3D11_TEX2D_ARRAY_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX3D_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
}

D3D11_TEXCUBE_SRV :: struct {
    MostDetailedMip: u32;
    MipLevels:       u32;
}

D3D11_TEXCUBE_ARRAY_SRV :: struct {
    MostDetailedMip:  u32;
    MipLevels:        u32;
    First2DArrayFace: u32;
    NumCubes:         u32;
}

D3D11_TEX2DMS_SRV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D11_TEX2DMS_ARRAY_SRV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_SHADER_RESOURCE_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D11_SRV_DIMENSION;
    union {
        Buffer:           D3D11_BUFFER_SRV;
        Texture1D:        D3D11_TEX1D_SRV;
        Texture1DArray:   D3D11_TEX1D_ARRAY_SRV;
        Texture2D:        D3D11_TEX2D_SRV;
        Texture2DArray:   D3D11_TEX2D_ARRAY_SRV;
        Texture2DMS:      D3D11_TEX2DMS_SRV;
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV;
        Texture3D:        D3D11_TEX3D_SRV;
        TextureCube:      D3D11_TEXCUBE_SRV;
        TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV;
        BufferEx:         D3D11_BUFFEREX_SRV;
    }
}

CD3D11_SHADER_RESOURCE_VIEW_DESC :: struct {
    #as using d3d11_shader_resource_view_desc: D3D11_SHADER_RESOURCE_VIEW_DESC;
}


ID3D11ShaderResourceView_UUID :: "b0e06fe0-8192-4e1a-b1ca-36d7414710b2";
ID3D11ShaderResourceView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11shaderresourceview_vtable: *ID3D11ShaderResourceView_VTable;
}
ID3D11ShaderResourceView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11ShaderResourceView, pDesc: *D3D11_SHADER_RESOURCE_VIEW_DESC) -> void #cpp_method;
}
ID3D11ShaderResourceView_GetDesc :: inline (this: *ID3D11ShaderResourceView, pDesc: *D3D11_SHADER_RESOURCE_VIEW_DESC) { this.id3d11shaderresourceview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11ShaderResourceView) -> *ID3D11ShaderResourceView_VTable { return obj.id3d11shaderresourceview_vtable; }


D3D11_BUFFER_RTV :: struct {
    union {
        FirstElement:  u32;
        ElementOffset: u32;
    }

    union {
        NumElements:  u32;
        ElementWidth: u32;
    }
}

D3D11_TEX1D_RTV :: struct {
    MipSlice: u32;
}

D3D11_TEX1D_ARRAY_RTV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2D_RTV :: struct {
    MipSlice: u32;
}

D3D11_TEX2DMS_RTV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D11_TEX2D_ARRAY_RTV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2DMS_ARRAY_RTV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX3D_RTV :: struct {
    MipSlice:    u32;
    FirstWSlice: u32;
    WSize:       u32;
}

D3D11_RENDER_TARGET_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D11_RTV_DIMENSION;
    union {
        Buffer:           D3D11_BUFFER_RTV;
        Texture1D:        D3D11_TEX1D_RTV;
        Texture1DArray:   D3D11_TEX1D_ARRAY_RTV;
        Texture2D:        D3D11_TEX2D_RTV;
        Texture2DArray:   D3D11_TEX2D_ARRAY_RTV;
        Texture2DMS:      D3D11_TEX2DMS_RTV;
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV;
        Texture3D:        D3D11_TEX3D_RTV;
    }
}

CD3D11_RENDER_TARGET_VIEW_DESC :: struct {
    #as using d3d11_render_target_view_desc: D3D11_RENDER_TARGET_VIEW_DESC;
}


ID3D11RenderTargetView_UUID :: "dfdba067-0b8d-4865-875b-d7b4516cc164";
ID3D11RenderTargetView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11rendertargetview_vtable: *ID3D11RenderTargetView_VTable;
}
ID3D11RenderTargetView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11RenderTargetView, pDesc: *D3D11_RENDER_TARGET_VIEW_DESC) -> void #cpp_method;
}
ID3D11RenderTargetView_GetDesc :: inline (this: *ID3D11RenderTargetView, pDesc: *D3D11_RENDER_TARGET_VIEW_DESC) { this.id3d11rendertargetview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11RenderTargetView) -> *ID3D11RenderTargetView_VTable { return obj.id3d11rendertargetview_vtable; }


CD3D11_VIEWPORT :: struct {
    #as using d3d11_viewport: D3D11_VIEWPORT;
}

D3D11_TEX1D_DSV :: struct {
    MipSlice: u32;
}

D3D11_TEX1D_ARRAY_DSV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2D_DSV :: struct {
    MipSlice: u32;
}

D3D11_TEX2D_ARRAY_DSV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2DMS_DSV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D11_TEX2DMS_ARRAY_DSV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_DSV_FLAG :: enum_flags u32 {
    DEPTH   :: 0x1;
    STENCIL :: 0x2;

    D3D11_DSV_READ_ONLY_DEPTH   :: DEPTH;
    D3D11_DSV_READ_ONLY_STENCIL :: STENCIL;
}

D3D11_DEPTH_STENCIL_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D11_DSV_DIMENSION;
    Flags:         u32;
    union {
        Texture1D:        D3D11_TEX1D_DSV;
        Texture1DArray:   D3D11_TEX1D_ARRAY_DSV;
        Texture2D:        D3D11_TEX2D_DSV;
        Texture2DArray:   D3D11_TEX2D_ARRAY_DSV;
        Texture2DMS:      D3D11_TEX2DMS_DSV;
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV;
    }
}

CD3D11_DEPTH_STENCIL_VIEW_DESC :: struct {
    #as using d3d11_depth_stencil_view_desc: D3D11_DEPTH_STENCIL_VIEW_DESC;
}


ID3D11DepthStencilView_UUID :: "9fdac92a-1876-48c3-afad-25b94f84a9b6";
ID3D11DepthStencilView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11depthstencilview_vtable: *ID3D11DepthStencilView_VTable;
}
ID3D11DepthStencilView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11DepthStencilView, pDesc: *D3D11_DEPTH_STENCIL_VIEW_DESC) -> void #cpp_method;
}
ID3D11DepthStencilView_GetDesc :: inline (this: *ID3D11DepthStencilView, pDesc: *D3D11_DEPTH_STENCIL_VIEW_DESC) { this.id3d11depthstencilview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11DepthStencilView) -> *ID3D11DepthStencilView_VTable { return obj.id3d11depthstencilview_vtable; }


D3D11_BUFFER_UAV_FLAG :: enum_flags u32 {
    RAW     :: 0x1;
    APPEND  :: 0x2;
    COUNTER :: 0x4;

    D3D11_BUFFER_UAV_FLAG_RAW     :: RAW;
    D3D11_BUFFER_UAV_FLAG_APPEND  :: APPEND;
    D3D11_BUFFER_UAV_FLAG_COUNTER :: COUNTER;
}

D3D11_BUFFER_UAV :: struct {
    FirstElement: u32;
    NumElements:  u32;
    Flags:        u32;
}

D3D11_TEX1D_UAV :: struct {
    MipSlice: u32;
}

D3D11_TEX1D_ARRAY_UAV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX2D_UAV :: struct {
    MipSlice: u32;
}

D3D11_TEX2D_ARRAY_UAV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_TEX3D_UAV :: struct {
    MipSlice:    u32;
    FirstWSlice: u32;
    WSize:       u32;
}

D3D11_UNORDERED_ACCESS_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D11_UAV_DIMENSION;
    union {
        Buffer:         D3D11_BUFFER_UAV;
        Texture1D:      D3D11_TEX1D_UAV;
        Texture1DArray: D3D11_TEX1D_ARRAY_UAV;
        Texture2D:      D3D11_TEX2D_UAV;
        Texture2DArray: D3D11_TEX2D_ARRAY_UAV;
        Texture3D:      D3D11_TEX3D_UAV;
    }
}

CD3D11_UNORDERED_ACCESS_VIEW_DESC :: struct {
    #as using d3d11_unordered_access_view_desc: D3D11_UNORDERED_ACCESS_VIEW_DESC;
}


ID3D11UnorderedAccessView_UUID :: "28acf509-7f5c-48f6-8611-f316010a6380";
ID3D11UnorderedAccessView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11unorderedaccessview_vtable: *ID3D11UnorderedAccessView_VTable;
}
ID3D11UnorderedAccessView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11UnorderedAccessView, pDesc: *D3D11_UNORDERED_ACCESS_VIEW_DESC) -> void #cpp_method;
}
ID3D11UnorderedAccessView_GetDesc :: inline (this: *ID3D11UnorderedAccessView, pDesc: *D3D11_UNORDERED_ACCESS_VIEW_DESC) { this.id3d11unorderedaccessview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11UnorderedAccessView) -> *ID3D11UnorderedAccessView_VTable { return obj.id3d11unorderedaccessview_vtable; }



ID3D11VertexShader_UUID :: "3b301d64-d678-4289-8897-22f8928b72f3";
ID3D11VertexShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11HullShader_UUID :: "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd";
ID3D11HullShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11DomainShader_UUID :: "f582c508-0f36-490c-9977-31eece268cfa";
ID3D11DomainShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11GeometryShader_UUID :: "38325b96-effb-4022-ba02-2e795b70275c";
ID3D11GeometryShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11PixelShader_UUID :: "ea82e40d-51dc-4f33-93d4-db7c9125ae8c";
ID3D11PixelShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11ComputeShader_UUID :: "4f5b196e-c2bd-495e-bd01-1fded38e4969";
ID3D11ComputeShader :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11InputLayout_UUID :: "e4819ddc-4cf0-4025-bd26-5de82a3e07b7";
ID3D11InputLayout :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}

D3D11_FILTER :: enum s32 {
    MIN_MAG_MIP_POINT                          :: 0;
    MIN_MAG_POINT_MIP_LINEAR                   :: 1;
    MIN_POINT_MAG_LINEAR_MIP_POINT             :: 4;
    MIN_POINT_MAG_MIP_LINEAR                   :: 5;
    MIN_LINEAR_MAG_MIP_POINT                   :: 16;
    MIN_LINEAR_MAG_POINT_MIP_LINEAR            :: 17;
    MIN_MAG_LINEAR_MIP_POINT                   :: 20;
    MIN_MAG_MIP_LINEAR                         :: 21;
    ANISOTROPIC                                :: 85;
    COMPARISON_MIN_MAG_MIP_POINT               :: 128;
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR        :: 129;
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  :: 132;
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR        :: 133;
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT        :: 144;
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT        :: 148;
    COMPARISON_MIN_MAG_MIP_LINEAR              :: 149;
    COMPARISON_ANISOTROPIC                     :: 213;
    MINIMUM_MIN_MAG_MIP_POINT                  :: 256;
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR           :: 257;
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: 260;
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR           :: 261;
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT           :: 272;
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: 273;
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT           :: 276;
    MINIMUM_MIN_MAG_MIP_LINEAR                 :: 277;
    MINIMUM_ANISOTROPIC                        :: 341;
    MAXIMUM_MIN_MAG_MIP_POINT                  :: 384;
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           :: 385;
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: 388;
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           :: 389;
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           :: 400;
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: 401;
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           :: 404;
    MAXIMUM_MIN_MAG_MIP_LINEAR                 :: 405;
    MAXIMUM_ANISOTROPIC                        :: 469;

    D3D11_FILTER_MIN_MAG_MIP_POINT                          :: MIN_MAG_MIP_POINT;
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR                   :: MIN_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT             :: MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR                   :: MIN_POINT_MAG_MIP_LINEAR;
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT                   :: MIN_LINEAR_MAG_MIP_POINT;
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR            :: MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT                   :: MIN_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MIN_MAG_MIP_LINEAR                         :: MIN_MAG_MIP_LINEAR;
    D3D11_FILTER_ANISOTROPIC                                :: ANISOTROPIC;
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT               :: COMPARISON_MIN_MAG_MIP_POINT;
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR        :: COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  :: COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR        :: COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT        :: COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT        :: COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR              :: COMPARISON_MIN_MAG_MIP_LINEAR;
    D3D11_FILTER_COMPARISON_ANISOTROPIC                     :: COMPARISON_ANISOTROPIC;
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT                  :: MINIMUM_MIN_MAG_MIP_POINT;
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR           :: MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR           :: MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT           :: MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT           :: MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                 :: MINIMUM_MIN_MAG_MIP_LINEAR;
    D3D11_FILTER_MINIMUM_ANISOTROPIC                        :: MINIMUM_ANISOTROPIC;
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                  :: MAXIMUM_MIN_MAG_MIP_POINT;
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           :: MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           :: MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           :: MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           :: MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                 :: MAXIMUM_MIN_MAG_MIP_LINEAR;
    D3D11_FILTER_MAXIMUM_ANISOTROPIC                        :: MAXIMUM_ANISOTROPIC;
}

D3D11_FILTER_TYPE :: enum s32 {
    POINT  :: 0;
    LINEAR :: 1;

    D3D11_FILTER_TYPE_POINT  :: POINT;
    D3D11_FILTER_TYPE_LINEAR :: LINEAR;
}

D3D11_FILTER_REDUCTION_TYPE :: enum s32 {
    STANDARD   :: 0;
    COMPARISON :: 1;
    MINIMUM    :: 2;
    MAXIMUM    :: 3;

    D3D11_FILTER_REDUCTION_TYPE_STANDARD   :: STANDARD;
    D3D11_FILTER_REDUCTION_TYPE_COMPARISON :: COMPARISON;
    D3D11_FILTER_REDUCTION_TYPE_MINIMUM    :: MINIMUM;
    D3D11_FILTER_REDUCTION_TYPE_MAXIMUM    :: MAXIMUM;
}

D3D11_TEXTURE_ADDRESS_MODE :: enum s32 {
    WRAP        :: 1;
    MIRROR      :: 2;
    CLAMP       :: 3;
    BORDER      :: 4;
    MIRROR_ONCE :: 5;

    D3D11_TEXTURE_ADDRESS_WRAP        :: WRAP;
    D3D11_TEXTURE_ADDRESS_MIRROR      :: MIRROR;
    D3D11_TEXTURE_ADDRESS_CLAMP       :: CLAMP;
    D3D11_TEXTURE_ADDRESS_BORDER      :: BORDER;
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE :: MIRROR_ONCE;
}

D3D11_SAMPLER_DESC :: struct {
    Filter:         D3D11_FILTER;
    AddressU:       D3D11_TEXTURE_ADDRESS_MODE;
    AddressV:       D3D11_TEXTURE_ADDRESS_MODE;
    AddressW:       D3D11_TEXTURE_ADDRESS_MODE;
    MipLODBias:     float;
    MaxAnisotropy:  u32;
    ComparisonFunc: D3D11_COMPARISON_FUNC;
    BorderColor:    [4] float;
    MinLOD:         float;
    MaxLOD:         float;
}

CD3D11_SAMPLER_DESC :: struct {
    #as using d3d11_sampler_desc: D3D11_SAMPLER_DESC;
}


ID3D11SamplerState_UUID :: "da6fea51-564c-4487-9810-f0d0f9b4e3a5";
ID3D11SamplerState :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11samplerstate_vtable: *ID3D11SamplerState_VTable;
}
ID3D11SamplerState_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDesc: (this: *ID3D11SamplerState, pDesc: *D3D11_SAMPLER_DESC) -> void #cpp_method;
}
ID3D11SamplerState_GetDesc :: inline (this: *ID3D11SamplerState, pDesc: *D3D11_SAMPLER_DESC) { this.id3d11samplerstate_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11SamplerState) -> *ID3D11SamplerState_VTable { return obj.id3d11samplerstate_vtable; }


D3D11_FORMAT_SUPPORT :: enum s32 {
    BUFFER                      :: 1;
    IA_VERTEX_BUFFER            :: 2;
    IA_INDEX_BUFFER             :: 4;
    SO_BUFFER                   :: 8;
    TEXTURE1D                   :: 16;
    TEXTURE2D                   :: 32;
    TEXTURE3D                   :: 64;
    TEXTURECUBE                 :: 128;
    SHADER_LOAD                 :: 256;
    SHADER_SAMPLE               :: 512;
    SHADER_SAMPLE_COMPARISON    :: 1024;
    SHADER_SAMPLE_MONO_TEXT     :: 2048;
    MIP                         :: 4096;
    MIP_AUTOGEN                 :: 8192;
    RENDER_TARGET               :: 16384;
    BLENDABLE                   :: 32768;
    DEPTH_STENCIL               :: 65536;
    CPU_LOCKABLE                :: 131072;
    MULTISAMPLE_RESOLVE         :: 262144;
    DISPLAY                     :: 524288;
    CAST_WITHIN_BIT_LAYOUT      :: 1048576;
    MULTISAMPLE_RENDERTARGET    :: 2097152;
    MULTISAMPLE_LOAD            :: 4194304;
    SHADER_GATHER               :: 8388608;
    BACK_BUFFER_CAST            :: 16777216;
    TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
    SHADER_GATHER_COMPARISON    :: 67108864;
    DECODER_OUTPUT              :: 134217728;
    VIDEO_PROCESSOR_OUTPUT      :: 268435456;
    VIDEO_PROCESSOR_INPUT       :: 536870912;
    VIDEO_ENCODER               :: 1073741824;

    D3D11_FORMAT_SUPPORT_BUFFER                      :: BUFFER;
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER            :: IA_VERTEX_BUFFER;
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER             :: IA_INDEX_BUFFER;
    D3D11_FORMAT_SUPPORT_SO_BUFFER                   :: SO_BUFFER;
    D3D11_FORMAT_SUPPORT_TEXTURE1D                   :: TEXTURE1D;
    D3D11_FORMAT_SUPPORT_TEXTURE2D                   :: TEXTURE2D;
    D3D11_FORMAT_SUPPORT_TEXTURE3D                   :: TEXTURE3D;
    D3D11_FORMAT_SUPPORT_TEXTURECUBE                 :: TEXTURECUBE;
    D3D11_FORMAT_SUPPORT_SHADER_LOAD                 :: SHADER_LOAD;
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE               :: SHADER_SAMPLE;
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON    :: SHADER_SAMPLE_COMPARISON;
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT     :: SHADER_SAMPLE_MONO_TEXT;
    D3D11_FORMAT_SUPPORT_MIP                         :: MIP;
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN                 :: MIP_AUTOGEN;
    D3D11_FORMAT_SUPPORT_RENDER_TARGET               :: RENDER_TARGET;
    D3D11_FORMAT_SUPPORT_BLENDABLE                   :: BLENDABLE;
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL               :: DEPTH_STENCIL;
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE                :: CPU_LOCKABLE;
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE         :: MULTISAMPLE_RESOLVE;
    D3D11_FORMAT_SUPPORT_DISPLAY                     :: DISPLAY;
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT      :: CAST_WITHIN_BIT_LAYOUT;
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET    :: MULTISAMPLE_RENDERTARGET;
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD            :: MULTISAMPLE_LOAD;
    D3D11_FORMAT_SUPPORT_SHADER_GATHER               :: SHADER_GATHER;
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST            :: BACK_BUFFER_CAST;
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW :: TYPED_UNORDERED_ACCESS_VIEW;
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON    :: SHADER_GATHER_COMPARISON;
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT              :: DECODER_OUTPUT;
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT      :: VIDEO_PROCESSOR_OUTPUT;
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT       :: VIDEO_PROCESSOR_INPUT;
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER               :: VIDEO_ENCODER;
}

D3D11_FORMAT_SUPPORT2 :: enum s32 {
    UAV_ATOMIC_ADD                               :: 1;
    UAV_ATOMIC_BITWISE_OPS                       :: 2;
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
    UAV_ATOMIC_EXCHANGE                          :: 8;
    UAV_ATOMIC_SIGNED_MIN_OR_MAX                 :: 16;
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               :: 32;
    UAV_TYPED_LOAD                               :: 64;
    UAV_TYPED_STORE                              :: 128;
    OUTPUT_MERGER_LOGIC_OP                       :: 256;
    TILED                                        :: 512;
    SHAREABLE                                    :: 1024;
    MULTIPLANE_OVERLAY                           :: 16384;

    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                               :: UAV_ATOMIC_ADD;
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                       :: UAV_ATOMIC_BITWISE_OPS;
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE;
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                          :: UAV_ATOMIC_EXCHANGE;
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                 :: UAV_ATOMIC_SIGNED_MIN_OR_MAX;
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               :: UAV_ATOMIC_UNSIGNED_MIN_OR_MAX;
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD                               :: UAV_TYPED_LOAD;
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE                              :: UAV_TYPED_STORE;
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                       :: OUTPUT_MERGER_LOGIC_OP;
    D3D11_FORMAT_SUPPORT2_TILED                                        :: TILED;
    D3D11_FORMAT_SUPPORT2_SHAREABLE                                    :: SHAREABLE;
    D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                           :: MULTIPLANE_OVERLAY;
}


ID3D11Asynchronous_UUID :: "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b";
ID3D11Asynchronous :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11asynchronous_vtable: *ID3D11Asynchronous_VTable;
}
ID3D11Asynchronous_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDataSize: (this: *ID3D11Asynchronous) -> u32 #cpp_method;
}
ID3D11Asynchronous_GetDataSize :: inline (this: *ID3D11Asynchronous) -> u32 { return this.id3d11asynchronous_vtable.GetDataSize(this); }

vtable :: (obj: *ID3D11Asynchronous) -> *ID3D11Asynchronous_VTable { return obj.id3d11asynchronous_vtable; }


D3D11_ASYNC_GETDATA_FLAG :: enum_flags u32 {
    D3D11_ASYNC_GETDATA_DONOTFLUSH :: 0x1;
}

D3D11_QUERY :: enum s32 {
    EVENT                         :: 0;
    OCCLUSION                     :: 1;
    TIMESTAMP                     :: 2;
    TIMESTAMP_DISJOINT            :: 3;
    PIPELINE_STATISTICS           :: 4;
    OCCLUSION_PREDICATE           :: 5;
    SO_STATISTICS                 :: 6;
    SO_OVERFLOW_PREDICATE         :: 7;
    SO_STATISTICS_STREAM0         :: 8;
    SO_OVERFLOW_PREDICATE_STREAM0 :: 9;
    SO_STATISTICS_STREAM1         :: 10;
    SO_OVERFLOW_PREDICATE_STREAM1 :: 11;
    SO_STATISTICS_STREAM2         :: 12;
    SO_OVERFLOW_PREDICATE_STREAM2 :: 13;
    SO_STATISTICS_STREAM3         :: 14;
    SO_OVERFLOW_PREDICATE_STREAM3 :: 15;

    D3D11_QUERY_EVENT                         :: EVENT;
    D3D11_QUERY_OCCLUSION                     :: OCCLUSION;
    D3D11_QUERY_TIMESTAMP                     :: TIMESTAMP;
    D3D11_QUERY_TIMESTAMP_DISJOINT            :: TIMESTAMP_DISJOINT;
    D3D11_QUERY_PIPELINE_STATISTICS           :: PIPELINE_STATISTICS;
    D3D11_QUERY_OCCLUSION_PREDICATE           :: OCCLUSION_PREDICATE;
    D3D11_QUERY_SO_STATISTICS                 :: SO_STATISTICS;
    D3D11_QUERY_SO_OVERFLOW_PREDICATE         :: SO_OVERFLOW_PREDICATE;
    D3D11_QUERY_SO_STATISTICS_STREAM0         :: SO_STATISTICS_STREAM0;
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 :: SO_OVERFLOW_PREDICATE_STREAM0;
    D3D11_QUERY_SO_STATISTICS_STREAM1         :: SO_STATISTICS_STREAM1;
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 :: SO_OVERFLOW_PREDICATE_STREAM1;
    D3D11_QUERY_SO_STATISTICS_STREAM2         :: SO_STATISTICS_STREAM2;
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 :: SO_OVERFLOW_PREDICATE_STREAM2;
    D3D11_QUERY_SO_STATISTICS_STREAM3         :: SO_STATISTICS_STREAM3;
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 :: SO_OVERFLOW_PREDICATE_STREAM3;
}

D3D11_QUERY_MISC_FLAG :: enum_flags u32 {
    D3D11_QUERY_MISC_PREDICATEHINT :: 0x1;
}

D3D11_QUERY_DESC :: struct {
    Query:     D3D11_QUERY;
    MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

CD3D11_QUERY_DESC :: struct {
    #as using d3d11_query_desc: D3D11_QUERY_DESC;
}


ID3D11Query_UUID :: "d6c00747-87b7-425e-b84d-44d108560afd";
ID3D11Query :: struct {
    #as using id3d11asynchronous: ID3D11Asynchronous;
    #place id3d11asynchronous; id3d11query_vtable: *ID3D11Query_VTable;
}
ID3D11Query_VTable :: struct #type_info_none {
    using id3d11asynchronous: ID3D11Asynchronous_VTable;
    GetDesc: (this: *ID3D11Query, pDesc: *D3D11_QUERY_DESC) -> void #cpp_method;
}
ID3D11Query_GetDesc :: inline (this: *ID3D11Query, pDesc: *D3D11_QUERY_DESC) { this.id3d11query_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Query) -> *ID3D11Query_VTable { return obj.id3d11query_vtable; }



ID3D11Predicate_UUID :: "9eb576dd-9f77-4d86-81aa-8bab5fe490e2";
ID3D11Predicate :: struct {
    #as using id3d11query: ID3D11Query;
}

D3D11_QUERY_DATA_TIMESTAMP_DISJOINT :: struct {
    Frequency: u64;
    Disjoint:  BOOL;
}

D3D11_QUERY_DATA_PIPELINE_STATISTICS :: struct {
    IAVertices:    u64;
    IAPrimitives:  u64;
    VSInvocations: u64;
    GSInvocations: u64;
    GSPrimitives:  u64;
    CInvocations:  u64;
    CPrimitives:   u64;
    PSInvocations: u64;
    HSInvocations: u64;
    DSInvocations: u64;
    CSInvocations: u64;
}

D3D11_QUERY_DATA_SO_STATISTICS :: struct {
    NumPrimitivesWritten:    u64;
    PrimitivesStorageNeeded: u64;
}

D3D11_COUNTER :: enum s32 {
    DEVICE_DEPENDENT_0 :: 1073741824;
    D3D11_COUNTER_DEVICE_DEPENDENT_0 :: DEVICE_DEPENDENT_0;
}

D3D11_COUNTER_TYPE :: enum s32 {
    FLOAT32 :: 0;
    UINT16  :: 1;
    UINT32  :: 2;
    UINT64  :: 3;

    D3D11_COUNTER_TYPE_FLOAT32 :: FLOAT32;
    D3D11_COUNTER_TYPE_UINT16  :: UINT16;
    D3D11_COUNTER_TYPE_UINT32  :: UINT32;
    D3D11_COUNTER_TYPE_UINT64  :: UINT64;
}

D3D11_COUNTER_DESC :: struct {
    Counter:   D3D11_COUNTER;
    MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

CD3D11_COUNTER_DESC :: struct {
    #as using d3d11_counter_desc: D3D11_COUNTER_DESC;
}

D3D11_COUNTER_INFO :: struct {
    LastDeviceDependentCounter: D3D11_COUNTER;
    NumSimultaneousCounters:    u32;
    NumDetectableParallelUnits: u8;
}


ID3D11Counter_UUID :: "6e8c49fb-a371-4770-b440-29086022b741";
ID3D11Counter :: struct {
    #as using id3d11asynchronous: ID3D11Asynchronous;
    #place id3d11asynchronous; id3d11counter_vtable: *ID3D11Counter_VTable;
}
ID3D11Counter_VTable :: struct #type_info_none {
    using id3d11asynchronous: ID3D11Asynchronous_VTable;
    GetDesc: (this: *ID3D11Counter, pDesc: *D3D11_COUNTER_DESC) -> void #cpp_method;
}
ID3D11Counter_GetDesc :: inline (this: *ID3D11Counter, pDesc: *D3D11_COUNTER_DESC) { this.id3d11counter_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11Counter) -> *ID3D11Counter_VTable { return obj.id3d11counter_vtable; }


D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS :: enum s32 {
    STANDARD_MULTISAMPLE_PATTERN :: -1;
    CENTER_MULTISAMPLE_PATTERN   :: -2;

    D3D11_STANDARD_MULTISAMPLE_PATTERN :: STANDARD_MULTISAMPLE_PATTERN;
    D3D11_CENTER_MULTISAMPLE_PATTERN   :: CENTER_MULTISAMPLE_PATTERN;
}

D3D11_DEVICE_CONTEXT_TYPE :: enum s32 {
    IMMEDIATE :: 0;
    DEFERRED  :: 1;

    D3D11_DEVICE_CONTEXT_IMMEDIATE :: IMMEDIATE;
    D3D11_DEVICE_CONTEXT_DEFERRED  :: DEFERRED;
}

D3D11_CLASS_INSTANCE_DESC :: struct {
    InstanceId:               u32;
    InstanceIndex:            u32;
    TypeId:                   u32;
    ConstantBuffer:           u32;
    BaseConstantBufferOffset: u32;
    BaseTexture:              u32;
    BaseSampler:              u32;
    Created:                  BOOL;
}


ID3D11ClassInstance_UUID :: "a6cd7faa-b0b7-4a2f-9436-8662a65797cb";
ID3D11ClassInstance :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11classinstance_vtable: *ID3D11ClassInstance_VTable;
}
ID3D11ClassInstance_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetClassLinkage: (this: *ID3D11ClassInstance, ppLinkage: **ID3D11ClassLinkage) -> void #cpp_method;
    GetDesc: (this: *ID3D11ClassInstance, pDesc: *D3D11_CLASS_INSTANCE_DESC) -> void #cpp_method;
    GetInstanceName: (this: *ID3D11ClassInstance, pInstanceName: *u8, pBufferLength: *SIZE_T) -> void #cpp_method;
    GetTypeName: (this: *ID3D11ClassInstance, pTypeName: *u8, pBufferLength: *SIZE_T) -> void #cpp_method;
}
ID3D11ClassInstance_GetClassLinkage :: inline (this: *ID3D11ClassInstance, ppLinkage: **ID3D11ClassLinkage) { this.id3d11classinstance_vtable.GetClassLinkage(this, ppLinkage); }
ID3D11ClassInstance_GetDesc :: inline (this: *ID3D11ClassInstance, pDesc: *D3D11_CLASS_INSTANCE_DESC) { this.id3d11classinstance_vtable.GetDesc(this, pDesc); }
ID3D11ClassInstance_GetInstanceName :: inline (this: *ID3D11ClassInstance, pInstanceName: *u8, pBufferLength: *SIZE_T) { this.id3d11classinstance_vtable.GetInstanceName(this, pInstanceName, pBufferLength); }
ID3D11ClassInstance_GetTypeName :: inline (this: *ID3D11ClassInstance, pTypeName: *u8, pBufferLength: *SIZE_T) { this.id3d11classinstance_vtable.GetTypeName(this, pTypeName, pBufferLength); }

vtable :: (obj: *ID3D11ClassInstance) -> *ID3D11ClassInstance_VTable { return obj.id3d11classinstance_vtable; }



ID3D11ClassLinkage_UUID :: "ddf57cba-9543-46e4-a12b-f207a0fe7fed";
ID3D11ClassLinkage :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11classlinkage_vtable: *ID3D11ClassLinkage_VTable;
}
ID3D11ClassLinkage_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetClassInstance: (this: *ID3D11ClassLinkage, pClassInstanceName: *u8, InstanceIndex: u32, ppInstance: **ID3D11ClassInstance) -> HRESULT #cpp_method;
    CreateClassInstance: (this: *ID3D11ClassLinkage, pClassTypeName: *u8, ConstantBufferOffset: u32, ConstantVectorOffset: u32, TextureOffset: u32, SamplerOffset: u32, ppInstance: **ID3D11ClassInstance) -> HRESULT #cpp_method;
}
ID3D11ClassLinkage_GetClassInstance :: inline (this: *ID3D11ClassLinkage, pClassInstanceName: *u8, InstanceIndex: u32, ppInstance: **ID3D11ClassInstance) -> HRESULT { return this.id3d11classlinkage_vtable.GetClassInstance(this, pClassInstanceName, InstanceIndex, ppInstance); }
ID3D11ClassLinkage_CreateClassInstance :: inline (this: *ID3D11ClassLinkage, pClassTypeName: *u8, ConstantBufferOffset: u32, ConstantVectorOffset: u32, TextureOffset: u32, SamplerOffset: u32, ppInstance: **ID3D11ClassInstance) -> HRESULT { return this.id3d11classlinkage_vtable.CreateClassInstance(this, pClassTypeName, ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset, ppInstance); }

vtable :: (obj: *ID3D11ClassLinkage) -> *ID3D11ClassLinkage_VTable { return obj.id3d11classlinkage_vtable; }



ID3D11CommandList_UUID :: "a24bc4d1-769e-43f7-8013-98ff566c18e2";
ID3D11CommandList :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11commandlist_vtable: *ID3D11CommandList_VTable;
}
ID3D11CommandList_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetContextFlags: (this: *ID3D11CommandList) -> u32 #cpp_method;
}
ID3D11CommandList_GetContextFlags :: inline (this: *ID3D11CommandList) -> u32 { return this.id3d11commandlist_vtable.GetContextFlags(this); }

vtable :: (obj: *ID3D11CommandList) -> *ID3D11CommandList_VTable { return obj.id3d11commandlist_vtable; }


D3D11_FEATURE :: enum s32 {
    THREADING                      :: 0;
    DOUBLES                        :: 1;
    FORMAT_SUPPORT                 :: 2;
    FORMAT_SUPPORT2                :: 3;
    D3D10_X_HARDWARE_OPTIONS       :: 4;
    D3D11_OPTIONS                  :: 5;
    ARCHITECTURE_INFO              :: 6;
    D3D9_OPTIONS                   :: 7;
    SHADER_MIN_PRECISION_SUPPORT   :: 8;
    D3D9_SHADOW_SUPPORT            :: 9;
    D3D11_OPTIONS1                 :: 10;
    D3D9_SIMPLE_INSTANCING_SUPPORT :: 11;
    MARKER_SUPPORT                 :: 12;
    D3D9_OPTIONS1                  :: 13;
    D3D11_OPTIONS2                 :: 14;
    D3D11_OPTIONS3                 :: 15;
    GPU_VIRTUAL_ADDRESS_SUPPORT    :: 16;
    D3D11_OPTIONS4                 :: 17;
    SHADER_CACHE                   :: 18;
    D3D11_OPTIONS5                 :: 19;

    D3D11_FEATURE_THREADING                      :: THREADING;
    D3D11_FEATURE_DOUBLES                        :: DOUBLES;
    D3D11_FEATURE_FORMAT_SUPPORT                 :: FORMAT_SUPPORT;
    D3D11_FEATURE_FORMAT_SUPPORT2                :: FORMAT_SUPPORT2;
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS       :: D3D10_X_HARDWARE_OPTIONS;
    D3D11_FEATURE_D3D11_OPTIONS                  :: D3D11_OPTIONS;
    D3D11_FEATURE_ARCHITECTURE_INFO              :: ARCHITECTURE_INFO;
    D3D11_FEATURE_D3D9_OPTIONS                   :: D3D9_OPTIONS;
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT   :: SHADER_MIN_PRECISION_SUPPORT;
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT            :: D3D9_SHADOW_SUPPORT;
    D3D11_FEATURE_D3D11_OPTIONS1                 :: D3D11_OPTIONS1;
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT :: D3D9_SIMPLE_INSTANCING_SUPPORT;
    D3D11_FEATURE_MARKER_SUPPORT                 :: MARKER_SUPPORT;
    D3D11_FEATURE_D3D9_OPTIONS1                  :: D3D9_OPTIONS1;
    D3D11_FEATURE_D3D11_OPTIONS2                 :: D3D11_OPTIONS2;
    D3D11_FEATURE_D3D11_OPTIONS3                 :: D3D11_OPTIONS3;
    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT    :: GPU_VIRTUAL_ADDRESS_SUPPORT;
    D3D11_FEATURE_D3D11_OPTIONS4                 :: D3D11_OPTIONS4;
    D3D11_FEATURE_SHADER_CACHE                   :: SHADER_CACHE;
    D3D11_FEATURE_D3D11_OPTIONS5                 :: D3D11_OPTIONS5;
}

D3D11_FEATURE_DATA_THREADING :: struct {
    DriverConcurrentCreates: BOOL;
    DriverCommandLists:      BOOL;
}

D3D11_FEATURE_DATA_DOUBLES :: struct {
    DoublePrecisionFloatShaderOps: BOOL;
}

D3D11_FEATURE_DATA_FORMAT_SUPPORT :: struct {
    InFormat:         DXGI_FORMAT;
    OutFormatSupport: u32;
}

D3D11_FEATURE_DATA_FORMAT_SUPPORT2 :: struct {
    InFormat:          DXGI_FORMAT;
    OutFormatSupport2: u32;
}

D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS :: struct {
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS :: struct {
    OutputMergerLogicOp:                    BOOL;
    UAVOnlyRenderingForcedSampleCount:      BOOL;
    DiscardAPIsSeenByDriver:                BOOL;
    FlagsForUpdateAndCopySeenByDriver:      BOOL;
    ClearView:                              BOOL;
    CopyWithOverlap:                        BOOL;
    ConstantBufferPartialUpdate:            BOOL;
    ConstantBufferOffsetting:               BOOL;
    MapNoOverwriteOnDynamicConstantBuffer:  BOOL;
    MapNoOverwriteOnDynamicBufferSRV:       BOOL;
    MultisampleRTVWithForcedSampleCountOne: BOOL;
    SAD4ShaderInstructions:                 BOOL;
    ExtendedDoublesShaderInstructions:      BOOL;
    ExtendedResourceSharing:                BOOL;
}

D3D11_FEATURE_DATA_ARCHITECTURE_INFO :: struct {
    TileBasedDeferredRenderer: BOOL;
}

D3D11_FEATURE_DATA_D3D9_OPTIONS :: struct {
    FullNonPow2TextureSupport: BOOL;
}

D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT :: struct {
    SupportsDepthAsTextureWithLessEqualComparisonFilter: BOOL;
}

D3D11_SHADER_MIN_PRECISION_SUPPORT :: enum s32 {
    _10_BIT :: 1;
    _16_BIT :: 2;

    D3D11_SHADER_MIN_PRECISION_10_BIT :: _10_BIT;
    D3D11_SHADER_MIN_PRECISION_16_BIT :: _16_BIT;
}

D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT :: struct {
    PixelShaderMinPrecision:          u32;
    AllOtherShaderStagesMinPrecision: u32;
}

D3D11_TILED_RESOURCES_TIER :: enum s32 {
    D3D11_TILED_RESOURCES_NOT_SUPPORTED :: 0;
    _1                                  :: 1;
    _2                                  :: 2;
    _3                                  :: 3;

    D3D11_TILED_RESOURCES_TIER_1 :: _1;
    D3D11_TILED_RESOURCES_TIER_2 :: _2;
    D3D11_TILED_RESOURCES_TIER_3 :: _3;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS1 :: struct {
    TiledResourcesTier:                    D3D11_TILED_RESOURCES_TIER;
    MinMaxFiltering:                       BOOL;
    ClearViewAlsoSupportsDepthOnlyFormats: BOOL;
    MapOnDefaultBuffers:                   BOOL;
}

D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT :: struct {
    SimpleInstancingSupported: BOOL;
}

D3D11_FEATURE_DATA_MARKER_SUPPORT :: struct {
    Profile: BOOL;
}

D3D11_FEATURE_DATA_D3D9_OPTIONS1 :: struct {
    FullNonPow2TextureSupported:                                 BOOL;
    DepthAsTextureWithLessEqualComparisonFilterSupported:        BOOL;
    SimpleInstancingSupported:                                   BOOL;
    TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: BOOL;
}

D3D11_CONSERVATIVE_RASTERIZATION_TIER :: enum s32 {
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED :: 0;
    _1                                             :: 1;
    _2                                             :: 2;
    _3                                             :: 3;

    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 :: _1;
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 :: _2;
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 :: _3;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS2 :: struct {
    PSSpecifiedStencilRefSupported: BOOL;
    TypedUAVLoadAdditionalFormats:  BOOL;
    ROVsSupported:                  BOOL;
    ConservativeRasterizationTier:  D3D11_CONSERVATIVE_RASTERIZATION_TIER;
    TiledResourcesTier:             D3D11_TILED_RESOURCES_TIER;
    MapOnDefaultTextures:           BOOL;
    StandardSwizzle:                BOOL;
    UnifiedMemoryArchitecture:      BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS3 :: struct {
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: BOOL;
}

D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT :: struct {
    MaxGPUVirtualAddressBitsPerResource: u32;
    MaxGPUVirtualAddressBitsPerProcess:  u32;
}

D3D11_SHADER_CACHE_SUPPORT_FLAGS :: enum_flags u32 {
    NONE                   :: 0x0;
    AUTOMATIC_INPROC_CACHE :: 0x1;
    AUTOMATIC_DISK_CACHE   :: 0x2;

    D3D11_SHADER_CACHE_SUPPORT_NONE                   :: NONE;
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE :: AUTOMATIC_INPROC_CACHE;
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE   :: AUTOMATIC_DISK_CACHE;
}

D3D11_FEATURE_DATA_SHADER_CACHE :: struct {
    SupportFlags: u32;
}

D3D11_SHARED_RESOURCE_TIER :: enum s32 {
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;

    D3D11_SHARED_RESOURCE_TIER_0 :: _0;
    D3D11_SHARED_RESOURCE_TIER_1 :: _1;
    D3D11_SHARED_RESOURCE_TIER_2 :: _2;
    D3D11_SHARED_RESOURCE_TIER_3 :: _3;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS5 :: struct {
    SharedResourceTier: D3D11_SHARED_RESOURCE_TIER;
}


ID3D11DeviceContext_UUID :: "c0bfa96c-e089-44fb-8eaf-26f8796190da";
ID3D11DeviceContext :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11devicecontext_vtable: *ID3D11DeviceContext_VTable;
}
ID3D11DeviceContext_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    VSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    PSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    PSSetShader: (this: *ID3D11DeviceContext, pPixelShader: *ID3D11PixelShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    PSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    VSSetShader: (this: *ID3D11DeviceContext, pVertexShader: *ID3D11VertexShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    DrawIndexed: (this: *ID3D11DeviceContext, IndexCount: u32, StartIndexLocation: u32, BaseVertexLocation: s32) -> void #cpp_method;
    Draw: (this: *ID3D11DeviceContext, VertexCount: u32, StartVertexLocation: u32) -> void #cpp_method;
    Map: (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, Subresource: u32, MapType: D3D11_MAP, MapFlags: u32, pMappedResource: *D3D11_MAPPED_SUBRESOURCE) -> HRESULT #cpp_method;
    Unmap: (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, Subresource: u32) -> void #cpp_method;
    PSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    IASetInputLayout: (this: *ID3D11DeviceContext, pInputLayout: *ID3D11InputLayout) -> void #cpp_method;
    IASetVertexBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: **ID3D11Buffer, pStrides: *u32, pOffsets: *u32) -> void #cpp_method;
    IASetIndexBuffer: (this: *ID3D11DeviceContext, pIndexBuffer: *ID3D11Buffer, Format: DXGI_FORMAT, Offset: u32) -> void #cpp_method;
    DrawIndexedInstanced: (this: *ID3D11DeviceContext, IndexCountPerInstance: u32, InstanceCount: u32, StartIndexLocation: u32, BaseVertexLocation: s32, StartInstanceLocation: u32) -> void #cpp_method;
    DrawInstanced: (this: *ID3D11DeviceContext, VertexCountPerInstance: u32, InstanceCount: u32, StartVertexLocation: u32, StartInstanceLocation: u32) -> void #cpp_method;
    GSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    GSSetShader: (this: *ID3D11DeviceContext, pShader: *ID3D11GeometryShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    IASetPrimitiveTopology: (this: *ID3D11DeviceContext, Topology: D3D11_PRIMITIVE_TOPOLOGY) -> void #cpp_method;
    VSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    VSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    Begin: (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous) -> void #cpp_method;
    End: (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous) -> void #cpp_method;
    GetData: (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous, pData: *void, DataSize: u32, GetDataFlags: u32) -> HRESULT #cpp_method;
    SetPredication: (this: *ID3D11DeviceContext, pPredicate: *ID3D11Predicate, PredicateValue: BOOL) -> void #cpp_method;
    GSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    GSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    OMSetRenderTargets: (this: *ID3D11DeviceContext, NumViews: u32, ppRenderTargetViews: **ID3D11RenderTargetView, pDepthStencilView: *ID3D11DepthStencilView) -> void #cpp_method;
    OMSetRenderTargetsAndUnorderedAccessViews: (this: *ID3D11DeviceContext, NumRTVs: u32, ppRenderTargetViews: **ID3D11RenderTargetView, pDepthStencilView: *ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView, pUAVInitialCounts: *u32) -> void #cpp_method;
    OMSetBlendState: (this: *ID3D11DeviceContext, pBlendState: *ID3D11BlendState, BlendFactor: *[4] float, SampleMask: u32) -> void #cpp_method;
    OMSetDepthStencilState: (this: *ID3D11DeviceContext, pDepthStencilState: *ID3D11DepthStencilState, StencilRef: u32) -> void #cpp_method;
    SOSetTargets: (this: *ID3D11DeviceContext, NumBuffers: u32, ppSOTargets: **ID3D11Buffer, pOffsets: *u32) -> void #cpp_method;
    DrawAuto: (this: *ID3D11DeviceContext) -> void #cpp_method;
    DrawIndexedInstancedIndirect: (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) -> void #cpp_method;
    DrawInstancedIndirect: (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) -> void #cpp_method;
    Dispatch: (this: *ID3D11DeviceContext, ThreadGroupCountX: u32, ThreadGroupCountY: u32, ThreadGroupCountZ: u32) -> void #cpp_method;
    DispatchIndirect: (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) -> void #cpp_method;
    RSSetState: (this: *ID3D11DeviceContext, pRasterizerState: *ID3D11RasterizerState) -> void #cpp_method;
    RSSetViewports: (this: *ID3D11DeviceContext, NumViewports: u32, pViewports: *D3D11_VIEWPORT) -> void #cpp_method;
    RSSetScissorRects: (this: *ID3D11DeviceContext, NumRects: u32, pRects: *D3D11_RECT) -> void #cpp_method;
    CopySubresourceRegion: (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, DstX: u32, DstY: u32, DstZ: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, pSrcBox: *D3D11_BOX) -> void #cpp_method;
    CopyResource: (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, pSrcResource: *ID3D11Resource) -> void #cpp_method;
    UpdateSubresource: (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, pDstBox: *D3D11_BOX, pSrcData: *void, SrcRowPitch: u32, SrcDepthPitch: u32) -> void #cpp_method;
    CopyStructureCount: (this: *ID3D11DeviceContext, pDstBuffer: *ID3D11Buffer, DstAlignedByteOffset: u32, pSrcView: *ID3D11UnorderedAccessView) -> void #cpp_method;
    ClearRenderTargetView: (this: *ID3D11DeviceContext, pRenderTargetView: *ID3D11RenderTargetView, ColorRGBA: *[4] float) -> void #cpp_method;
    ClearUnorderedAccessViewUint: (this: *ID3D11DeviceContext, pUnorderedAccessView: *ID3D11UnorderedAccessView, Values: *[4] u32) -> void #cpp_method;
    ClearUnorderedAccessViewFloat: (this: *ID3D11DeviceContext, pUnorderedAccessView: *ID3D11UnorderedAccessView, Values: *[4] float) -> void #cpp_method;
    ClearDepthStencilView: (this: *ID3D11DeviceContext, pDepthStencilView: *ID3D11DepthStencilView, ClearFlags: u32, Depth: float, Stencil: u8) -> void #cpp_method;
    GenerateMips: (this: *ID3D11DeviceContext, pShaderResourceView: *ID3D11ShaderResourceView) -> void #cpp_method;
    SetResourceMinLOD: (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, MinLOD: float) -> void #cpp_method;
    GetResourceMinLOD: (this: *ID3D11DeviceContext, pResource: *ID3D11Resource) -> float #cpp_method;
    ResolveSubresource: (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, Format: DXGI_FORMAT) -> void #cpp_method;
    ExecuteCommandList: (this: *ID3D11DeviceContext, pCommandList: *ID3D11CommandList, RestoreContextState: BOOL) -> void #cpp_method;
    HSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    HSSetShader: (this: *ID3D11DeviceContext, pHullShader: *ID3D11HullShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    HSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    HSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    DSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    DSSetShader: (this: *ID3D11DeviceContext, pDomainShader: *ID3D11DomainShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    DSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    DSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    CSSetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    CSSetUnorderedAccessViews: (this: *ID3D11DeviceContext, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView, pUAVInitialCounts: *u32) -> void #cpp_method;
    CSSetShader: (this: *ID3D11DeviceContext, pComputeShader: *ID3D11ComputeShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) -> void #cpp_method;
    CSSetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    CSSetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    VSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    PSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    PSGetShader: (this: *ID3D11DeviceContext, ppPixelShader: **ID3D11PixelShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    PSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    VSGetShader: (this: *ID3D11DeviceContext, ppVertexShader: **ID3D11VertexShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    PSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    IAGetInputLayout: (this: *ID3D11DeviceContext, ppInputLayout: **ID3D11InputLayout) -> void #cpp_method;
    IAGetVertexBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: **ID3D11Buffer, pStrides: *u32, pOffsets: *u32) -> void #cpp_method;
    IAGetIndexBuffer: (this: *ID3D11DeviceContext, pIndexBuffer: **ID3D11Buffer, Format: *DXGI_FORMAT, Offset: *u32) -> void #cpp_method;
    GSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    GSGetShader: (this: *ID3D11DeviceContext, ppGeometryShader: **ID3D11GeometryShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    IAGetPrimitiveTopology: (this: *ID3D11DeviceContext, pTopology: *D3D11_PRIMITIVE_TOPOLOGY) -> void #cpp_method;
    VSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    VSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    GetPredication: (this: *ID3D11DeviceContext, ppPredicate: **ID3D11Predicate, pPredicateValue: *BOOL) -> void #cpp_method;
    GSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    GSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    OMGetRenderTargets: (this: *ID3D11DeviceContext, NumViews: u32, ppRenderTargetViews: **ID3D11RenderTargetView, ppDepthStencilView: **ID3D11DepthStencilView) -> void #cpp_method;
    OMGetRenderTargetsAndUnorderedAccessViews: (this: *ID3D11DeviceContext, NumRTVs: u32, ppRenderTargetViews: **ID3D11RenderTargetView, ppDepthStencilView: **ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView) -> void #cpp_method;
    OMGetBlendState: (this: *ID3D11DeviceContext, ppBlendState: **ID3D11BlendState, BlendFactor: *[4] float, pSampleMask: *u32) -> void #cpp_method;
    OMGetDepthStencilState: (this: *ID3D11DeviceContext, ppDepthStencilState: **ID3D11DepthStencilState, pStencilRef: *u32) -> void #cpp_method;
    SOGetTargets: (this: *ID3D11DeviceContext, NumBuffers: u32, ppSOTargets: **ID3D11Buffer) -> void #cpp_method;
    RSGetState: (this: *ID3D11DeviceContext, ppRasterizerState: **ID3D11RasterizerState) -> void #cpp_method;
    RSGetViewports: (this: *ID3D11DeviceContext, pNumViewports: *u32, pViewports: *D3D11_VIEWPORT) -> void #cpp_method;
    RSGetScissorRects: (this: *ID3D11DeviceContext, pNumRects: *u32, pRects: *D3D11_RECT) -> void #cpp_method;
    HSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    HSGetShader: (this: *ID3D11DeviceContext, ppHullShader: **ID3D11HullShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    HSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    HSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    DSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    DSGetShader: (this: *ID3D11DeviceContext, ppDomainShader: **ID3D11DomainShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    DSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    DSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    CSGetShaderResources: (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) -> void #cpp_method;
    CSGetUnorderedAccessViews: (this: *ID3D11DeviceContext, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView) -> void #cpp_method;
    CSGetShader: (this: *ID3D11DeviceContext, ppComputeShader: **ID3D11ComputeShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) -> void #cpp_method;
    CSGetSamplers: (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) -> void #cpp_method;
    CSGetConstantBuffers: (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) -> void #cpp_method;
    ClearState: (this: *ID3D11DeviceContext) -> void #cpp_method;
    Flush: (this: *ID3D11DeviceContext) -> void #cpp_method;
    GetType: (this: *ID3D11DeviceContext) -> D3D11_DEVICE_CONTEXT_TYPE #cpp_method;
    GetContextFlags: (this: *ID3D11DeviceContext) -> u32 #cpp_method;
    FinishCommandList: (this: *ID3D11DeviceContext, RestoreDeferredContextState: BOOL, ppCommandList: **ID3D11CommandList) -> HRESULT #cpp_method;
}
ID3D11DeviceContext_VSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.VSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_PSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.PSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_PSSetShader :: inline (this: *ID3D11DeviceContext, pPixelShader: *ID3D11PixelShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.PSSetShader(this, pPixelShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_PSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.PSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_VSSetShader :: inline (this: *ID3D11DeviceContext, pVertexShader: *ID3D11VertexShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.VSSetShader(this, pVertexShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_DrawIndexed :: inline (this: *ID3D11DeviceContext, IndexCount: u32, StartIndexLocation: u32, BaseVertexLocation: s32) { this.id3d11devicecontext_vtable.DrawIndexed(this, IndexCount, StartIndexLocation, BaseVertexLocation); }
ID3D11DeviceContext_Draw :: inline (this: *ID3D11DeviceContext, VertexCount: u32, StartVertexLocation: u32) { this.id3d11devicecontext_vtable.Draw(this, VertexCount, StartVertexLocation); }
ID3D11DeviceContext_Map :: inline (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, Subresource: u32, MapType: D3D11_MAP, MapFlags: u32, pMappedResource: *D3D11_MAPPED_SUBRESOURCE) -> HRESULT { return this.id3d11devicecontext_vtable.Map(this, pResource, Subresource, MapType, MapFlags, pMappedResource); }
ID3D11DeviceContext_Unmap :: inline (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, Subresource: u32) { this.id3d11devicecontext_vtable.Unmap(this, pResource, Subresource); }
ID3D11DeviceContext_PSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.PSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_IASetInputLayout :: inline (this: *ID3D11DeviceContext, pInputLayout: *ID3D11InputLayout) { this.id3d11devicecontext_vtable.IASetInputLayout(this, pInputLayout); }
ID3D11DeviceContext_IASetVertexBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: **ID3D11Buffer, pStrides: *u32, pOffsets: *u32) { this.id3d11devicecontext_vtable.IASetVertexBuffers(this, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets); }
ID3D11DeviceContext_IASetIndexBuffer :: inline (this: *ID3D11DeviceContext, pIndexBuffer: *ID3D11Buffer, Format: DXGI_FORMAT, Offset: u32) { this.id3d11devicecontext_vtable.IASetIndexBuffer(this, pIndexBuffer, Format, Offset); }
ID3D11DeviceContext_DrawIndexedInstanced :: inline (this: *ID3D11DeviceContext, IndexCountPerInstance: u32, InstanceCount: u32, StartIndexLocation: u32, BaseVertexLocation: s32, StartInstanceLocation: u32) { this.id3d11devicecontext_vtable.DrawIndexedInstanced(this, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation); }
ID3D11DeviceContext_DrawInstanced :: inline (this: *ID3D11DeviceContext, VertexCountPerInstance: u32, InstanceCount: u32, StartVertexLocation: u32, StartInstanceLocation: u32) { this.id3d11devicecontext_vtable.DrawInstanced(this, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation); }
ID3D11DeviceContext_GSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.GSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_GSSetShader :: inline (this: *ID3D11DeviceContext, pShader: *ID3D11GeometryShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.GSSetShader(this, pShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_IASetPrimitiveTopology :: inline (this: *ID3D11DeviceContext, Topology: D3D11_PRIMITIVE_TOPOLOGY) { this.id3d11devicecontext_vtable.IASetPrimitiveTopology(this, Topology); }
ID3D11DeviceContext_VSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.VSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_VSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.VSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_Begin :: inline (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous) { this.id3d11devicecontext_vtable.Begin(this, pAsync); }
ID3D11DeviceContext_End :: inline (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous) { this.id3d11devicecontext_vtable.End(this, pAsync); }
ID3D11DeviceContext_GetData :: inline (this: *ID3D11DeviceContext, pAsync: *ID3D11Asynchronous, pData: *void, DataSize: u32, GetDataFlags: u32) -> HRESULT { return this.id3d11devicecontext_vtable.GetData(this, pAsync, pData, DataSize, GetDataFlags); }
ID3D11DeviceContext_SetPredication :: inline (this: *ID3D11DeviceContext, pPredicate: *ID3D11Predicate, PredicateValue: BOOL) { this.id3d11devicecontext_vtable.SetPredication(this, pPredicate, PredicateValue); }
ID3D11DeviceContext_GSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.GSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_GSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.GSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_OMSetRenderTargets :: inline (this: *ID3D11DeviceContext, NumViews: u32, ppRenderTargetViews: **ID3D11RenderTargetView, pDepthStencilView: *ID3D11DepthStencilView) { this.id3d11devicecontext_vtable.OMSetRenderTargets(this, NumViews, ppRenderTargetViews, pDepthStencilView); }
ID3D11DeviceContext_OMSetRenderTargetsAndUnorderedAccessViews :: inline (this: *ID3D11DeviceContext, NumRTVs: u32, ppRenderTargetViews: **ID3D11RenderTargetView, pDepthStencilView: *ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView, pUAVInitialCounts: *u32) { this.id3d11devicecontext_vtable.OMSetRenderTargetsAndUnorderedAccessViews(this, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts); }
ID3D11DeviceContext_OMSetBlendState :: inline (this: *ID3D11DeviceContext, pBlendState: *ID3D11BlendState, BlendFactor: *[4] float, SampleMask: u32) { this.id3d11devicecontext_vtable.OMSetBlendState(this, pBlendState, BlendFactor, SampleMask); }
ID3D11DeviceContext_OMSetDepthStencilState :: inline (this: *ID3D11DeviceContext, pDepthStencilState: *ID3D11DepthStencilState, StencilRef: u32) { this.id3d11devicecontext_vtable.OMSetDepthStencilState(this, pDepthStencilState, StencilRef); }
ID3D11DeviceContext_SOSetTargets :: inline (this: *ID3D11DeviceContext, NumBuffers: u32, ppSOTargets: **ID3D11Buffer, pOffsets: *u32) { this.id3d11devicecontext_vtable.SOSetTargets(this, NumBuffers, ppSOTargets, pOffsets); }
ID3D11DeviceContext_DrawAuto :: inline (this: *ID3D11DeviceContext) { this.id3d11devicecontext_vtable.DrawAuto(this); }
ID3D11DeviceContext_DrawIndexedInstancedIndirect :: inline (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) { this.id3d11devicecontext_vtable.DrawIndexedInstancedIndirect(this, pBufferForArgs, AlignedByteOffsetForArgs); }
ID3D11DeviceContext_DrawInstancedIndirect :: inline (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) { this.id3d11devicecontext_vtable.DrawInstancedIndirect(this, pBufferForArgs, AlignedByteOffsetForArgs); }
ID3D11DeviceContext_Dispatch :: inline (this: *ID3D11DeviceContext, ThreadGroupCountX: u32, ThreadGroupCountY: u32, ThreadGroupCountZ: u32) { this.id3d11devicecontext_vtable.Dispatch(this, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ); }
ID3D11DeviceContext_DispatchIndirect :: inline (this: *ID3D11DeviceContext, pBufferForArgs: *ID3D11Buffer, AlignedByteOffsetForArgs: u32) { this.id3d11devicecontext_vtable.DispatchIndirect(this, pBufferForArgs, AlignedByteOffsetForArgs); }
ID3D11DeviceContext_RSSetState :: inline (this: *ID3D11DeviceContext, pRasterizerState: *ID3D11RasterizerState) { this.id3d11devicecontext_vtable.RSSetState(this, pRasterizerState); }
ID3D11DeviceContext_RSSetViewports :: inline (this: *ID3D11DeviceContext, NumViewports: u32, pViewports: *D3D11_VIEWPORT) { this.id3d11devicecontext_vtable.RSSetViewports(this, NumViewports, pViewports); }
ID3D11DeviceContext_RSSetScissorRects :: inline (this: *ID3D11DeviceContext, NumRects: u32, pRects: *D3D11_RECT) { this.id3d11devicecontext_vtable.RSSetScissorRects(this, NumRects, pRects); }
ID3D11DeviceContext_CopySubresourceRegion :: inline (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, DstX: u32, DstY: u32, DstZ: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, pSrcBox: *D3D11_BOX) { this.id3d11devicecontext_vtable.CopySubresourceRegion(this, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox); }
ID3D11DeviceContext_CopyResource :: inline (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, pSrcResource: *ID3D11Resource) { this.id3d11devicecontext_vtable.CopyResource(this, pDstResource, pSrcResource); }
ID3D11DeviceContext_UpdateSubresource :: inline (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, pDstBox: *D3D11_BOX, pSrcData: *void, SrcRowPitch: u32, SrcDepthPitch: u32) { this.id3d11devicecontext_vtable.UpdateSubresource(this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch); }
ID3D11DeviceContext_CopyStructureCount :: inline (this: *ID3D11DeviceContext, pDstBuffer: *ID3D11Buffer, DstAlignedByteOffset: u32, pSrcView: *ID3D11UnorderedAccessView) { this.id3d11devicecontext_vtable.CopyStructureCount(this, pDstBuffer, DstAlignedByteOffset, pSrcView); }
ID3D11DeviceContext_ClearRenderTargetView :: inline (this: *ID3D11DeviceContext, pRenderTargetView: *ID3D11RenderTargetView, ColorRGBA: *[4] float) { this.id3d11devicecontext_vtable.ClearRenderTargetView(this, pRenderTargetView, ColorRGBA); }
ID3D11DeviceContext_ClearUnorderedAccessViewUint :: inline (this: *ID3D11DeviceContext, pUnorderedAccessView: *ID3D11UnorderedAccessView, Values: *[4] u32) { this.id3d11devicecontext_vtable.ClearUnorderedAccessViewUint(this, pUnorderedAccessView, Values); }
ID3D11DeviceContext_ClearUnorderedAccessViewFloat :: inline (this: *ID3D11DeviceContext, pUnorderedAccessView: *ID3D11UnorderedAccessView, Values: *[4] float) { this.id3d11devicecontext_vtable.ClearUnorderedAccessViewFloat(this, pUnorderedAccessView, Values); }
ID3D11DeviceContext_ClearDepthStencilView :: inline (this: *ID3D11DeviceContext, pDepthStencilView: *ID3D11DepthStencilView, ClearFlags: u32, Depth: float, Stencil: u8) { this.id3d11devicecontext_vtable.ClearDepthStencilView(this, pDepthStencilView, ClearFlags, Depth, Stencil); }
ID3D11DeviceContext_GenerateMips :: inline (this: *ID3D11DeviceContext, pShaderResourceView: *ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.GenerateMips(this, pShaderResourceView); }
ID3D11DeviceContext_SetResourceMinLOD :: inline (this: *ID3D11DeviceContext, pResource: *ID3D11Resource, MinLOD: float) { this.id3d11devicecontext_vtable.SetResourceMinLOD(this, pResource, MinLOD); }
ID3D11DeviceContext_GetResourceMinLOD :: inline (this: *ID3D11DeviceContext, pResource: *ID3D11Resource) -> float { return this.id3d11devicecontext_vtable.GetResourceMinLOD(this, pResource); }
ID3D11DeviceContext_ResolveSubresource :: inline (this: *ID3D11DeviceContext, pDstResource: *ID3D11Resource, DstSubresource: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, Format: DXGI_FORMAT) { this.id3d11devicecontext_vtable.ResolveSubresource(this, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format); }
ID3D11DeviceContext_ExecuteCommandList :: inline (this: *ID3D11DeviceContext, pCommandList: *ID3D11CommandList, RestoreContextState: BOOL) { this.id3d11devicecontext_vtable.ExecuteCommandList(this, pCommandList, RestoreContextState); }
ID3D11DeviceContext_HSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.HSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_HSSetShader :: inline (this: *ID3D11DeviceContext, pHullShader: *ID3D11HullShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.HSSetShader(this, pHullShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_HSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.HSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_HSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.HSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_DSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.DSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_DSSetShader :: inline (this: *ID3D11DeviceContext, pDomainShader: *ID3D11DomainShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.DSSetShader(this, pDomainShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_DSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.DSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_DSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.DSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_CSSetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.CSSetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_CSSetUnorderedAccessViews :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView, pUAVInitialCounts: *u32) { this.id3d11devicecontext_vtable.CSSetUnorderedAccessViews(this, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts); }
ID3D11DeviceContext_CSSetShader :: inline (this: *ID3D11DeviceContext, pComputeShader: *ID3D11ComputeShader, ppClassInstances: **ID3D11ClassInstance, NumClassInstances: u32) { this.id3d11devicecontext_vtable.CSSetShader(this, pComputeShader, ppClassInstances, NumClassInstances); }
ID3D11DeviceContext_CSSetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.CSSetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_CSSetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.CSSetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_VSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.VSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_PSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.PSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_PSGetShader :: inline (this: *ID3D11DeviceContext, ppPixelShader: **ID3D11PixelShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.PSGetShader(this, ppPixelShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_PSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.PSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_VSGetShader :: inline (this: *ID3D11DeviceContext, ppVertexShader: **ID3D11VertexShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.VSGetShader(this, ppVertexShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_PSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.PSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_IAGetInputLayout :: inline (this: *ID3D11DeviceContext, ppInputLayout: **ID3D11InputLayout) { this.id3d11devicecontext_vtable.IAGetInputLayout(this, ppInputLayout); }
ID3D11DeviceContext_IAGetVertexBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: **ID3D11Buffer, pStrides: *u32, pOffsets: *u32) { this.id3d11devicecontext_vtable.IAGetVertexBuffers(this, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets); }
ID3D11DeviceContext_IAGetIndexBuffer :: inline (this: *ID3D11DeviceContext, pIndexBuffer: **ID3D11Buffer, Format: *DXGI_FORMAT, Offset: *u32) { this.id3d11devicecontext_vtable.IAGetIndexBuffer(this, pIndexBuffer, Format, Offset); }
ID3D11DeviceContext_GSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.GSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_GSGetShader :: inline (this: *ID3D11DeviceContext, ppGeometryShader: **ID3D11GeometryShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.GSGetShader(this, ppGeometryShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_IAGetPrimitiveTopology :: inline (this: *ID3D11DeviceContext, pTopology: *D3D11_PRIMITIVE_TOPOLOGY) { this.id3d11devicecontext_vtable.IAGetPrimitiveTopology(this, pTopology); }
ID3D11DeviceContext_VSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.VSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_VSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.VSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_GetPredication :: inline (this: *ID3D11DeviceContext, ppPredicate: **ID3D11Predicate, pPredicateValue: *BOOL) { this.id3d11devicecontext_vtable.GetPredication(this, ppPredicate, pPredicateValue); }
ID3D11DeviceContext_GSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.GSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_GSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.GSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_OMGetRenderTargets :: inline (this: *ID3D11DeviceContext, NumViews: u32, ppRenderTargetViews: **ID3D11RenderTargetView, ppDepthStencilView: **ID3D11DepthStencilView) { this.id3d11devicecontext_vtable.OMGetRenderTargets(this, NumViews, ppRenderTargetViews, ppDepthStencilView); }
ID3D11DeviceContext_OMGetRenderTargetsAndUnorderedAccessViews :: inline (this: *ID3D11DeviceContext, NumRTVs: u32, ppRenderTargetViews: **ID3D11RenderTargetView, ppDepthStencilView: **ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView) { this.id3d11devicecontext_vtable.OMGetRenderTargetsAndUnorderedAccessViews(this, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews); }
ID3D11DeviceContext_OMGetBlendState :: inline (this: *ID3D11DeviceContext, ppBlendState: **ID3D11BlendState, BlendFactor: *[4] float, pSampleMask: *u32) { this.id3d11devicecontext_vtable.OMGetBlendState(this, ppBlendState, BlendFactor, pSampleMask); }
ID3D11DeviceContext_OMGetDepthStencilState :: inline (this: *ID3D11DeviceContext, ppDepthStencilState: **ID3D11DepthStencilState, pStencilRef: *u32) { this.id3d11devicecontext_vtable.OMGetDepthStencilState(this, ppDepthStencilState, pStencilRef); }
ID3D11DeviceContext_SOGetTargets :: inline (this: *ID3D11DeviceContext, NumBuffers: u32, ppSOTargets: **ID3D11Buffer) { this.id3d11devicecontext_vtable.SOGetTargets(this, NumBuffers, ppSOTargets); }
ID3D11DeviceContext_RSGetState :: inline (this: *ID3D11DeviceContext, ppRasterizerState: **ID3D11RasterizerState) { this.id3d11devicecontext_vtable.RSGetState(this, ppRasterizerState); }
ID3D11DeviceContext_RSGetViewports :: inline (this: *ID3D11DeviceContext, pNumViewports: *u32, pViewports: *D3D11_VIEWPORT) { this.id3d11devicecontext_vtable.RSGetViewports(this, pNumViewports, pViewports); }
ID3D11DeviceContext_RSGetScissorRects :: inline (this: *ID3D11DeviceContext, pNumRects: *u32, pRects: *D3D11_RECT) { this.id3d11devicecontext_vtable.RSGetScissorRects(this, pNumRects, pRects); }
ID3D11DeviceContext_HSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.HSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_HSGetShader :: inline (this: *ID3D11DeviceContext, ppHullShader: **ID3D11HullShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.HSGetShader(this, ppHullShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_HSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.HSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_HSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.HSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_DSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.DSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_DSGetShader :: inline (this: *ID3D11DeviceContext, ppDomainShader: **ID3D11DomainShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.DSGetShader(this, ppDomainShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_DSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.DSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_DSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.DSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_CSGetShaderResources :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumViews: u32, ppShaderResourceViews: **ID3D11ShaderResourceView) { this.id3d11devicecontext_vtable.CSGetShaderResources(this, StartSlot, NumViews, ppShaderResourceViews); }
ID3D11DeviceContext_CSGetUnorderedAccessViews :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: **ID3D11UnorderedAccessView) { this.id3d11devicecontext_vtable.CSGetUnorderedAccessViews(this, StartSlot, NumUAVs, ppUnorderedAccessViews); }
ID3D11DeviceContext_CSGetShader :: inline (this: *ID3D11DeviceContext, ppComputeShader: **ID3D11ComputeShader, ppClassInstances: **ID3D11ClassInstance, pNumClassInstances: *u32) { this.id3d11devicecontext_vtable.CSGetShader(this, ppComputeShader, ppClassInstances, pNumClassInstances); }
ID3D11DeviceContext_CSGetSamplers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumSamplers: u32, ppSamplers: **ID3D11SamplerState) { this.id3d11devicecontext_vtable.CSGetSamplers(this, StartSlot, NumSamplers, ppSamplers); }
ID3D11DeviceContext_CSGetConstantBuffers :: inline (this: *ID3D11DeviceContext, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer) { this.id3d11devicecontext_vtable.CSGetConstantBuffers(this, StartSlot, NumBuffers, ppConstantBuffers); }
ID3D11DeviceContext_ClearState :: inline (this: *ID3D11DeviceContext) { this.id3d11devicecontext_vtable.ClearState(this); }
ID3D11DeviceContext_Flush :: inline (this: *ID3D11DeviceContext) { this.id3d11devicecontext_vtable.Flush(this); }
ID3D11DeviceContext_GetType :: inline (this: *ID3D11DeviceContext) -> D3D11_DEVICE_CONTEXT_TYPE { return this.id3d11devicecontext_vtable.GetType(this); }
ID3D11DeviceContext_GetContextFlags :: inline (this: *ID3D11DeviceContext) -> u32 { return this.id3d11devicecontext_vtable.GetContextFlags(this); }
ID3D11DeviceContext_FinishCommandList :: inline (this: *ID3D11DeviceContext, RestoreDeferredContextState: BOOL, ppCommandList: **ID3D11CommandList) -> HRESULT { return this.id3d11devicecontext_vtable.FinishCommandList(this, RestoreDeferredContextState, ppCommandList); }

vtable :: (obj: *ID3D11DeviceContext) -> *ID3D11DeviceContext_VTable { return obj.id3d11devicecontext_vtable; }


CD3D11_VIDEO_DEFAULT :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

APP_DEPRECATED_HRESULT :: HRESULT;

D3D11_DECODER_PROFILE_MPEG2_MOCOMP: GUID;
D3D11_DECODER_PROFILE_MPEG2_IDCT: GUID;
D3D11_DECODER_PROFILE_MPEG2_VLD: GUID;
D3D11_DECODER_PROFILE_MPEG1_VLD: GUID;
D3D11_DECODER_PROFILE_MPEG2and1_VLD: GUID;
D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_MOCOMP_FGT: GUID;
D3D11_DECODER_PROFILE_H264_IDCT_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_IDCT_FGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_FGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT: GUID;
D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT: GUID;
D3D11_DECODER_PROFILE_WMV8_POSTPROC: GUID;
D3D11_DECODER_PROFILE_WMV8_MOCOMP: GUID;
D3D11_DECODER_PROFILE_WMV9_POSTPROC: GUID;
D3D11_DECODER_PROFILE_WMV9_MOCOMP: GUID;
D3D11_DECODER_PROFILE_WMV9_IDCT: GUID;
D3D11_DECODER_PROFILE_VC1_POSTPROC: GUID;
D3D11_DECODER_PROFILE_VC1_MOCOMP: GUID;
D3D11_DECODER_PROFILE_VC1_IDCT: GUID;
D3D11_DECODER_PROFILE_VC1_VLD: GUID;
D3D11_DECODER_PROFILE_VC1_D2010: GUID;
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE: GUID;
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC: GUID;
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC: GUID;
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN: GUID;
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10: GUID;
D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0: GUID;
D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2: GUID;
D3D11_DECODER_PROFILE_VP8_VLD: GUID;
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE0: GUID;
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE1: GUID;
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE2: GUID;
D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2: GUID;
D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2_420: GUID;
D3D11_VIDEO_DECODER_DESC :: struct {
    Guid:         GUID;
    SampleWidth:  u32;
    SampleHeight: u32;
    OutputFormat: DXGI_FORMAT;
}

D3D11_VIDEO_DECODER_CONFIG :: struct {
    guidConfigBitstreamEncryption:  GUID;
    guidConfigMBcontrolEncryption:  GUID;
    guidConfigResidDiffEncryption:  GUID;
    ConfigBitstreamRaw:             u32;
    ConfigMBcontrolRasterOrder:     u32;
    ConfigResidDiffHost:            u32;
    ConfigSpatialResid8:            u32;
    ConfigResid8Subtraction:        u32;
    ConfigSpatialHost8or9Clipping:  u32;
    ConfigSpatialResidInterleaved:  u32;
    ConfigIntraResidUnsigned:       u32;
    ConfigResidDiffAccelerator:     u32;
    ConfigHostInverseScan:          u32;
    ConfigSpecificIDCT:             u32;
    Config4GroupedCoefs:            u32;
    ConfigMinRenderTargetBuffCount: u16;
    ConfigDecoderSpecific:          u16;
}

D3D11_VIDEO_DECODER_BUFFER_TYPE :: enum s32 {
    PICTURE_PARAMETERS          :: 0;
    MACROBLOCK_CONTROL          :: 1;
    RESIDUAL_DIFFERENCE         :: 2;
    DEBLOCKING_CONTROL          :: 3;
    INVERSE_QUANTIZATION_MATRIX :: 4;
    SLICE_CONTROL               :: 5;
    BITSTREAM                   :: 6;
    MOTION_VECTOR               :: 7;
    FILM_GRAIN                  :: 8;

    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS          :: PICTURE_PARAMETERS;
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL          :: MACROBLOCK_CONTROL;
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE         :: RESIDUAL_DIFFERENCE;
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL          :: DEBLOCKING_CONTROL;
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX :: INVERSE_QUANTIZATION_MATRIX;
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL               :: SLICE_CONTROL;
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM                   :: BITSTREAM;
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR               :: MOTION_VECTOR;
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN                  :: FILM_GRAIN;
}

D3D11_AES_CTR_IV :: struct {
    IV:    u64;
    Count: u64;
}

D3D11_ENCRYPTED_BLOCK_INFO :: struct {
    NumEncryptedBytesAtBeginning: u32;
    NumBytesInSkipPattern:        u32;
    NumBytesInEncryptPattern:     u32;
}

D3D11_VIDEO_DECODER_BUFFER_DESC :: struct {
    BufferType:         D3D11_VIDEO_DECODER_BUFFER_TYPE;
    BufferIndex:        u32;
    DataOffset:         u32;
    DataSize:           u32;
    FirstMBaddress:     u32;
    NumMBsInBuffer:     u32;
    Width:              u32;
    Height:             u32;
    Stride:             u32;
    ReservedBits:       u32;

    pIV:                *void;
    IVSize:             u32;
    PartialEncryption:  BOOL;
    EncryptedBlockInfo: D3D11_ENCRYPTED_BLOCK_INFO;
}

D3D11_VIDEO_DECODER_EXTENSION :: struct {
    Function:              u32;

    pPrivateInputData:     *void;
    PrivateInputDataSize:  u32;

    pPrivateOutputData:    *void;
    PrivateOutputDataSize: u32;
    ResourceCount:         u32;

    ppResourceList:        **ID3D11Resource;
}


ID3D11VideoDecoder_UUID :: "3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C";
ID3D11VideoDecoder :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11videodecoder_vtable: *ID3D11VideoDecoder_VTable;
}
ID3D11VideoDecoder_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetCreationParameters: (this: *ID3D11VideoDecoder, pVideoDesc: *D3D11_VIDEO_DECODER_DESC, pConfig: *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #cpp_method;
    GetDriverHandle: (this: *ID3D11VideoDecoder, pDriverHandle: *HANDLE) -> HRESULT #cpp_method;
}
ID3D11VideoDecoder_GetCreationParameters :: inline (this: *ID3D11VideoDecoder, pVideoDesc: *D3D11_VIDEO_DECODER_DESC, pConfig: *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT { return this.id3d11videodecoder_vtable.GetCreationParameters(this, pVideoDesc, pConfig); }
ID3D11VideoDecoder_GetDriverHandle :: inline (this: *ID3D11VideoDecoder, pDriverHandle: *HANDLE) -> HRESULT { return this.id3d11videodecoder_vtable.GetDriverHandle(this, pDriverHandle); }

vtable :: (obj: *ID3D11VideoDecoder) -> *ID3D11VideoDecoder_VTable { return obj.id3d11videodecoder_vtable; }


D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT :: enum s32 {
    INPUT  :: 1;
    OUTPUT :: 2;

    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT  :: INPUT;
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT :: OUTPUT;
}

D3D11_VIDEO_PROCESSOR_DEVICE_CAPS :: enum s32 {
    LINEAR_SPACE            :: 1;
    xvYCC                   :: 2;
    RGB_RANGE_CONVERSION    :: 4;
    YCbCr_MATRIX_CONVERSION :: 8;
    NOMINAL_RANGE           :: 16;

    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE            :: LINEAR_SPACE;
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC                   :: xvYCC;
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION    :: RGB_RANGE_CONVERSION;
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION :: YCbCr_MATRIX_CONVERSION;
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE           :: NOMINAL_RANGE;
}

D3D11_VIDEO_PROCESSOR_FEATURE_CAPS :: enum s32 {
    ALPHA_FILL         :: 1;
    CONSTRICTION       :: 2;
    LUMA_KEY           :: 4;
    ALPHA_PALETTE      :: 8;
    LEGACY             :: 16;
    STEREO             :: 32;
    ROTATION           :: 64;
    ALPHA_STREAM       :: 128;
    PIXEL_ASPECT_RATIO :: 256;
    MIRROR             :: 512;
    SHADER_USAGE       :: 1024;
    METADATA_HDR10     :: 2048;

    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL         :: ALPHA_FILL;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION       :: CONSTRICTION;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY           :: LUMA_KEY;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE      :: ALPHA_PALETTE;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY             :: LEGACY;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO             :: STEREO;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION           :: ROTATION;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM       :: ALPHA_STREAM;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO :: PIXEL_ASPECT_RATIO;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR             :: MIRROR;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE       :: SHADER_USAGE;
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10     :: METADATA_HDR10;
}

D3D11_VIDEO_PROCESSOR_FILTER_CAPS :: enum s32 {
    BRIGHTNESS         :: 1;
    CONTRAST           :: 2;
    HUE                :: 4;
    SATURATION         :: 8;
    NOISE_REDUCTION    :: 16;
    EDGE_ENHANCEMENT   :: 32;
    ANAMORPHIC_SCALING :: 64;
    STEREO_ADJUSTMENT  :: 128;

    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS         :: BRIGHTNESS;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST           :: CONTRAST;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE                :: HUE;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION         :: SATURATION;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION    :: NOISE_REDUCTION;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT   :: EDGE_ENHANCEMENT;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING :: ANAMORPHIC_SCALING;
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT  :: STEREO_ADJUSTMENT;
}

D3D11_VIDEO_PROCESSOR_FORMAT_CAPS :: enum s32 {
    RGB_INTERLACED     :: 1;
    RGB_PROCAMP        :: 2;
    RGB_LUMA_KEY       :: 4;
    PALETTE_INTERLACED :: 8;

    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED     :: RGB_INTERLACED;
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP        :: RGB_PROCAMP;
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY       :: RGB_LUMA_KEY;
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED :: PALETTE_INTERLACED;
}

D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS :: enum s32 {
    DENOISE             :: 1;
    DERINGING           :: 2;
    EDGE_ENHANCEMENT    :: 4;
    COLOR_CORRECTION    :: 8;
    FLESH_TONE_MAPPING  :: 16;
    IMAGE_STABILIZATION :: 32;
    SUPER_RESOLUTION    :: 64;
    ANAMORPHIC_SCALING  :: 128;

    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE             :: DENOISE;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING           :: DERINGING;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT    :: EDGE_ENHANCEMENT;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION    :: COLOR_CORRECTION;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING  :: FLESH_TONE_MAPPING;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION :: IMAGE_STABILIZATION;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION    :: SUPER_RESOLUTION;
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING  :: ANAMORPHIC_SCALING;
}

D3D11_VIDEO_PROCESSOR_STEREO_CAPS :: enum s32 {
    MONO_OFFSET        :: 1;
    ROW_INTERLEAVED    :: 2;
    COLUMN_INTERLEAVED :: 4;
    CHECKERBOARD       :: 8;
    FLIP_MODE          :: 16;

    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET        :: MONO_OFFSET;
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED    :: ROW_INTERLEAVED;
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED :: COLUMN_INTERLEAVED;
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD       :: CHECKERBOARD;
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE          :: FLIP_MODE;
}

D3D11_VIDEO_PROCESSOR_CAPS :: struct {
    DeviceCaps:              u32;
    FeatureCaps:             u32;
    FilterCaps:              u32;
    InputFormatCaps:         u32;
    AutoStreamCaps:          u32;
    StereoCaps:              u32;
    RateConversionCapsCount: u32;
    MaxInputStreams:         u32;
    MaxStreamStates:         u32;
}

D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS :: enum s32 {
    DEINTERLACE_BLEND               :: 1;
    DEINTERLACE_BOB                 :: 2;
    DEINTERLACE_ADAPTIVE            :: 4;
    DEINTERLACE_MOTION_COMPENSATION :: 8;
    INVERSE_TELECINE                :: 16;
    FRAME_RATE_CONVERSION           :: 32;

    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND               :: DEINTERLACE_BLEND;
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB                 :: DEINTERLACE_BOB;
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE            :: DEINTERLACE_ADAPTIVE;
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION :: DEINTERLACE_MOTION_COMPENSATION;
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE                :: INVERSE_TELECINE;
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION           :: FRAME_RATE_CONVERSION;
}

D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS :: enum s32 {
    _32           :: 1;
    _22           :: 2;
    _2224         :: 4;
    _2332         :: 8;
    _32322        :: 16;
    _55           :: 32;
    _64           :: 64;
    _87           :: 128;
    _222222222223 :: 256;
    OTHER         :: -2147483648;

    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32           :: _32;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22           :: _22;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224         :: _2224;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332         :: _2332;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322        :: _32322;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55           :: _55;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64           :: _64;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87           :: _87;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 :: _222222222223;
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER        :: OTHER;
}

D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS :: struct {
    PastFrames:      u32;
    FutureFrames:    u32;
    ProcessorCaps:   u32;
    ITelecineCaps:   u32;
    CustomRateCount: u32;
}

D3D11_CONTENT_PROTECTION_CAPS :: enum s32 {
    SOFTWARE                                  :: 1;
    HARDWARE                                  :: 2;
    PROTECTION_ALWAYS_ON                      :: 4;
    PARTIAL_DECRYPTION                        :: 8;
    CONTENT_KEY                               :: 16;
    FRESHEN_SESSION_KEY                       :: 32;
    ENCRYPTED_READ_BACK                       :: 64;
    ENCRYPTED_READ_BACK_KEY                   :: 128;
    SEQUENTIAL_CTR_IV                         :: 256;
    ENCRYPT_SLICEDATA_ONLY                    :: 512;
    DECRYPTION_BLT                            :: 1024;
    HARDWARE_PROTECT_UNCOMPRESSED             :: 2048;
    HARDWARE_PROTECTED_MEMORY_PAGEABLE        :: 4096;
    HARDWARE_TEARDOWN                         :: 8192;
    HARDWARE_DRM_COMMUNICATION                :: 16384;
    HARDWARE_DRM_COMMUNICATION_MULTI_THREADED :: 32768;

    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE                                  :: SOFTWARE;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE                                  :: HARDWARE;
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON                      :: PROTECTION_ALWAYS_ON;
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION                        :: PARTIAL_DECRYPTION;
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY                               :: CONTENT_KEY;
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY                       :: FRESHEN_SESSION_KEY;
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK                       :: ENCRYPTED_READ_BACK;
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY                   :: ENCRYPTED_READ_BACK_KEY;
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV                         :: SEQUENTIAL_CTR_IV;
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY                    :: ENCRYPT_SLICEDATA_ONLY;
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT                            :: DECRYPTION_BLT;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED             :: HARDWARE_PROTECT_UNCOMPRESSED;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE        :: HARDWARE_PROTECTED_MEMORY_PAGEABLE;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN                         :: HARDWARE_TEARDOWN;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION                :: HARDWARE_DRM_COMMUNICATION;
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED :: HARDWARE_DRM_COMMUNICATION_MULTI_THREADED;
}

D3D11_CRYPTO_TYPE_AES128_CTR: GUID;
D3D11_DECODER_ENCRYPTION_HW_CENC: GUID;
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC: GUID;
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS: GUID;
D3D11_KEY_EXCHANGE_HW_PROTECTION: GUID;
D3D11_VIDEO_CONTENT_PROTECTION_CAPS :: struct {
    Caps:                 u32;
    KeyExchangeTypeCount: u32;
    BlockAlignmentSize:   u32;
    ProtectedMemorySize:  u64;
}

D3D11_VIDEO_PROCESSOR_CUSTOM_RATE :: struct {
    CustomRate:          DXGI_RATIONAL;
    OutputFrames:        u32;
    InputInterlaced:     BOOL;
    InputFramesOrFields: u32;
}

D3D11_VIDEO_PROCESSOR_FILTER :: enum s32 {
    BRIGHTNESS         :: 0;
    CONTRAST           :: 1;
    HUE                :: 2;
    SATURATION         :: 3;
    NOISE_REDUCTION    :: 4;
    EDGE_ENHANCEMENT   :: 5;
    ANAMORPHIC_SCALING :: 6;
    STEREO_ADJUSTMENT  :: 7;

    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS         :: BRIGHTNESS;
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST           :: CONTRAST;
    D3D11_VIDEO_PROCESSOR_FILTER_HUE                :: HUE;
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION         :: SATURATION;
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION    :: NOISE_REDUCTION;
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT   :: EDGE_ENHANCEMENT;
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING :: ANAMORPHIC_SCALING;
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT  :: STEREO_ADJUSTMENT;
}

D3D11_VIDEO_PROCESSOR_FILTER_RANGE :: struct {
    Minimum:    s32;
    Maximum:    s32;
    Default:    s32;
    Multiplier: float;
}

D3D11_VIDEO_FRAME_FORMAT :: enum s32 {
    PROGRESSIVE                   :: 0;
    INTERLACED_TOP_FIELD_FIRST    :: 1;
    INTERLACED_BOTTOM_FIELD_FIRST :: 2;

    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE                   :: PROGRESSIVE;
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST    :: INTERLACED_TOP_FIELD_FIRST;
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST :: INTERLACED_BOTTOM_FIELD_FIRST;
}

D3D11_VIDEO_USAGE :: enum s32 {
    PLAYBACK_NORMAL :: 0;
    OPTIMAL_SPEED   :: 1;
    OPTIMAL_QUALITY :: 2;

    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL :: PLAYBACK_NORMAL;
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED   :: OPTIMAL_SPEED;
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY :: OPTIMAL_QUALITY;
}

D3D11_VIDEO_PROCESSOR_CONTENT_DESC :: struct {
    InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT;
    InputFrameRate:   DXGI_RATIONAL;
    InputWidth:       u32;
    InputHeight:      u32;
    OutputFrameRate:  DXGI_RATIONAL;
    OutputWidth:      u32;
    OutputHeight:     u32;
    Usage:            D3D11_VIDEO_USAGE;
}


ID3D11VideoProcessorEnumerator_UUID :: "31627037-53AB-4200-9061-05FAA9AB45F9";
ID3D11VideoProcessorEnumerator :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11videoprocessorenumerator_vtable: *ID3D11VideoProcessorEnumerator_VTable;
}
ID3D11VideoProcessorEnumerator_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetVideoProcessorContentDesc: (this: *ID3D11VideoProcessorEnumerator, pContentDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) -> HRESULT #cpp_method;
    CheckVideoProcessorFormat: (this: *ID3D11VideoProcessorEnumerator, Format: DXGI_FORMAT, pFlags: *u32) -> HRESULT #cpp_method;
    GetVideoProcessorCaps: (this: *ID3D11VideoProcessorEnumerator, pCaps: *D3D11_VIDEO_PROCESSOR_CAPS) -> HRESULT #cpp_method;
    GetVideoProcessorRateConversionCaps: (this: *ID3D11VideoProcessorEnumerator, TypeIndex: u32, pCaps: *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) -> HRESULT #cpp_method;
    GetVideoProcessorCustomRate: (this: *ID3D11VideoProcessorEnumerator, TypeIndex: u32, CustomRateIndex: u32, pRate: *D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) -> HRESULT #cpp_method;
    GetVideoProcessorFilterRange: (this: *ID3D11VideoProcessorEnumerator, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pRange: *D3D11_VIDEO_PROCESSOR_FILTER_RANGE) -> HRESULT #cpp_method;
}
ID3D11VideoProcessorEnumerator_GetVideoProcessorContentDesc :: inline (this: *ID3D11VideoProcessorEnumerator, pContentDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.GetVideoProcessorContentDesc(this, pContentDesc); }
ID3D11VideoProcessorEnumerator_CheckVideoProcessorFormat :: inline (this: *ID3D11VideoProcessorEnumerator, Format: DXGI_FORMAT, pFlags: *u32) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.CheckVideoProcessorFormat(this, Format, pFlags); }
ID3D11VideoProcessorEnumerator_GetVideoProcessorCaps :: inline (this: *ID3D11VideoProcessorEnumerator, pCaps: *D3D11_VIDEO_PROCESSOR_CAPS) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.GetVideoProcessorCaps(this, pCaps); }
ID3D11VideoProcessorEnumerator_GetVideoProcessorRateConversionCaps :: inline (this: *ID3D11VideoProcessorEnumerator, TypeIndex: u32, pCaps: *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.GetVideoProcessorRateConversionCaps(this, TypeIndex, pCaps); }
ID3D11VideoProcessorEnumerator_GetVideoProcessorCustomRate :: inline (this: *ID3D11VideoProcessorEnumerator, TypeIndex: u32, CustomRateIndex: u32, pRate: *D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.GetVideoProcessorCustomRate(this, TypeIndex, CustomRateIndex, pRate); }
ID3D11VideoProcessorEnumerator_GetVideoProcessorFilterRange :: inline (this: *ID3D11VideoProcessorEnumerator, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pRange: *D3D11_VIDEO_PROCESSOR_FILTER_RANGE) -> HRESULT { return this.id3d11videoprocessorenumerator_vtable.GetVideoProcessorFilterRange(this, Filter, pRange); }

vtable :: (obj: *ID3D11VideoProcessorEnumerator) -> *ID3D11VideoProcessorEnumerator_VTable { return obj.id3d11videoprocessorenumerator_vtable; }


D3D11_VIDEO_COLOR_RGBA :: struct {
    R: float;
    G: float;
    B: float;
    A: float;
}

D3D11_VIDEO_COLOR_YCbCrA :: struct {
    Y:  float;
    Cb: float;
    Cr: float;
    A:  float;
}

D3D11_VIDEO_COLOR :: struct {
    union {
        YCbCr: D3D11_VIDEO_COLOR_YCbCrA;
        RGBA:  D3D11_VIDEO_COLOR_RGBA;
    }
}

D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE :: enum s32 {
    UNDEFINED :: 0;
    _16_235   :: 1;
    _0_255    :: 2;

    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED :: UNDEFINED;
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235    :: _16_235;
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255     :: _0_255;
}

D3D11_VIDEO_PROCESSOR_COLOR_SPACE :: struct {
    __bitfield: u32;
    /* 
        Usage: u32; /* 1 bits */
        RGB_Range: u32; /* 1 bits */
        YCbCr_Matrix: u32; /* 1 bits */
        YCbCr_xvYCC: u32; /* 1 bits */
        Nominal_Range: u32; /* 2 bits */
        Reserved: u32; /* 26 bits */;
    */
}

D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE :: enum s32 {
    OPAQUE        :: 0;
    BACKGROUND    :: 1;
    DESTINATION   :: 2;
    SOURCE_STREAM :: 3;

    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE        :: OPAQUE;
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND    :: BACKGROUND;
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION   :: DESTINATION;
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM :: SOURCE_STREAM;
}

D3D11_VIDEO_PROCESSOR_OUTPUT_RATE :: enum s32 {
    NORMAL :: 0;
    HALF   :: 1;
    CUSTOM :: 2;

    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL :: NORMAL;
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF   :: HALF;
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM :: CUSTOM;
}

D3D11_VIDEO_PROCESSOR_STEREO_FORMAT :: enum s32 {
    MONO               :: 0;
    HORIZONTAL         :: 1;
    VERTICAL           :: 2;
    SEPARATE           :: 3;
    MONO_OFFSET        :: 4;
    ROW_INTERLEAVED    :: 5;
    COLUMN_INTERLEAVED :: 6;
    CHECKERBOARD       :: 7;

    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO               :: MONO;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL         :: HORIZONTAL;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL           :: VERTICAL;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE           :: SEPARATE;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET        :: MONO_OFFSET;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED    :: ROW_INTERLEAVED;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED :: COLUMN_INTERLEAVED;
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD       :: CHECKERBOARD;
}

D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE :: enum s32 {
    NONE   :: 0;
    FRAME0 :: 1;
    FRAME1 :: 2;

    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE   :: NONE;
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 :: FRAME0;
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 :: FRAME1;
}

D3D11_VIDEO_PROCESSOR_ROTATION :: enum s32 {
    IDENTITY :: 0;
    _90      :: 1;
    _180     :: 2;
    _270     :: 3;

    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY :: IDENTITY;
    D3D11_VIDEO_PROCESSOR_ROTATION_90       :: _90;
    D3D11_VIDEO_PROCESSOR_ROTATION_180      :: _180;
    D3D11_VIDEO_PROCESSOR_ROTATION_270      :: _270;
}

D3D11_VIDEO_PROCESSOR_STREAM :: struct {
    Enable:                BOOL;
    OutputIndex:           u32;
    InputFrameOrField:     u32;
    PastFrames:            u32;
    FutureFrames:          u32;

    ppPastSurfaces:        **ID3D11VideoProcessorInputView;
    pInputSurface:         *ID3D11VideoProcessorInputView;

    ppFutureSurfaces:      **ID3D11VideoProcessorInputView;

    ppPastSurfacesRight:   **ID3D11VideoProcessorInputView;
    pInputSurfaceRight:    *ID3D11VideoProcessorInputView;

    ppFutureSurfacesRight: **ID3D11VideoProcessorInputView;
}


ID3D11VideoProcessor_UUID :: "1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C";
ID3D11VideoProcessor :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11videoprocessor_vtable: *ID3D11VideoProcessor_VTable;
}
ID3D11VideoProcessor_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetContentDesc: (this: *ID3D11VideoProcessor, pDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) -> void #cpp_method;
    GetRateConversionCaps: (this: *ID3D11VideoProcessor, pCaps: *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) -> void #cpp_method;
}
ID3D11VideoProcessor_GetContentDesc :: inline (this: *ID3D11VideoProcessor, pDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) { this.id3d11videoprocessor_vtable.GetContentDesc(this, pDesc); }
ID3D11VideoProcessor_GetRateConversionCaps :: inline (this: *ID3D11VideoProcessor, pCaps: *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) { this.id3d11videoprocessor_vtable.GetRateConversionCaps(this, pCaps); }

vtable :: (obj: *ID3D11VideoProcessor) -> *ID3D11VideoProcessor_VTable { return obj.id3d11videoprocessor_vtable; }


D3D11_OMAC :: struct {
    Omac: [16] u8;
}

D3D11_AUTHENTICATED_CHANNEL_TYPE :: enum s32 {
    D3D11           :: 1;
    DRIVER_SOFTWARE :: 2;
    DRIVER_HARDWARE :: 3;

    D3D11_AUTHENTICATED_CHANNEL_D3D11           :: D3D11;
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE :: DRIVER_SOFTWARE;
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE :: DRIVER_HARDWARE;
}


ID3D11AuthenticatedChannel_UUID :: "3015A308-DCBD-47aa-A747-192486D14D4A";
ID3D11AuthenticatedChannel :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11authenticatedchannel_vtable: *ID3D11AuthenticatedChannel_VTable;
}
ID3D11AuthenticatedChannel_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetCertificateSize: (this: *ID3D11AuthenticatedChannel, pCertificateSize: *u32) -> HRESULT #cpp_method;
    GetCertificate: (this: *ID3D11AuthenticatedChannel, CertificateSize: u32, pCertificate: *u8) -> HRESULT #cpp_method;
    GetChannelHandle: (this: *ID3D11AuthenticatedChannel, pChannelHandle: *HANDLE) -> void #cpp_method;
}
ID3D11AuthenticatedChannel_GetCertificateSize :: inline (this: *ID3D11AuthenticatedChannel, pCertificateSize: *u32) -> HRESULT { return this.id3d11authenticatedchannel_vtable.GetCertificateSize(this, pCertificateSize); }
ID3D11AuthenticatedChannel_GetCertificate :: inline (this: *ID3D11AuthenticatedChannel, CertificateSize: u32, pCertificate: *u8) -> HRESULT { return this.id3d11authenticatedchannel_vtable.GetCertificate(this, CertificateSize, pCertificate); }
ID3D11AuthenticatedChannel_GetChannelHandle :: inline (this: *ID3D11AuthenticatedChannel, pChannelHandle: *HANDLE) { this.id3d11authenticatedchannel_vtable.GetChannelHandle(this, pChannelHandle); }

vtable :: (obj: *ID3D11AuthenticatedChannel) -> *ID3D11AuthenticatedChannel_VTable { return obj.id3d11authenticatedchannel_vtable; }


D3D11_AUTHENTICATED_QUERY_PROTECTION: GUID;
D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE: GUID;
D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE: GUID;
D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION: GUID;
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT: GUID;
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS: GUID;
D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT: GUID;
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT: GUID;
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID: GUID;
D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES: GUID;
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT: GUID;
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID: GUID;
D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE: GUID;
D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE: GUID;
D3D11_AUTHENTICATED_CONFIGURE_PROTECTION: GUID;
D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION: GUID;
D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE: GUID;
D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE: GUID;
D3D11_AUTHENTICATED_QUERY_INPUT :: struct {
    QueryType:      GUID;
    hChannel:       HANDLE;
    SequenceNumber: u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT :: struct {
    omac:           D3D11_OMAC;
    QueryType:      GUID;
    hChannel:       HANDLE;
    SequenceNumber: u32;
    ReturnCode:     HRESULT;
}

D3D11_AUTHENTICATED_PROTECTION_FLAGS :: union {
    __MIDL___MIDL_itf_d3d11_0000_0034_0001 :: struct {
        __bitfield: u32;
        /* 
            ProtectionEnabled: u32; /* 1 bits */
            OverlayOrFullscreenRequired: u32; /* 1 bits */
            Reserved: u32; /* 30 bits */;
        */
    }

    Flags: __MIDL___MIDL_itf_d3d11_0000_0034_0001;
    Value: u32;
}

D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT :: struct {
    Output:          D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProtectionFlags: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}

D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT :: struct {
    Output:      D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE;
}

D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT :: struct {
    Output:       D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle: HANDLE;
}

D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT :: struct {
    Input:         D3D11_AUTHENTICATED_QUERY_INPUT;
    DecoderHandle: HANDLE;
}

D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT :: struct {
    Output:              D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DecoderHandle:       HANDLE;
    CryptoSessionHandle: HANDLE;
    DeviceHandle:        HANDLE;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT :: struct {
    Output:                               D3D11_AUTHENTICATED_QUERY_OUTPUT;
    RestrictedSharedResourceProcessCount: u32;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT :: struct {
    Input:        D3D11_AUTHENTICATED_QUERY_INPUT;
    ProcessIndex: u32;
}

D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE :: enum s32 {
    UNKNOWN :: 0;
    DWM     :: 1;
    HANDLE  :: 2;

    D3D11_PROCESSIDTYPE_UNKNOWN :: UNKNOWN;
    D3D11_PROCESSIDTYPE_DWM     :: DWM;
    D3D11_PROCESSIDTYPE_HANDLE  :: HANDLE;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT :: struct {
    Output:            D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProcessIndex:      u32;
    ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle:     HANDLE;
}

D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT :: struct {
    Output:                                   D3D11_AUTHENTICATED_QUERY_OUTPUT;
    UnrestrictedProtectedSharedResourceCount: u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT :: struct {
    Input:               D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle:        HANDLE;
    CryptoSessionHandle: HANDLE;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT :: struct {
    Output:              D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle:        HANDLE;
    CryptoSessionHandle: HANDLE;
    OutputIDCount:       u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT :: struct {
    Input:               D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle:        HANDLE;
    CryptoSessionHandle: HANDLE;
    OutputIDIndex:       u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT :: struct {
    Output:              D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle:        HANDLE;
    CryptoSessionHandle: HANDLE;
    OutputIDIndex:       u32;
    OutputID:            u64;
}

D3D11_BUS_TYPE :: enum s32 {
    OTHER                                                           :: 0;
    PCI                                                             :: 1;
    PCIX                                                            :: 2;
    PCIEXPRESS                                                      :: 3;
    AGP                                                             :: 4;
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET                       :: 65536;
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP          :: 131072;
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET        :: 196608;
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR                :: 262144;
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE :: 327680;
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD                            :: -2147483648;

    D3D11_BUS_TYPE_OTHER      :: OTHER;
    D3D11_BUS_TYPE_PCI        :: PCI;
    D3D11_BUS_TYPE_PCIX       :: PCIX;
    D3D11_BUS_TYPE_PCIEXPRESS :: PCIEXPRESS;
    D3D11_BUS_TYPE_AGP        :: AGP;
}

D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT :: struct {
    Output:                          D3D11_AUTHENTICATED_QUERY_OUTPUT;
    BusType:                         D3D11_BUS_TYPE;
    AccessibleInContiguousBlocks:    BOOL;
    AccessibleInNonContiguousBlocks: BOOL;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT :: D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT;

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT :: struct {
    Output:              D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidCount: u32;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT :: struct {
    Input:               D3D11_AUTHENTICATED_QUERY_INPUT;
    EncryptionGuidIndex: u32;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT :: struct {
    Output:              D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidIndex: u32;
    EncryptionGuid:      GUID;
}

D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT :: struct {
    Output:         D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuid: GUID;
}

D3D11_AUTHENTICATED_CONFIGURE_INPUT :: struct {
    omac:           D3D11_OMAC;
    ConfigureType:  GUID;
    hChannel:       HANDLE;
    SequenceNumber: u32;
}

D3D11_AUTHENTICATED_CONFIGURE_OUTPUT :: struct {
    omac:           D3D11_OMAC;
    ConfigureType:  GUID;
    hChannel:       HANDLE;
    SequenceNumber: u32;
    ReturnCode:     HRESULT;
}

D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT :: struct {
    Parameters:             D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    StartSequenceQuery:     u32;
    StartSequenceConfigure: u32;
}

D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT :: struct {
    Parameters:  D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    Protections: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}

D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT :: struct {
    Parameters:          D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    DecoderHandle:       HANDLE;
    CryptoSessionHandle: HANDLE;
    DeviceHandle:        HANDLE;
}

D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT :: struct {
    Parameters:    D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    ProcessType:   D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle: HANDLE;
    AllowAccess:   BOOL;
}

D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT :: struct {
    Parameters:     D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    EncryptionGuid: GUID;
}

D3D11_KEY_EXCHANGE_RSAES_OAEP: GUID;


ID3D11CryptoSession_UUID :: "9B32F9AD-BDCC-40a6-A39D-D5C865845720";
ID3D11CryptoSession :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11cryptosession_vtable: *ID3D11CryptoSession_VTable;
}
ID3D11CryptoSession_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetCryptoType: (this: *ID3D11CryptoSession, pCryptoType: *GUID) -> void #cpp_method;
    GetDecoderProfile: (this: *ID3D11CryptoSession, pDecoderProfile: *GUID) -> void #cpp_method;
    GetCertificateSize: (this: *ID3D11CryptoSession, pCertificateSize: *u32) -> HRESULT #cpp_method;
    GetCertificate: (this: *ID3D11CryptoSession, CertificateSize: u32, pCertificate: *u8) -> HRESULT #cpp_method;
    GetCryptoSessionHandle: (this: *ID3D11CryptoSession, pCryptoSessionHandle: *HANDLE) -> void #cpp_method;
}
ID3D11CryptoSession_GetCryptoType :: inline (this: *ID3D11CryptoSession, pCryptoType: *GUID) { this.id3d11cryptosession_vtable.GetCryptoType(this, pCryptoType); }
ID3D11CryptoSession_GetDecoderProfile :: inline (this: *ID3D11CryptoSession, pDecoderProfile: *GUID) { this.id3d11cryptosession_vtable.GetDecoderProfile(this, pDecoderProfile); }
ID3D11CryptoSession_GetCertificateSize :: inline (this: *ID3D11CryptoSession, pCertificateSize: *u32) -> HRESULT { return this.id3d11cryptosession_vtable.GetCertificateSize(this, pCertificateSize); }
ID3D11CryptoSession_GetCertificate :: inline (this: *ID3D11CryptoSession, CertificateSize: u32, pCertificate: *u8) -> HRESULT { return this.id3d11cryptosession_vtable.GetCertificate(this, CertificateSize, pCertificate); }
ID3D11CryptoSession_GetCryptoSessionHandle :: inline (this: *ID3D11CryptoSession, pCryptoSessionHandle: *HANDLE) { this.id3d11cryptosession_vtable.GetCryptoSessionHandle(this, pCryptoSessionHandle); }

vtable :: (obj: *ID3D11CryptoSession) -> *ID3D11CryptoSession_VTable { return obj.id3d11cryptosession_vtable; }


D3D11_VDOV_DIMENSION :: enum s32 {
    UNKNOWN   :: 0;
    TEXTURE2D :: 1;

    D3D11_VDOV_DIMENSION_UNKNOWN   :: UNKNOWN;
    D3D11_VDOV_DIMENSION_TEXTURE2D :: TEXTURE2D;
}

D3D11_TEX2D_VDOV :: struct {
    ArraySlice: u32;
}

D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC :: struct {
    DecodeProfile: GUID;
    ViewDimension: D3D11_VDOV_DIMENSION;
    union {
        Texture2D: D3D11_TEX2D_VDOV;
    }
}


ID3D11VideoDecoderOutputView_UUID :: "C2931AEA-2A85-4f20-860F-FBA1FD256E18";
ID3D11VideoDecoderOutputView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11videodecoderoutputview_vtable: *ID3D11VideoDecoderOutputView_VTable;
}
ID3D11VideoDecoderOutputView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11VideoDecoderOutputView, pDesc: *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) -> void #cpp_method;
}
ID3D11VideoDecoderOutputView_GetDesc :: inline (this: *ID3D11VideoDecoderOutputView, pDesc: *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) { this.id3d11videodecoderoutputview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11VideoDecoderOutputView) -> *ID3D11VideoDecoderOutputView_VTable { return obj.id3d11videodecoderoutputview_vtable; }


D3D11_VPIV_DIMENSION :: enum s32 {
    UNKNOWN   :: 0;
    TEXTURE2D :: 1;

    D3D11_VPIV_DIMENSION_UNKNOWN   :: UNKNOWN;
    D3D11_VPIV_DIMENSION_TEXTURE2D :: TEXTURE2D;
}

D3D11_TEX2D_VPIV :: struct {
    MipSlice:   u32;
    ArraySlice: u32;
}

D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC :: struct {
    FourCC:        u32;
    ViewDimension: D3D11_VPIV_DIMENSION;
    union {
        Texture2D: D3D11_TEX2D_VPIV;
    }
}


ID3D11VideoProcessorInputView_UUID :: "11EC5A5F-51DC-4945-AB34-6E8C21300EA5";
ID3D11VideoProcessorInputView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11videoprocessorinputview_vtable: *ID3D11VideoProcessorInputView_VTable;
}
ID3D11VideoProcessorInputView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11VideoProcessorInputView, pDesc: *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) -> void #cpp_method;
}
ID3D11VideoProcessorInputView_GetDesc :: inline (this: *ID3D11VideoProcessorInputView, pDesc: *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) { this.id3d11videoprocessorinputview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11VideoProcessorInputView) -> *ID3D11VideoProcessorInputView_VTable { return obj.id3d11videoprocessorinputview_vtable; }


D3D11_VPOV_DIMENSION :: enum s32 {
    UNKNOWN        :: 0;
    TEXTURE2D      :: 1;
    TEXTURE2DARRAY :: 2;

    D3D11_VPOV_DIMENSION_UNKNOWN        :: UNKNOWN;
    D3D11_VPOV_DIMENSION_TEXTURE2D      :: TEXTURE2D;
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY :: TEXTURE2DARRAY;
}

D3D11_TEX2D_VPOV :: struct {
    MipSlice: u32;
}

D3D11_TEX2D_ARRAY_VPOV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC :: struct {
    ViewDimension: D3D11_VPOV_DIMENSION;
    union {
        Texture2D:      D3D11_TEX2D_VPOV;
        Texture2DArray: D3D11_TEX2D_ARRAY_VPOV;
    }
}


ID3D11VideoProcessorOutputView_UUID :: "A048285E-25A9-4527-BD93-D68B68C44254";
ID3D11VideoProcessorOutputView :: struct {
    #as using id3d11view: ID3D11View;
    #place id3d11view; id3d11videoprocessoroutputview_vtable: *ID3D11VideoProcessorOutputView_VTable;
}
ID3D11VideoProcessorOutputView_VTable :: struct #type_info_none {
    using id3d11view: ID3D11View_VTable;
    GetDesc: (this: *ID3D11VideoProcessorOutputView, pDesc: *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) -> void #cpp_method;
}
ID3D11VideoProcessorOutputView_GetDesc :: inline (this: *ID3D11VideoProcessorOutputView, pDesc: *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) { this.id3d11videoprocessoroutputview_vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11VideoProcessorOutputView) -> *ID3D11VideoProcessorOutputView_VTable { return obj.id3d11videoprocessoroutputview_vtable; }



ID3D11VideoContext_UUID :: "61F21C45-3C0E-4a74-9CEA-67100D9AD5E4";
ID3D11VideoContext :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
    #place id3d11devicechild; id3d11videocontext_vtable: *ID3D11VideoContext_VTable;
}
ID3D11VideoContext_VTable :: struct #type_info_none {
    using id3d11devicechild: ID3D11DeviceChild_VTable;
    GetDecoderBuffer: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize: *u32, ppBuffer: **void) -> HRESULT #cpp_method;
    ReleaseDecoderBuffer: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT #cpp_method;
    DecoderBeginFrame: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, pView: *ID3D11VideoDecoderOutputView, ContentKeySize: u32, pContentKey: *void) -> HRESULT #cpp_method;
    DecoderEndFrame: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder) -> HRESULT #cpp_method;
    SubmitDecoderBuffers: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, NumBuffers: u32, pBufferDesc: *D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT #cpp_method;
    DecoderExtension: (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, pExtensionData: *D3D11_VIDEO_DECODER_EXTENSION) -> APP_DEPRECATED_HRESULT #cpp_method;
    VideoProcessorSetOutputTargetRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorSetOutputBackgroundColor: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, YCbCr: BOOL, pColor: *D3D11_VIDEO_COLOR) -> void #cpp_method;
    VideoProcessorSetOutputColorSpace: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) -> void #cpp_method;
    VideoProcessorSetOutputAlphaFillMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex: u32) -> void #cpp_method;
    VideoProcessorSetOutputConstriction: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL, Size: SIZE) -> void #cpp_method;
    VideoProcessorSetOutputStereoMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL) -> void #cpp_method;
    VideoProcessorSetOutputExtension: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT #cpp_method;
    VideoProcessorGetOutputTargetRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enabled: *BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorGetOutputBackgroundColor: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pYCbCr: *BOOL, pColor: *D3D11_VIDEO_COLOR) -> void #cpp_method;
    VideoProcessorGetOutputColorSpace: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) -> void #cpp_method;
    VideoProcessorGetOutputAlphaFillMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pAlphaFillMode: *D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex: *u32) -> void #cpp_method;
    VideoProcessorGetOutputConstriction: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pEnabled: *BOOL, pSize: *SIZE) -> void #cpp_method;
    VideoProcessorGetOutputStereoMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pEnabled: *BOOL) -> void #cpp_method;
    VideoProcessorGetOutputExtension: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT #cpp_method;
    VideoProcessorSetStreamFrameFormat: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, FrameFormat: D3D11_VIDEO_FRAME_FORMAT) -> void #cpp_method;
    VideoProcessorSetStreamColorSpace: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) -> void #cpp_method;
    VideoProcessorSetStreamOutputRate: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame: BOOL, pCustomRate: *DXGI_RATIONAL) -> void #cpp_method;
    VideoProcessorSetStreamSourceRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorSetStreamDestRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorSetStreamAlpha: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Alpha: float) -> void #cpp_method;
    VideoProcessorSetStreamPalette: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: *u32) -> void #cpp_method;
    VideoProcessorSetStreamPixelAspectRatio: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pSourceAspectRatio: *DXGI_RATIONAL, pDestinationAspectRatio: *DXGI_RATIONAL) -> void #cpp_method;
    VideoProcessorSetStreamLumaKey: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Lower: float, Upper: float) -> void #cpp_method;
    VideoProcessorSetStreamStereoFormat: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: s32) -> void #cpp_method;
    VideoProcessorSetStreamAutoProcessingMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL) -> void #cpp_method;
    VideoProcessorSetStreamFilter: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, Enable: BOOL, Level: s32) -> void #cpp_method;
    VideoProcessorSetStreamExtension: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT #cpp_method;
    VideoProcessorGetStreamFrameFormat: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pFrameFormat: *D3D11_VIDEO_FRAME_FORMAT) -> void #cpp_method;
    VideoProcessorGetStreamColorSpace: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) -> void #cpp_method;
    VideoProcessorGetStreamOutputRate: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pOutputRate: *D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame: *BOOL, pCustomRate: *DXGI_RATIONAL) -> void #cpp_method;
    VideoProcessorGetStreamSourceRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorGetStreamDestRect: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pRect: *RECT) -> void #cpp_method;
    VideoProcessorGetStreamAlpha: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pAlpha: *float) -> void #cpp_method;
    VideoProcessorGetStreamPalette: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: *u32) -> void #cpp_method;
    VideoProcessorGetStreamPixelAspectRatio: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pSourceAspectRatio: *DXGI_RATIONAL, pDestinationAspectRatio: *DXGI_RATIONAL) -> void #cpp_method;
    VideoProcessorGetStreamLumaKey: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pLower: *float, pUpper: *float) -> void #cpp_method;
    VideoProcessorGetStreamStereoFormat: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pFormat: *D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0: *BOOL, pBaseViewFrame0: *BOOL, pFlipMode: *D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: *s32) -> void #cpp_method;
    VideoProcessorGetStreamAutoProcessingMode: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL) -> void #cpp_method;
    VideoProcessorGetStreamFilter: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pEnabled: *BOOL, pLevel: *s32) -> void #cpp_method;
    VideoProcessorGetStreamExtension: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT #cpp_method;
    VideoProcessorBlt: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pView: *ID3D11VideoProcessorOutputView, OutputFrame: u32, StreamCount: u32, pStreams: *D3D11_VIDEO_PROCESSOR_STREAM) -> HRESULT #cpp_method;
    NegotiateCryptoSessionKeyExchange: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    EncryptionBlt: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, pSrcSurface: *ID3D11Texture2D, pDstSurface: *ID3D11Texture2D, IVSize: u32, pIV: *void) -> void #cpp_method;
    DecryptionBlt: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, pSrcSurface: *ID3D11Texture2D, pDstSurface: *ID3D11Texture2D, pEncryptedBlockInfo: *D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: u32, pContentKey: *void, IVSize: u32, pIV: *void) -> void #cpp_method;
    StartSessionKeyRefresh: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, RandomNumberSize: u32, pRandomNumber: *void) -> void #cpp_method;
    FinishSessionKeyRefresh: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession) -> void #cpp_method;
    GetEncryptionBltKey: (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, KeySize: u32, pReadbackKey: *void) -> HRESULT #cpp_method;
    NegotiateAuthenticatedChannelKeyExchange: (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    QueryAuthenticatedChannel: (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, InputSize: u32, pInput: *void, OutputSize: u32, pOutput: *void) -> HRESULT #cpp_method;
    ConfigureAuthenticatedChannel: (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, InputSize: u32, pInput: *void, pOutput: *D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) -> HRESULT #cpp_method;
    VideoProcessorSetStreamRotation: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Rotation: D3D11_VIDEO_PROCESSOR_ROTATION) -> void #cpp_method;
    VideoProcessorGetStreamRotation: (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pRotation: *D3D11_VIDEO_PROCESSOR_ROTATION) -> void #cpp_method;
}
ID3D11VideoContext_GetDecoderBuffer :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize: *u32, ppBuffer: **void) -> HRESULT { return this.id3d11videocontext_vtable.GetDecoderBuffer(this, pDecoder, Type, pBufferSize, ppBuffer); }
ID3D11VideoContext_ReleaseDecoderBuffer :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT { return this.id3d11videocontext_vtable.ReleaseDecoderBuffer(this, pDecoder, Type); }
ID3D11VideoContext_DecoderBeginFrame :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, pView: *ID3D11VideoDecoderOutputView, ContentKeySize: u32, pContentKey: *void) -> HRESULT { return this.id3d11videocontext_vtable.DecoderBeginFrame(this, pDecoder, pView, ContentKeySize, pContentKey); }
ID3D11VideoContext_DecoderEndFrame :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder) -> HRESULT { return this.id3d11videocontext_vtable.DecoderEndFrame(this, pDecoder); }
ID3D11VideoContext_SubmitDecoderBuffers :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, NumBuffers: u32, pBufferDesc: *D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT { return this.id3d11videocontext_vtable.SubmitDecoderBuffers(this, pDecoder, NumBuffers, pBufferDesc); }
ID3D11VideoContext_DecoderExtension :: inline (this: *ID3D11VideoContext, pDecoder: *ID3D11VideoDecoder, pExtensionData: *D3D11_VIDEO_DECODER_EXTENSION) -> APP_DEPRECATED_HRESULT { return this.id3d11videocontext_vtable.DecoderExtension(this, pDecoder, pExtensionData); }
ID3D11VideoContext_VideoProcessorSetOutputTargetRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorSetOutputTargetRect(this, pVideoProcessor, Enable, pRect); }
ID3D11VideoContext_VideoProcessorSetOutputBackgroundColor :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, YCbCr: BOOL, pColor: *D3D11_VIDEO_COLOR) { this.id3d11videocontext_vtable.VideoProcessorSetOutputBackgroundColor(this, pVideoProcessor, YCbCr, pColor); }
ID3D11VideoContext_VideoProcessorSetOutputColorSpace :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) { this.id3d11videocontext_vtable.VideoProcessorSetOutputColorSpace(this, pVideoProcessor, pColorSpace); }
ID3D11VideoContext_VideoProcessorSetOutputAlphaFillMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex: u32) { this.id3d11videocontext_vtable.VideoProcessorSetOutputAlphaFillMode(this, pVideoProcessor, AlphaFillMode, StreamIndex); }
ID3D11VideoContext_VideoProcessorSetOutputConstriction :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL, Size: SIZE) { this.id3d11videocontext_vtable.VideoProcessorSetOutputConstriction(this, pVideoProcessor, Enable, Size); }
ID3D11VideoContext_VideoProcessorSetOutputStereoMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enable: BOOL) { this.id3d11videocontext_vtable.VideoProcessorSetOutputStereoMode(this, pVideoProcessor, Enable); }
ID3D11VideoContext_VideoProcessorSetOutputExtension :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT { return this.id3d11videocontext_vtable.VideoProcessorSetOutputExtension(this, pVideoProcessor, pExtensionGuid, DataSize, pData); }
ID3D11VideoContext_VideoProcessorGetOutputTargetRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, Enabled: *BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorGetOutputTargetRect(this, pVideoProcessor, Enabled, pRect); }
ID3D11VideoContext_VideoProcessorGetOutputBackgroundColor :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pYCbCr: *BOOL, pColor: *D3D11_VIDEO_COLOR) { this.id3d11videocontext_vtable.VideoProcessorGetOutputBackgroundColor(this, pVideoProcessor, pYCbCr, pColor); }
ID3D11VideoContext_VideoProcessorGetOutputColorSpace :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) { this.id3d11videocontext_vtable.VideoProcessorGetOutputColorSpace(this, pVideoProcessor, pColorSpace); }
ID3D11VideoContext_VideoProcessorGetOutputAlphaFillMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pAlphaFillMode: *D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex: *u32) { this.id3d11videocontext_vtable.VideoProcessorGetOutputAlphaFillMode(this, pVideoProcessor, pAlphaFillMode, pStreamIndex); }
ID3D11VideoContext_VideoProcessorGetOutputConstriction :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pEnabled: *BOOL, pSize: *SIZE) { this.id3d11videocontext_vtable.VideoProcessorGetOutputConstriction(this, pVideoProcessor, pEnabled, pSize); }
ID3D11VideoContext_VideoProcessorGetOutputStereoMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pEnabled: *BOOL) { this.id3d11videocontext_vtable.VideoProcessorGetOutputStereoMode(this, pVideoProcessor, pEnabled); }
ID3D11VideoContext_VideoProcessorGetOutputExtension :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT { return this.id3d11videocontext_vtable.VideoProcessorGetOutputExtension(this, pVideoProcessor, pExtensionGuid, DataSize, pData); }
ID3D11VideoContext_VideoProcessorSetStreamFrameFormat :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, FrameFormat: D3D11_VIDEO_FRAME_FORMAT) { this.id3d11videocontext_vtable.VideoProcessorSetStreamFrameFormat(this, pVideoProcessor, StreamIndex, FrameFormat); }
ID3D11VideoContext_VideoProcessorSetStreamColorSpace :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) { this.id3d11videocontext_vtable.VideoProcessorSetStreamColorSpace(this, pVideoProcessor, StreamIndex, pColorSpace); }
ID3D11VideoContext_VideoProcessorSetStreamOutputRate :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame: BOOL, pCustomRate: *DXGI_RATIONAL) { this.id3d11videocontext_vtable.VideoProcessorSetStreamOutputRate(this, pVideoProcessor, StreamIndex, OutputRate, RepeatFrame, pCustomRate); }
ID3D11VideoContext_VideoProcessorSetStreamSourceRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorSetStreamSourceRect(this, pVideoProcessor, StreamIndex, Enable, pRect); }
ID3D11VideoContext_VideoProcessorSetStreamDestRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorSetStreamDestRect(this, pVideoProcessor, StreamIndex, Enable, pRect); }
ID3D11VideoContext_VideoProcessorSetStreamAlpha :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Alpha: float) { this.id3d11videocontext_vtable.VideoProcessorSetStreamAlpha(this, pVideoProcessor, StreamIndex, Enable, Alpha); }
ID3D11VideoContext_VideoProcessorSetStreamPalette :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: *u32) { this.id3d11videocontext_vtable.VideoProcessorSetStreamPalette(this, pVideoProcessor, StreamIndex, Count, pEntries); }
ID3D11VideoContext_VideoProcessorSetStreamPixelAspectRatio :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pSourceAspectRatio: *DXGI_RATIONAL, pDestinationAspectRatio: *DXGI_RATIONAL) { this.id3d11videocontext_vtable.VideoProcessorSetStreamPixelAspectRatio(this, pVideoProcessor, StreamIndex, Enable, pSourceAspectRatio, pDestinationAspectRatio); }
ID3D11VideoContext_VideoProcessorSetStreamLumaKey :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Lower: float, Upper: float) { this.id3d11videocontext_vtable.VideoProcessorSetStreamLumaKey(this, pVideoProcessor, StreamIndex, Enable, Lower, Upper); }
ID3D11VideoContext_VideoProcessorSetStreamStereoFormat :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: s32) { this.id3d11videocontext_vtable.VideoProcessorSetStreamStereoFormat(this, pVideoProcessor, StreamIndex, Enable, Format, LeftViewFrame0, BaseViewFrame0, FlipMode, MonoOffset); }
ID3D11VideoContext_VideoProcessorSetStreamAutoProcessingMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL) { this.id3d11videocontext_vtable.VideoProcessorSetStreamAutoProcessingMode(this, pVideoProcessor, StreamIndex, Enable); }
ID3D11VideoContext_VideoProcessorSetStreamFilter :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, Enable: BOOL, Level: s32) { this.id3d11videocontext_vtable.VideoProcessorSetStreamFilter(this, pVideoProcessor, StreamIndex, Filter, Enable, Level); }
ID3D11VideoContext_VideoProcessorSetStreamExtension :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT { return this.id3d11videocontext_vtable.VideoProcessorSetStreamExtension(this, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData); }
ID3D11VideoContext_VideoProcessorGetStreamFrameFormat :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pFrameFormat: *D3D11_VIDEO_FRAME_FORMAT) { this.id3d11videocontext_vtable.VideoProcessorGetStreamFrameFormat(this, pVideoProcessor, StreamIndex, pFrameFormat); }
ID3D11VideoContext_VideoProcessorGetStreamColorSpace :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) { this.id3d11videocontext_vtable.VideoProcessorGetStreamColorSpace(this, pVideoProcessor, StreamIndex, pColorSpace); }
ID3D11VideoContext_VideoProcessorGetStreamOutputRate :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pOutputRate: *D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame: *BOOL, pCustomRate: *DXGI_RATIONAL) { this.id3d11videocontext_vtable.VideoProcessorGetStreamOutputRate(this, pVideoProcessor, StreamIndex, pOutputRate, pRepeatFrame, pCustomRate); }
ID3D11VideoContext_VideoProcessorGetStreamSourceRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorGetStreamSourceRect(this, pVideoProcessor, StreamIndex, pEnabled, pRect); }
ID3D11VideoContext_VideoProcessorGetStreamDestRect :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pRect: *RECT) { this.id3d11videocontext_vtable.VideoProcessorGetStreamDestRect(this, pVideoProcessor, StreamIndex, pEnabled, pRect); }
ID3D11VideoContext_VideoProcessorGetStreamAlpha :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pAlpha: *float) { this.id3d11videocontext_vtable.VideoProcessorGetStreamAlpha(this, pVideoProcessor, StreamIndex, pEnabled, pAlpha); }
ID3D11VideoContext_VideoProcessorGetStreamPalette :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: *u32) { this.id3d11videocontext_vtable.VideoProcessorGetStreamPalette(this, pVideoProcessor, StreamIndex, Count, pEntries); }
ID3D11VideoContext_VideoProcessorGetStreamPixelAspectRatio :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pSourceAspectRatio: *DXGI_RATIONAL, pDestinationAspectRatio: *DXGI_RATIONAL) { this.id3d11videocontext_vtable.VideoProcessorGetStreamPixelAspectRatio(this, pVideoProcessor, StreamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio); }
ID3D11VideoContext_VideoProcessorGetStreamLumaKey :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL, pLower: *float, pUpper: *float) { this.id3d11videocontext_vtable.VideoProcessorGetStreamLumaKey(this, pVideoProcessor, StreamIndex, pEnabled, pLower, pUpper); }
ID3D11VideoContext_VideoProcessorGetStreamStereoFormat :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pFormat: *D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0: *BOOL, pBaseViewFrame0: *BOOL, pFlipMode: *D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: *s32) { this.id3d11videocontext_vtable.VideoProcessorGetStreamStereoFormat(this, pVideoProcessor, StreamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, MonoOffset); }
ID3D11VideoContext_VideoProcessorGetStreamAutoProcessingMode :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnabled: *BOOL) { this.id3d11videocontext_vtable.VideoProcessorGetStreamAutoProcessingMode(this, pVideoProcessor, StreamIndex, pEnabled); }
ID3D11VideoContext_VideoProcessorGetStreamFilter :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pEnabled: *BOOL, pLevel: *s32) { this.id3d11videocontext_vtable.VideoProcessorGetStreamFilter(this, pVideoProcessor, StreamIndex, Filter, pEnabled, pLevel); }
ID3D11VideoContext_VideoProcessorGetStreamExtension :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *GUID, DataSize: u32, pData: *void) -> APP_DEPRECATED_HRESULT { return this.id3d11videocontext_vtable.VideoProcessorGetStreamExtension(this, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData); }
ID3D11VideoContext_VideoProcessorBlt :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, pView: *ID3D11VideoProcessorOutputView, OutputFrame: u32, StreamCount: u32, pStreams: *D3D11_VIDEO_PROCESSOR_STREAM) -> HRESULT { return this.id3d11videocontext_vtable.VideoProcessorBlt(this, pVideoProcessor, pView, OutputFrame, StreamCount, pStreams); }
ID3D11VideoContext_NegotiateCryptoSessionKeyExchange :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, DataSize: u32, pData: *void) -> HRESULT { return this.id3d11videocontext_vtable.NegotiateCryptoSessionKeyExchange(this, pCryptoSession, DataSize, pData); }
ID3D11VideoContext_EncryptionBlt :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, pSrcSurface: *ID3D11Texture2D, pDstSurface: *ID3D11Texture2D, IVSize: u32, pIV: *void) { this.id3d11videocontext_vtable.EncryptionBlt(this, pCryptoSession, pSrcSurface, pDstSurface, IVSize, pIV); }
ID3D11VideoContext_DecryptionBlt :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, pSrcSurface: *ID3D11Texture2D, pDstSurface: *ID3D11Texture2D, pEncryptedBlockInfo: *D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: u32, pContentKey: *void, IVSize: u32, pIV: *void) { this.id3d11videocontext_vtable.DecryptionBlt(this, pCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, ContentKeySize, pContentKey, IVSize, pIV); }
ID3D11VideoContext_StartSessionKeyRefresh :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, RandomNumberSize: u32, pRandomNumber: *void) { this.id3d11videocontext_vtable.StartSessionKeyRefresh(this, pCryptoSession, RandomNumberSize, pRandomNumber); }
ID3D11VideoContext_FinishSessionKeyRefresh :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession) { this.id3d11videocontext_vtable.FinishSessionKeyRefresh(this, pCryptoSession); }
ID3D11VideoContext_GetEncryptionBltKey :: inline (this: *ID3D11VideoContext, pCryptoSession: *ID3D11CryptoSession, KeySize: u32, pReadbackKey: *void) -> HRESULT { return this.id3d11videocontext_vtable.GetEncryptionBltKey(this, pCryptoSession, KeySize, pReadbackKey); }
ID3D11VideoContext_NegotiateAuthenticatedChannelKeyExchange :: inline (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, DataSize: u32, pData: *void) -> HRESULT { return this.id3d11videocontext_vtable.NegotiateAuthenticatedChannelKeyExchange(this, pChannel, DataSize, pData); }
ID3D11VideoContext_QueryAuthenticatedChannel :: inline (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, InputSize: u32, pInput: *void, OutputSize: u32, pOutput: *void) -> HRESULT { return this.id3d11videocontext_vtable.QueryAuthenticatedChannel(this, pChannel, InputSize, pInput, OutputSize, pOutput); }
ID3D11VideoContext_ConfigureAuthenticatedChannel :: inline (this: *ID3D11VideoContext, pChannel: *ID3D11AuthenticatedChannel, InputSize: u32, pInput: *void, pOutput: *D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) -> HRESULT { return this.id3d11videocontext_vtable.ConfigureAuthenticatedChannel(this, pChannel, InputSize, pInput, pOutput); }
ID3D11VideoContext_VideoProcessorSetStreamRotation :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Rotation: D3D11_VIDEO_PROCESSOR_ROTATION) { this.id3d11videocontext_vtable.VideoProcessorSetStreamRotation(this, pVideoProcessor, StreamIndex, Enable, Rotation); }
ID3D11VideoContext_VideoProcessorGetStreamRotation :: inline (this: *ID3D11VideoContext, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pRotation: *D3D11_VIDEO_PROCESSOR_ROTATION) { this.id3d11videocontext_vtable.VideoProcessorGetStreamRotation(this, pVideoProcessor, StreamIndex, pEnable, pRotation); }

vtable :: (obj: *ID3D11VideoContext) -> *ID3D11VideoContext_VTable { return obj.id3d11videocontext_vtable; }



ID3D11VideoDevice_UUID :: "10EC4D5B-975A-4689-B9E4-D0AAC30FE333";
ID3D11VideoDevice :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11videodevice_vtable: *ID3D11VideoDevice_VTable;
}
ID3D11VideoDevice_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    CreateVideoDecoder: (this: *ID3D11VideoDevice, pVideoDesc: *D3D11_VIDEO_DECODER_DESC, pConfig: *D3D11_VIDEO_DECODER_CONFIG, ppDecoder: **ID3D11VideoDecoder) -> HRESULT #cpp_method;
    CreateVideoProcessor: (this: *ID3D11VideoDevice, pEnum: *ID3D11VideoProcessorEnumerator, RateConversionIndex: u32, ppVideoProcessor: **ID3D11VideoProcessor) -> HRESULT #cpp_method;
    CreateAuthenticatedChannel: (this: *ID3D11VideoDevice, ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel: **ID3D11AuthenticatedChannel) -> HRESULT #cpp_method;
    CreateCryptoSession: (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, pKeyExchangeType: *GUID, ppCryptoSession: **ID3D11CryptoSession) -> HRESULT #cpp_method;
    CreateVideoDecoderOutputView: (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pDesc: *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView: **ID3D11VideoDecoderOutputView) -> HRESULT #cpp_method;
    CreateVideoProcessorInputView: (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pEnum: *ID3D11VideoProcessorEnumerator, pDesc: *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView: **ID3D11VideoProcessorInputView) -> HRESULT #cpp_method;
    CreateVideoProcessorOutputView: (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pEnum: *ID3D11VideoProcessorEnumerator, pDesc: *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView: **ID3D11VideoProcessorOutputView) -> HRESULT #cpp_method;
    CreateVideoProcessorEnumerator: (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum: **ID3D11VideoProcessorEnumerator) -> HRESULT #cpp_method;
    GetVideoDecoderProfileCount: (this: *ID3D11VideoDevice) -> u32 #cpp_method;
    GetVideoDecoderProfile: (this: *ID3D11VideoDevice, Index: u32, pDecoderProfile: *GUID) -> HRESULT #cpp_method;
    CheckVideoDecoderFormat: (this: *ID3D11VideoDevice, pDecoderProfile: *GUID, Format: DXGI_FORMAT, pSupported: *BOOL) -> HRESULT #cpp_method;
    GetVideoDecoderConfigCount: (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_DECODER_DESC, pCount: *u32) -> HRESULT #cpp_method;
    GetVideoDecoderConfig: (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_DECODER_DESC, Index: u32, pConfig: *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #cpp_method;
    GetContentProtectionCaps: (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, pCaps: *D3D11_VIDEO_CONTENT_PROTECTION_CAPS) -> HRESULT #cpp_method;
    CheckCryptoKeyExchange: (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, Index: u32, pKeyExchangeType: *GUID) -> HRESULT #cpp_method;
    SetPrivateData: (this: *ID3D11VideoDevice, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface: (this: *ID3D11VideoDevice, guid: *GUID, pData: *IUnknown) -> HRESULT #cpp_method;
}
ID3D11VideoDevice_CreateVideoDecoder :: inline (this: *ID3D11VideoDevice, pVideoDesc: *D3D11_VIDEO_DECODER_DESC, pConfig: *D3D11_VIDEO_DECODER_CONFIG, ppDecoder: **ID3D11VideoDecoder) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoDecoder(this, pVideoDesc, pConfig, ppDecoder); }
ID3D11VideoDevice_CreateVideoProcessor :: inline (this: *ID3D11VideoDevice, pEnum: *ID3D11VideoProcessorEnumerator, RateConversionIndex: u32, ppVideoProcessor: **ID3D11VideoProcessor) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoProcessor(this, pEnum, RateConversionIndex, ppVideoProcessor); }
ID3D11VideoDevice_CreateAuthenticatedChannel :: inline (this: *ID3D11VideoDevice, ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel: **ID3D11AuthenticatedChannel) -> HRESULT { return this.id3d11videodevice_vtable.CreateAuthenticatedChannel(this, ChannelType, ppAuthenticatedChannel); }
ID3D11VideoDevice_CreateCryptoSession :: inline (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, pKeyExchangeType: *GUID, ppCryptoSession: **ID3D11CryptoSession) -> HRESULT { return this.id3d11videodevice_vtable.CreateCryptoSession(this, pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession); }
ID3D11VideoDevice_CreateVideoDecoderOutputView :: inline (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pDesc: *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView: **ID3D11VideoDecoderOutputView) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoDecoderOutputView(this, pResource, pDesc, ppVDOVView); }
ID3D11VideoDevice_CreateVideoProcessorInputView :: inline (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pEnum: *ID3D11VideoProcessorEnumerator, pDesc: *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView: **ID3D11VideoProcessorInputView) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoProcessorInputView(this, pResource, pEnum, pDesc, ppVPIView); }
ID3D11VideoDevice_CreateVideoProcessorOutputView :: inline (this: *ID3D11VideoDevice, pResource: *ID3D11Resource, pEnum: *ID3D11VideoProcessorEnumerator, pDesc: *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView: **ID3D11VideoProcessorOutputView) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoProcessorOutputView(this, pResource, pEnum, pDesc, ppVPOView); }
ID3D11VideoDevice_CreateVideoProcessorEnumerator :: inline (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum: **ID3D11VideoProcessorEnumerator) -> HRESULT { return this.id3d11videodevice_vtable.CreateVideoProcessorEnumerator(this, pDesc, ppEnum); }
ID3D11VideoDevice_GetVideoDecoderProfileCount :: inline (this: *ID3D11VideoDevice) -> u32 { return this.id3d11videodevice_vtable.GetVideoDecoderProfileCount(this); }
ID3D11VideoDevice_GetVideoDecoderProfile :: inline (this: *ID3D11VideoDevice, Index: u32, pDecoderProfile: *GUID) -> HRESULT { return this.id3d11videodevice_vtable.GetVideoDecoderProfile(this, Index, pDecoderProfile); }
ID3D11VideoDevice_CheckVideoDecoderFormat :: inline (this: *ID3D11VideoDevice, pDecoderProfile: *GUID, Format: DXGI_FORMAT, pSupported: *BOOL) -> HRESULT { return this.id3d11videodevice_vtable.CheckVideoDecoderFormat(this, pDecoderProfile, Format, pSupported); }
ID3D11VideoDevice_GetVideoDecoderConfigCount :: inline (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_DECODER_DESC, pCount: *u32) -> HRESULT { return this.id3d11videodevice_vtable.GetVideoDecoderConfigCount(this, pDesc, pCount); }
ID3D11VideoDevice_GetVideoDecoderConfig :: inline (this: *ID3D11VideoDevice, pDesc: *D3D11_VIDEO_DECODER_DESC, Index: u32, pConfig: *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT { return this.id3d11videodevice_vtable.GetVideoDecoderConfig(this, pDesc, Index, pConfig); }
ID3D11VideoDevice_GetContentProtectionCaps :: inline (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, pCaps: *D3D11_VIDEO_CONTENT_PROTECTION_CAPS) -> HRESULT { return this.id3d11videodevice_vtable.GetContentProtectionCaps(this, pCryptoType, pDecoderProfile, pCaps); }
ID3D11VideoDevice_CheckCryptoKeyExchange :: inline (this: *ID3D11VideoDevice, pCryptoType: *GUID, pDecoderProfile: *GUID, Index: u32, pKeyExchangeType: *GUID) -> HRESULT { return this.id3d11videodevice_vtable.CheckCryptoKeyExchange(this, pCryptoType, pDecoderProfile, Index, pKeyExchangeType); }
ID3D11VideoDevice_SetPrivateData :: inline (this: *ID3D11VideoDevice, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT { return this.id3d11videodevice_vtable.SetPrivateData(this, guid, DataSize, pData); }
ID3D11VideoDevice_SetPrivateDataInterface :: inline (this: *ID3D11VideoDevice, guid: *GUID, pData: *IUnknown) -> HRESULT { return this.id3d11videodevice_vtable.SetPrivateDataInterface(this, guid, pData); }

vtable :: (obj: *ID3D11VideoDevice) -> *ID3D11VideoDevice_VTable { return obj.id3d11videodevice_vtable; }



ID3D11Device_UUID :: "db6f6ddb-ac77-4e88-8253-819df9bbf140";
ID3D11Device :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11device_vtable: *ID3D11Device_VTable;
}
ID3D11Device_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    CreateBuffer: (this: *ID3D11Device, pDesc: *D3D11_BUFFER_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppBuffer: **ID3D11Buffer) -> HRESULT #cpp_method;
    CreateTexture1D: (this: *ID3D11Device, pDesc: *D3D11_TEXTURE1D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture1D: **ID3D11Texture1D) -> HRESULT #cpp_method;
    CreateTexture2D: (this: *ID3D11Device, pDesc: *D3D11_TEXTURE2D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture2D: **ID3D11Texture2D) -> HRESULT #cpp_method;
    CreateTexture3D: (this: *ID3D11Device, pDesc: *D3D11_TEXTURE3D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture3D: **ID3D11Texture3D) -> HRESULT #cpp_method;
    CreateShaderResourceView: (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: **ID3D11ShaderResourceView) -> HRESULT #cpp_method;
    CreateUnorderedAccessView: (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: **ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
    CreateRenderTargetView: (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: **ID3D11RenderTargetView) -> HRESULT #cpp_method;
    CreateDepthStencilView: (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: **ID3D11DepthStencilView) -> HRESULT #cpp_method;
    CreateInputLayout: (this: *ID3D11Device, pInputElementDescs: *D3D11_INPUT_ELEMENT_DESC, NumElements: u32, pShaderBytecodeWithInputSignature: *void, BytecodeLength: SIZE_T, ppInputLayout: **ID3D11InputLayout) -> HRESULT #cpp_method;
    CreateVertexShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppVertexShader: **ID3D11VertexShader) -> HRESULT #cpp_method;
    CreateGeometryShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppGeometryShader: **ID3D11GeometryShader) -> HRESULT #cpp_method;
    CreateGeometryShaderWithStreamOutput: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pSODeclaration: *D3D11_SO_DECLARATION_ENTRY, NumEntries: u32, pBufferStrides: *u32, NumStrides: u32, RasterizedStream: u32, pClassLinkage: *ID3D11ClassLinkage, ppGeometryShader: **ID3D11GeometryShader) -> HRESULT #cpp_method;
    CreatePixelShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppPixelShader: **ID3D11PixelShader) -> HRESULT #cpp_method;
    CreateHullShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppHullShader: **ID3D11HullShader) -> HRESULT #cpp_method;
    CreateDomainShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppDomainShader: **ID3D11DomainShader) -> HRESULT #cpp_method;
    CreateComputeShader: (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppComputeShader: **ID3D11ComputeShader) -> HRESULT #cpp_method;
    CreateClassLinkage: (this: *ID3D11Device, ppLinkage: **ID3D11ClassLinkage) -> HRESULT #cpp_method;
    CreateBlendState: (this: *ID3D11Device, pBlendStateDesc: *D3D11_BLEND_DESC, ppBlendState: **ID3D11BlendState) -> HRESULT #cpp_method;
    CreateDepthStencilState: (this: *ID3D11Device, pDepthStencilDesc: *D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: **ID3D11DepthStencilState) -> HRESULT #cpp_method;
    CreateRasterizerState: (this: *ID3D11Device, pRasterizerDesc: *D3D11_RASTERIZER_DESC, ppRasterizerState: **ID3D11RasterizerState) -> HRESULT #cpp_method;
    CreateSamplerState: (this: *ID3D11Device, pSamplerDesc: *D3D11_SAMPLER_DESC, ppSamplerState: **ID3D11SamplerState) -> HRESULT #cpp_method;
    CreateQuery: (this: *ID3D11Device, pQueryDesc: *D3D11_QUERY_DESC, ppQuery: **ID3D11Query) -> HRESULT #cpp_method;
    CreatePredicate: (this: *ID3D11Device, pPredicateDesc: *D3D11_QUERY_DESC, ppPredicate: **ID3D11Predicate) -> HRESULT #cpp_method;
    CreateCounter: (this: *ID3D11Device, pCounterDesc: *D3D11_COUNTER_DESC, ppCounter: **ID3D11Counter) -> HRESULT #cpp_method;
    CreateDeferredContext: (this: *ID3D11Device, ContextFlags: u32, ppDeferredContext: **ID3D11DeviceContext) -> HRESULT #cpp_method;
    OpenSharedResource: (this: *ID3D11Device, hResource: HANDLE, ReturnedInterface: *IID, ppResource: **void) -> HRESULT #cpp_method;
    CheckFormatSupport: (this: *ID3D11Device, Format: DXGI_FORMAT, pFormatSupport: *u32) -> HRESULT #cpp_method;
    CheckMultisampleQualityLevels: (this: *ID3D11Device, Format: DXGI_FORMAT, SampleCount: u32, pNumQualityLevels: *u32) -> HRESULT #cpp_method;
    CheckCounterInfo: (this: *ID3D11Device, pCounterInfo: *D3D11_COUNTER_INFO) -> void #cpp_method;
    CheckCounter: (this: *ID3D11Device, pDesc: *D3D11_COUNTER_DESC, pType: *D3D11_COUNTER_TYPE, pActiveCounters: *u32, szName: *u8, pNameLength: *u32, szUnits: *u8, pUnitsLength: *u32, szDescription: *u8, pDescriptionLength: *u32) -> HRESULT #cpp_method;
    CheckFeatureSupport: (this: *ID3D11Device, Feature: D3D11_FEATURE, pFeatureSupportData: *void, FeatureSupportDataSize: u32) -> HRESULT #cpp_method;
    GetPrivateData: (this: *ID3D11Device, guid: *GUID, pDataSize: *u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateData: (this: *ID3D11Device, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface: (this: *ID3D11Device, guid: *GUID, pData: *IUnknown) -> HRESULT #cpp_method;
    GetFeatureLevel: (this: *ID3D11Device) -> D3D_FEATURE_LEVEL #cpp_method;
    GetCreationFlags: (this: *ID3D11Device) -> u32 #cpp_method;
    GetDeviceRemovedReason: (this: *ID3D11Device) -> HRESULT #cpp_method;
    GetImmediateContext: (this: *ID3D11Device, ppImmediateContext: **ID3D11DeviceContext) -> void #cpp_method;
    SetExceptionMode: (this: *ID3D11Device, RaiseFlags: u32) -> HRESULT #cpp_method;
    GetExceptionMode: (this: *ID3D11Device) -> u32 #cpp_method;
}
ID3D11Device_CreateBuffer :: inline (this: *ID3D11Device, pDesc: *D3D11_BUFFER_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppBuffer: **ID3D11Buffer) -> HRESULT { return this.id3d11device_vtable.CreateBuffer(this, pDesc, pInitialData, ppBuffer); }
ID3D11Device_CreateTexture1D :: inline (this: *ID3D11Device, pDesc: *D3D11_TEXTURE1D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture1D: **ID3D11Texture1D) -> HRESULT { return this.id3d11device_vtable.CreateTexture1D(this, pDesc, pInitialData, ppTexture1D); }
ID3D11Device_CreateTexture2D :: inline (this: *ID3D11Device, pDesc: *D3D11_TEXTURE2D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture2D: **ID3D11Texture2D) -> HRESULT { return this.id3d11device_vtable.CreateTexture2D(this, pDesc, pInitialData, ppTexture2D); }
ID3D11Device_CreateTexture3D :: inline (this: *ID3D11Device, pDesc: *D3D11_TEXTURE3D_DESC, pInitialData: *D3D11_SUBRESOURCE_DATA, ppTexture3D: **ID3D11Texture3D) -> HRESULT { return this.id3d11device_vtable.CreateTexture3D(this, pDesc, pInitialData, ppTexture3D); }
ID3D11Device_CreateShaderResourceView :: inline (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: **ID3D11ShaderResourceView) -> HRESULT { return this.id3d11device_vtable.CreateShaderResourceView(this, pResource, pDesc, ppSRView); }
ID3D11Device_CreateUnorderedAccessView :: inline (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: **ID3D11UnorderedAccessView) -> HRESULT { return this.id3d11device_vtable.CreateUnorderedAccessView(this, pResource, pDesc, ppUAView); }
ID3D11Device_CreateRenderTargetView :: inline (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: **ID3D11RenderTargetView) -> HRESULT { return this.id3d11device_vtable.CreateRenderTargetView(this, pResource, pDesc, ppRTView); }
ID3D11Device_CreateDepthStencilView :: inline (this: *ID3D11Device, pResource: *ID3D11Resource, pDesc: *D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: **ID3D11DepthStencilView) -> HRESULT { return this.id3d11device_vtable.CreateDepthStencilView(this, pResource, pDesc, ppDepthStencilView); }
ID3D11Device_CreateInputLayout :: inline (this: *ID3D11Device, pInputElementDescs: *D3D11_INPUT_ELEMENT_DESC, NumElements: u32, pShaderBytecodeWithInputSignature: *void, BytecodeLength: SIZE_T, ppInputLayout: **ID3D11InputLayout) -> HRESULT { return this.id3d11device_vtable.CreateInputLayout(this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout); }
ID3D11Device_CreateVertexShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppVertexShader: **ID3D11VertexShader) -> HRESULT { return this.id3d11device_vtable.CreateVertexShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader); }
ID3D11Device_CreateGeometryShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppGeometryShader: **ID3D11GeometryShader) -> HRESULT { return this.id3d11device_vtable.CreateGeometryShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader); }
ID3D11Device_CreateGeometryShaderWithStreamOutput :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pSODeclaration: *D3D11_SO_DECLARATION_ENTRY, NumEntries: u32, pBufferStrides: *u32, NumStrides: u32, RasterizedStream: u32, pClassLinkage: *ID3D11ClassLinkage, ppGeometryShader: **ID3D11GeometryShader) -> HRESULT { return this.id3d11device_vtable.CreateGeometryShaderWithStreamOutput(this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader); }
ID3D11Device_CreatePixelShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppPixelShader: **ID3D11PixelShader) -> HRESULT { return this.id3d11device_vtable.CreatePixelShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader); }
ID3D11Device_CreateHullShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppHullShader: **ID3D11HullShader) -> HRESULT { return this.id3d11device_vtable.CreateHullShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader); }
ID3D11Device_CreateDomainShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppDomainShader: **ID3D11DomainShader) -> HRESULT { return this.id3d11device_vtable.CreateDomainShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader); }
ID3D11Device_CreateComputeShader :: inline (this: *ID3D11Device, pShaderBytecode: *void, BytecodeLength: SIZE_T, pClassLinkage: *ID3D11ClassLinkage, ppComputeShader: **ID3D11ComputeShader) -> HRESULT { return this.id3d11device_vtable.CreateComputeShader(this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader); }
ID3D11Device_CreateClassLinkage :: inline (this: *ID3D11Device, ppLinkage: **ID3D11ClassLinkage) -> HRESULT { return this.id3d11device_vtable.CreateClassLinkage(this, ppLinkage); }
ID3D11Device_CreateBlendState :: inline (this: *ID3D11Device, pBlendStateDesc: *D3D11_BLEND_DESC, ppBlendState: **ID3D11BlendState) -> HRESULT { return this.id3d11device_vtable.CreateBlendState(this, pBlendStateDesc, ppBlendState); }
ID3D11Device_CreateDepthStencilState :: inline (this: *ID3D11Device, pDepthStencilDesc: *D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: **ID3D11DepthStencilState) -> HRESULT { return this.id3d11device_vtable.CreateDepthStencilState(this, pDepthStencilDesc, ppDepthStencilState); }
ID3D11Device_CreateRasterizerState :: inline (this: *ID3D11Device, pRasterizerDesc: *D3D11_RASTERIZER_DESC, ppRasterizerState: **ID3D11RasterizerState) -> HRESULT { return this.id3d11device_vtable.CreateRasterizerState(this, pRasterizerDesc, ppRasterizerState); }
ID3D11Device_CreateSamplerState :: inline (this: *ID3D11Device, pSamplerDesc: *D3D11_SAMPLER_DESC, ppSamplerState: **ID3D11SamplerState) -> HRESULT { return this.id3d11device_vtable.CreateSamplerState(this, pSamplerDesc, ppSamplerState); }
ID3D11Device_CreateQuery :: inline (this: *ID3D11Device, pQueryDesc: *D3D11_QUERY_DESC, ppQuery: **ID3D11Query) -> HRESULT { return this.id3d11device_vtable.CreateQuery(this, pQueryDesc, ppQuery); }
ID3D11Device_CreatePredicate :: inline (this: *ID3D11Device, pPredicateDesc: *D3D11_QUERY_DESC, ppPredicate: **ID3D11Predicate) -> HRESULT { return this.id3d11device_vtable.CreatePredicate(this, pPredicateDesc, ppPredicate); }
ID3D11Device_CreateCounter :: inline (this: *ID3D11Device, pCounterDesc: *D3D11_COUNTER_DESC, ppCounter: **ID3D11Counter) -> HRESULT { return this.id3d11device_vtable.CreateCounter(this, pCounterDesc, ppCounter); }
ID3D11Device_CreateDeferredContext :: inline (this: *ID3D11Device, ContextFlags: u32, ppDeferredContext: **ID3D11DeviceContext) -> HRESULT { return this.id3d11device_vtable.CreateDeferredContext(this, ContextFlags, ppDeferredContext); }
ID3D11Device_OpenSharedResource :: inline (this: *ID3D11Device, hResource: HANDLE, ReturnedInterface: *IID, ppResource: **void) -> HRESULT { return this.id3d11device_vtable.OpenSharedResource(this, hResource, ReturnedInterface, ppResource); }
ID3D11Device_CheckFormatSupport :: inline (this: *ID3D11Device, Format: DXGI_FORMAT, pFormatSupport: *u32) -> HRESULT { return this.id3d11device_vtable.CheckFormatSupport(this, Format, pFormatSupport); }
ID3D11Device_CheckMultisampleQualityLevels :: inline (this: *ID3D11Device, Format: DXGI_FORMAT, SampleCount: u32, pNumQualityLevels: *u32) -> HRESULT { return this.id3d11device_vtable.CheckMultisampleQualityLevels(this, Format, SampleCount, pNumQualityLevels); }
ID3D11Device_CheckCounterInfo :: inline (this: *ID3D11Device, pCounterInfo: *D3D11_COUNTER_INFO) { this.id3d11device_vtable.CheckCounterInfo(this, pCounterInfo); }
ID3D11Device_CheckCounter :: inline (this: *ID3D11Device, pDesc: *D3D11_COUNTER_DESC, pType: *D3D11_COUNTER_TYPE, pActiveCounters: *u32, szName: *u8, pNameLength: *u32, szUnits: *u8, pUnitsLength: *u32, szDescription: *u8, pDescriptionLength: *u32) -> HRESULT { return this.id3d11device_vtable.CheckCounter(this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength); }
ID3D11Device_CheckFeatureSupport :: inline (this: *ID3D11Device, Feature: D3D11_FEATURE, pFeatureSupportData: *void, FeatureSupportDataSize: u32) -> HRESULT { return this.id3d11device_vtable.CheckFeatureSupport(this, Feature, pFeatureSupportData, FeatureSupportDataSize); }
ID3D11Device_GetPrivateData :: inline (this: *ID3D11Device, guid: *GUID, pDataSize: *u32, pData: *void) -> HRESULT { return this.id3d11device_vtable.GetPrivateData(this, guid, pDataSize, pData); }
ID3D11Device_SetPrivateData :: inline (this: *ID3D11Device, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT { return this.id3d11device_vtable.SetPrivateData(this, guid, DataSize, pData); }
ID3D11Device_SetPrivateDataInterface :: inline (this: *ID3D11Device, guid: *GUID, pData: *IUnknown) -> HRESULT { return this.id3d11device_vtable.SetPrivateDataInterface(this, guid, pData); }
ID3D11Device_GetFeatureLevel :: inline (this: *ID3D11Device) -> D3D_FEATURE_LEVEL { return this.id3d11device_vtable.GetFeatureLevel(this); }
ID3D11Device_GetCreationFlags :: inline (this: *ID3D11Device) -> u32 { return this.id3d11device_vtable.GetCreationFlags(this); }
ID3D11Device_GetDeviceRemovedReason :: inline (this: *ID3D11Device) -> HRESULT { return this.id3d11device_vtable.GetDeviceRemovedReason(this); }
ID3D11Device_GetImmediateContext :: inline (this: *ID3D11Device, ppImmediateContext: **ID3D11DeviceContext) { this.id3d11device_vtable.GetImmediateContext(this, ppImmediateContext); }
ID3D11Device_SetExceptionMode :: inline (this: *ID3D11Device, RaiseFlags: u32) -> HRESULT { return this.id3d11device_vtable.SetExceptionMode(this, RaiseFlags); }
ID3D11Device_GetExceptionMode :: inline (this: *ID3D11Device) -> u32 { return this.id3d11device_vtable.GetExceptionMode(this); }

vtable :: (obj: *ID3D11Device) -> *ID3D11Device_VTable { return obj.id3d11device_vtable; }


D3D11_CREATE_DEVICE_FLAG :: enum_flags u32 {
    SINGLETHREADED                                :: 0x1;
    DEBUG                                         :: 0x2;
    SWITCH_TO_REF                                 :: 0x4;
    PREVENT_INTERNAL_THREADING_OPTIMIZATIONS      :: 0x8;
    BGRA_SUPPORT                                  :: 0x20;
    DEBUGGABLE                                    :: 0x40;
    PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY :: 0x80;
    DISABLE_GPU_TIMEOUT                           :: 0x100;
    VIDEO_SUPPORT                                 :: 0x800;

    D3D11_CREATE_DEVICE_SINGLETHREADED                                :: SINGLETHREADED;
    D3D11_CREATE_DEVICE_DEBUG                                         :: DEBUG;
    D3D11_CREATE_DEVICE_SWITCH_TO_REF                                 :: SWITCH_TO_REF;
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS      :: PREVENT_INTERNAL_THREADING_OPTIMIZATIONS;
    D3D11_CREATE_DEVICE_BGRA_SUPPORT                                  :: BGRA_SUPPORT;
    D3D11_CREATE_DEVICE_DEBUGGABLE                                    :: DEBUGGABLE;
    D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY :: PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY;
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT                           :: DISABLE_GPU_TIMEOUT;
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT                                 :: VIDEO_SUPPORT;
}

PFN_D3D11_CREATE_DEVICE :: #type (unknown0: *IDXGIAdapter, unknown1: D3D_DRIVER_TYPE, unknown2: HMODULE, unknown3: u32, unknown4: *D3D_FEATURE_LEVEL, FeatureLevels: u32, unknown5: u32, unknown6: **ID3D11Device, unknown7: *D3D_FEATURE_LEVEL, unknown8: **ID3D11DeviceContext) -> HRESULT #c_call;

D3D11CreateDevice :: (pAdapter: *IDXGIAdapter, DriverType: D3D_DRIVER_TYPE, Software: HMODULE, Flags: D3D11_CREATE_DEVICE_FLAG, pFeatureLevels: *D3D_FEATURE_LEVEL, FeatureLevels: u32, SDKVersion: u32, ppDevice: **ID3D11Device, pFeatureLevel: *D3D_FEATURE_LEVEL, ppImmediateContext: **ID3D11DeviceContext) -> HRESULT #foreign d3d11;

PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN :: #type (unknown0: *IDXGIAdapter, unknown1: D3D_DRIVER_TYPE, unknown2: HMODULE, unknown3: u32, unknown4: *D3D_FEATURE_LEVEL, FeatureLevels: u32, unknown5: u32, unknown6: *DXGI_SWAP_CHAIN_DESC, unknown7: **IDXGISwapChain, unknown8: **ID3D11Device, unknown9: *D3D_FEATURE_LEVEL, unknown10: **ID3D11DeviceContext) -> HRESULT #c_call;

D3D11CreateDeviceAndSwapChain :: (pAdapter: *IDXGIAdapter, DriverType: D3D_DRIVER_TYPE, Software: HMODULE, Flags: u32, pFeatureLevels: *D3D_FEATURE_LEVEL, FeatureLevels: u32, SDKVersion: u32, pSwapChainDesc: *DXGI_SWAP_CHAIN_DESC, ppSwapChain: **IDXGISwapChain, ppDevice: **ID3D11Device, pFeatureLevel: *D3D_FEATURE_LEVEL, ppImmediateContext: **ID3D11DeviceContext) -> HRESULT #foreign d3d11;

D3D11_COPY_FLAGS :: enum_flags u32 {
    NO_OVERWRITE :: 0x1;
    DISCARD      :: 0x2;

    D3D11_COPY_NO_OVERWRITE :: NO_OVERWRITE;
    D3D11_COPY_DISCARD      :: DISCARD;
}

D3D11_LOGIC_OP :: enum s32 {
    CLEAR         :: 0;
    SET           :: 1;
    COPY          :: 2;
    COPY_INVERTED :: 3;
    NOOP          :: 4;
    INVERT        :: 5;
    AND           :: 6;
    NAND          :: 7;
    OR            :: 8;
    NOR           :: 9;
    XOR           :: 10;
    EQUIV         :: 11;
    AND_REVERSE   :: 12;
    AND_INVERTED  :: 13;
    OR_REVERSE    :: 14;
    OR_INVERTED   :: 15;

    D3D11_LOGIC_OP_CLEAR         :: CLEAR;
    D3D11_LOGIC_OP_SET           :: SET;
    D3D11_LOGIC_OP_COPY          :: COPY;
    D3D11_LOGIC_OP_COPY_INVERTED :: COPY_INVERTED;
    D3D11_LOGIC_OP_NOOP          :: NOOP;
    D3D11_LOGIC_OP_INVERT        :: INVERT;
    D3D11_LOGIC_OP_AND           :: AND;
    D3D11_LOGIC_OP_NAND          :: NAND;
    D3D11_LOGIC_OP_OR            :: OR;
    D3D11_LOGIC_OP_NOR           :: NOR;
    D3D11_LOGIC_OP_XOR           :: XOR;
    D3D11_LOGIC_OP_EQUIV         :: EQUIV;
    D3D11_LOGIC_OP_AND_REVERSE   :: AND_REVERSE;
    D3D11_LOGIC_OP_AND_INVERTED  :: AND_INVERTED;
    D3D11_LOGIC_OP_OR_REVERSE    :: OR_REVERSE;
    D3D11_LOGIC_OP_OR_INVERTED   :: OR_INVERTED;
}

D3D11_RENDER_TARGET_BLEND_DESC1 :: struct {
    BlendEnable:           BOOL;
    LogicOpEnable:         BOOL;
    SrcBlend:              D3D11_BLEND;
    DestBlend:             D3D11_BLEND;
    BlendOp:               D3D11_BLEND_OP;
    SrcBlendAlpha:         D3D11_BLEND;
    DestBlendAlpha:        D3D11_BLEND;
    BlendOpAlpha:          D3D11_BLEND_OP;
    LogicOp:               D3D11_LOGIC_OP;
    RenderTargetWriteMask: u8;
}

D3D11_BLEND_DESC1 :: struct {
    AlphaToCoverageEnable:  BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget:           [8] D3D11_RENDER_TARGET_BLEND_DESC1;
}

CD3D11_BLEND_DESC1 :: struct {
    #as using d3d11_blend_desc1: D3D11_BLEND_DESC1;
}


ID3D11BlendState1_UUID :: "cc86fabe-da55-401d-85e7-e3c9de2877e9";
ID3D11BlendState1 :: struct {
    #as using id3d11blendstate: ID3D11BlendState;
    #place id3d11blendstate; id3d11blendstate1_vtable: *ID3D11BlendState1_VTable;
}
ID3D11BlendState1_VTable :: struct #type_info_none {
    using id3d11blendstate: ID3D11BlendState_VTable;
    GetDesc1: (this: *ID3D11BlendState1, pDesc: *D3D11_BLEND_DESC1) -> void #cpp_method;
}
ID3D11BlendState1_GetDesc1 :: inline (this: *ID3D11BlendState1, pDesc: *D3D11_BLEND_DESC1) { this.id3d11blendstate1_vtable.GetDesc1(this, pDesc); }

vtable :: (obj: *ID3D11BlendState1) -> *ID3D11BlendState1_VTable { return obj.id3d11blendstate1_vtable; }


D3D11_RASTERIZER_DESC1 :: struct {
    FillMode:              D3D11_FILL_MODE;
    CullMode:              D3D11_CULL_MODE;
    FrontCounterClockwise: BOOL;
    DepthBias:             s32;
    DepthBiasClamp:        float;
    SlopeScaledDepthBias:  float;
    DepthClipEnable:       BOOL;
    ScissorEnable:         BOOL;
    MultisampleEnable:     BOOL;
    AntialiasedLineEnable: BOOL;
    ForcedSampleCount:     u32;
}

CD3D11_RASTERIZER_DESC1 :: struct {
    #as using d3d11_rasterizer_desc1: D3D11_RASTERIZER_DESC1;
}


ID3D11RasterizerState1_UUID :: "1217d7a6-5039-418c-b042-9cbe256afd6e";
ID3D11RasterizerState1 :: struct {
    #as using id3d11rasterizerstate: ID3D11RasterizerState;
    #place id3d11rasterizerstate; id3d11rasterizerstate1_vtable: *ID3D11RasterizerState1_VTable;
}
ID3D11RasterizerState1_VTable :: struct #type_info_none {
    using id3d11rasterizerstate: ID3D11RasterizerState_VTable;
    GetDesc1: (this: *ID3D11RasterizerState1, pDesc: *D3D11_RASTERIZER_DESC1) -> void #cpp_method;
}
ID3D11RasterizerState1_GetDesc1 :: inline (this: *ID3D11RasterizerState1, pDesc: *D3D11_RASTERIZER_DESC1) { this.id3d11rasterizerstate1_vtable.GetDesc1(this, pDesc); }

vtable :: (obj: *ID3D11RasterizerState1) -> *ID3D11RasterizerState1_VTable { return obj.id3d11rasterizerstate1_vtable; }


D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG :: enum_flags u32 {
    D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED :: 0x1;
}


ID3DDeviceContextState_UUID :: "5c1e0d8a-7c23-48f9-8c59-a92958ceff11";
ID3DDeviceContextState :: struct {
    #as using id3d11devicechild: ID3D11DeviceChild;
}


ID3D11DeviceContext1_UUID :: "bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1";
ID3D11DeviceContext1 :: struct {
    #as using id3d11devicecontext: ID3D11DeviceContext;
    #place id3d11devicecontext; id3d11devicecontext1_vtable: *ID3D11DeviceContext1_VTable;
}
ID3D11DeviceContext1_VTable :: struct #type_info_none {
    using id3d11devicecontext: ID3D11DeviceContext_VTable;
    CopySubresourceRegion1: (this: *ID3D11DeviceContext1, pDstResource: *ID3D11Resource, DstSubresource: u32, DstX: u32, DstY: u32, DstZ: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, pSrcBox: *D3D11_BOX, CopyFlags: u32) -> void #cpp_method;
    UpdateSubresource1: (this: *ID3D11DeviceContext1, pDstResource: *ID3D11Resource, DstSubresource: u32, pDstBox: *D3D11_BOX, pSrcData: *void, SrcRowPitch: u32, SrcDepthPitch: u32, CopyFlags: u32) -> void #cpp_method;
    DiscardResource: (this: *ID3D11DeviceContext1, pResource: *ID3D11Resource) -> void #cpp_method;
    DiscardView: (this: *ID3D11DeviceContext1, pResourceView: *ID3D11View) -> void #cpp_method;
    VSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    HSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    DSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    GSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    PSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    CSSetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    VSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    HSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    DSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    GSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    PSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    CSGetConstantBuffers1: (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) -> void #cpp_method;
    SwapDeviceContextState: (this: *ID3D11DeviceContext1, pState: *ID3DDeviceContextState, ppPreviousState: **ID3DDeviceContextState) -> void #cpp_method;
    ClearView: (this: *ID3D11DeviceContext1, pView: *ID3D11View, Color: *[4] float, pRect: *D3D11_RECT, NumRects: u32) -> void #cpp_method;
    DiscardView1: (this: *ID3D11DeviceContext1, pResourceView: *ID3D11View, pRects: *D3D11_RECT, NumRects: u32) -> void #cpp_method;
}
ID3D11DeviceContext1_CopySubresourceRegion1 :: inline (this: *ID3D11DeviceContext1, pDstResource: *ID3D11Resource, DstSubresource: u32, DstX: u32, DstY: u32, DstZ: u32, pSrcResource: *ID3D11Resource, SrcSubresource: u32, pSrcBox: *D3D11_BOX, CopyFlags: u32) { this.id3d11devicecontext1_vtable.CopySubresourceRegion1(this, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox, CopyFlags); }
ID3D11DeviceContext1_UpdateSubresource1 :: inline (this: *ID3D11DeviceContext1, pDstResource: *ID3D11Resource, DstSubresource: u32, pDstBox: *D3D11_BOX, pSrcData: *void, SrcRowPitch: u32, SrcDepthPitch: u32, CopyFlags: u32) { this.id3d11devicecontext1_vtable.UpdateSubresource1(this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch, CopyFlags); }
ID3D11DeviceContext1_DiscardResource :: inline (this: *ID3D11DeviceContext1, pResource: *ID3D11Resource) { this.id3d11devicecontext1_vtable.DiscardResource(this, pResource); }
ID3D11DeviceContext1_DiscardView :: inline (this: *ID3D11DeviceContext1, pResourceView: *ID3D11View) { this.id3d11devicecontext1_vtable.DiscardView(this, pResourceView); }
ID3D11DeviceContext1_VSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.VSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_HSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.HSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_DSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.DSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_GSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.GSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_PSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.PSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_CSSetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.CSSetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_VSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.VSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_HSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.HSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_DSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.DSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_GSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.GSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_PSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.PSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_CSGetConstantBuffers1 :: inline (this: *ID3D11DeviceContext1, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: **ID3D11Buffer, pFirstConstant: *u32, pNumConstants: *u32) { this.id3d11devicecontext1_vtable.CSGetConstantBuffers1(this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants); }
ID3D11DeviceContext1_SwapDeviceContextState :: inline (this: *ID3D11DeviceContext1, pState: *ID3DDeviceContextState, ppPreviousState: **ID3DDeviceContextState) { this.id3d11devicecontext1_vtable.SwapDeviceContextState(this, pState, ppPreviousState); }
ID3D11DeviceContext1_ClearView :: inline (this: *ID3D11DeviceContext1, pView: *ID3D11View, Color: *[4] float, pRect: *D3D11_RECT, NumRects: u32) { this.id3d11devicecontext1_vtable.ClearView(this, pView, Color, pRect, NumRects); }
ID3D11DeviceContext1_DiscardView1 :: inline (this: *ID3D11DeviceContext1, pResourceView: *ID3D11View, pRects: *D3D11_RECT, NumRects: u32) { this.id3d11devicecontext1_vtable.DiscardView1(this, pResourceView, pRects, NumRects); }

vtable :: (obj: *ID3D11DeviceContext1) -> *ID3D11DeviceContext1_VTable { return obj.id3d11devicecontext1_vtable; }


D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK :: struct {
    ClearSize:     u32;
    EncryptedSize: u32;
}

D3D11_VIDEO_DECODER_BUFFER_DESC1 :: struct {
    BufferType:             D3D11_VIDEO_DECODER_BUFFER_TYPE;
    DataOffset:             u32;
    DataSize:               u32;

    pIV:                    *void;
    IVSize:                 u32;

    pSubSampleMappingBlock: *D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK;
    SubSampleMappingCount:  u32;
}

D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION :: struct {
    pCryptoSession:  *ID3D11CryptoSession;
    BlobSize:        u32;

    pBlob:           *void;
    pKeyInfoId:      *GUID;
    PrivateDataSize: u32;

    pPrivateData:    *void;
}

D3D11_VIDEO_DECODER_CAPS :: enum s32 {
    DOWNSAMPLE          :: 1;
    NON_REAL_TIME       :: 2;
    DOWNSAMPLE_DYNAMIC  :: 4;
    DOWNSAMPLE_REQUIRED :: 8;
    UNSUPPORTED         :: 16;

    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE          :: DOWNSAMPLE;
    D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME       :: NON_REAL_TIME;
    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC  :: DOWNSAMPLE_DYNAMIC;
    D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED :: DOWNSAMPLE_REQUIRED;
    D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED         :: UNSUPPORTED;
}

D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS :: enum s32 {
    MULTIPLANE_OVERLAY_ROTATION               :: 1;
    MULTIPLANE_OVERLAY_RESIZE                 :: 2;
    MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION :: 4;
    TRIPLE_BUFFER_OUTPUT                      :: 8;

    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION               :: MULTIPLANE_OVERLAY_ROTATION;
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE                 :: MULTIPLANE_OVERLAY_RESIZE;
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION :: MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION;
    D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT                      :: TRIPLE_BUFFER_OUTPUT;
}

D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT :: struct {
    Enable: BOOL;
    Width:  u32;
    Height: u32;
    Format: DXGI_FORMAT;
}

D3D11_CRYPTO_SESSION_STATUS :: enum s32 {
    OK                   :: 0;
    KEY_LOST             :: 1;
    KEY_AND_CONTENT_LOST :: 2;

    D3D11_CRYPTO_SESSION_STATUS_OK                   :: OK;
    D3D11_CRYPTO_SESSION_STATUS_KEY_LOST             :: KEY_LOST;
    D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST :: KEY_AND_CONTENT_LOST;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA :: struct {
    PrivateDataSize:      u32;
    HWProtectionDataSize: u32;
    pbInput:              [4] u8;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA :: struct {
    PrivateDataSize:         u32;
    MaxHWProtectionDataSize: u32;
    HWProtectionDataSize:    u32;
    TransportTime:           u64;
    ExecutionTime:           u64;
    pbOutput:                [4] u8;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA :: struct {
    HWProtectionFunctionID: u32;
    pInputData:             *D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA;
    pOutputData:            *D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA;
    Status:                 HRESULT;
}

D3D11_VIDEO_SAMPLE_DESC :: struct {
    Width:      u32;
    Height:     u32;
    Format:     DXGI_FORMAT;
    ColorSpace: DXGI_COLOR_SPACE_TYPE;
}


ID3D11VideoContext1_UUID :: "A7F026DA-A5F8-4487-A564-15E34357651E";
ID3D11VideoContext1 :: struct {
    #as using id3d11videocontext: ID3D11VideoContext;
    #place id3d11videocontext; id3d11videocontext1_vtable: *ID3D11VideoContext1_VTable;
}
ID3D11VideoContext1_VTable :: struct #type_info_none {
    using id3d11videocontext: ID3D11VideoContext_VTable;
    SubmitDecoderBuffers1: (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, NumBuffers: u32, pBufferDesc: *D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT #cpp_method;
    GetDataForNewHardwareKey: (this: *ID3D11VideoContext1, pCryptoSession: *ID3D11CryptoSession, PrivateInputSize: u32, pPrivatInputData: *void, pPrivateOutputData: *u64) -> HRESULT #cpp_method;
    CheckCryptoSessionStatus: (this: *ID3D11VideoContext1, pCryptoSession: *ID3D11CryptoSession, pStatus: *D3D11_CRYPTO_SESSION_STATUS) -> HRESULT #cpp_method;
    DecoderEnableDownsampling: (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC, ReferenceFrameCount: u32) -> HRESULT #cpp_method;
    DecoderUpdateDownsampling: (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT #cpp_method;
    VideoProcessorSetOutputColorSpace1: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, ColorSpace: DXGI_COLOR_SPACE_TYPE) -> void #cpp_method;
    VideoProcessorSetOutputShaderUsage: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, ShaderUsage: BOOL) -> void #cpp_method;
    VideoProcessorGetOutputColorSpace1: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *DXGI_COLOR_SPACE_TYPE) -> void #cpp_method;
    VideoProcessorGetOutputShaderUsage: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, pShaderUsage: *BOOL) -> void #cpp_method;
    VideoProcessorSetStreamColorSpace1: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, ColorSpace: DXGI_COLOR_SPACE_TYPE) -> void #cpp_method;
    VideoProcessorSetStreamMirror: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, FlipHorizontal: BOOL, FlipVertical: BOOL) -> void #cpp_method;
    VideoProcessorGetStreamColorSpace1: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *DXGI_COLOR_SPACE_TYPE) -> void #cpp_method;
    VideoProcessorGetStreamMirror: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pFlipHorizontal: *BOOL, pFlipVertical: *BOOL) -> void #cpp_method;
    VideoProcessorGetBehaviorHints: (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, OutputWidth: u32, OutputHeight: u32, OutputFormat: DXGI_FORMAT, StreamCount: u32, pStreams: *D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, pBehaviorHints: *u32) -> HRESULT #cpp_method;
}
ID3D11VideoContext1_SubmitDecoderBuffers1 :: inline (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, NumBuffers: u32, pBufferDesc: *D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT { return this.id3d11videocontext1_vtable.SubmitDecoderBuffers1(this, pDecoder, NumBuffers, pBufferDesc); }
ID3D11VideoContext1_GetDataForNewHardwareKey :: inline (this: *ID3D11VideoContext1, pCryptoSession: *ID3D11CryptoSession, PrivateInputSize: u32, pPrivatInputData: *void, pPrivateOutputData: *u64) -> HRESULT { return this.id3d11videocontext1_vtable.GetDataForNewHardwareKey(this, pCryptoSession, PrivateInputSize, pPrivatInputData, pPrivateOutputData); }
ID3D11VideoContext1_CheckCryptoSessionStatus :: inline (this: *ID3D11VideoContext1, pCryptoSession: *ID3D11CryptoSession, pStatus: *D3D11_CRYPTO_SESSION_STATUS) -> HRESULT { return this.id3d11videocontext1_vtable.CheckCryptoSessionStatus(this, pCryptoSession, pStatus); }
ID3D11VideoContext1_DecoderEnableDownsampling :: inline (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC, ReferenceFrameCount: u32) -> HRESULT { return this.id3d11videocontext1_vtable.DecoderEnableDownsampling(this, pDecoder, InputColorSpace, pOutputDesc, ReferenceFrameCount); }
ID3D11VideoContext1_DecoderUpdateDownsampling :: inline (this: *ID3D11VideoContext1, pDecoder: *ID3D11VideoDecoder, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT { return this.id3d11videocontext1_vtable.DecoderUpdateDownsampling(this, pDecoder, pOutputDesc); }
ID3D11VideoContext1_VideoProcessorSetOutputColorSpace1 :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, ColorSpace: DXGI_COLOR_SPACE_TYPE) { this.id3d11videocontext1_vtable.VideoProcessorSetOutputColorSpace1(this, pVideoProcessor, ColorSpace); }
ID3D11VideoContext1_VideoProcessorSetOutputShaderUsage :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, ShaderUsage: BOOL) { this.id3d11videocontext1_vtable.VideoProcessorSetOutputShaderUsage(this, pVideoProcessor, ShaderUsage); }
ID3D11VideoContext1_VideoProcessorGetOutputColorSpace1 :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, pColorSpace: *DXGI_COLOR_SPACE_TYPE) { this.id3d11videocontext1_vtable.VideoProcessorGetOutputColorSpace1(this, pVideoProcessor, pColorSpace); }
ID3D11VideoContext1_VideoProcessorGetOutputShaderUsage :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, pShaderUsage: *BOOL) { this.id3d11videocontext1_vtable.VideoProcessorGetOutputShaderUsage(this, pVideoProcessor, pShaderUsage); }
ID3D11VideoContext1_VideoProcessorSetStreamColorSpace1 :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, ColorSpace: DXGI_COLOR_SPACE_TYPE) { this.id3d11videocontext1_vtable.VideoProcessorSetStreamColorSpace1(this, pVideoProcessor, StreamIndex, ColorSpace); }
ID3D11VideoContext1_VideoProcessorSetStreamMirror :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, FlipHorizontal: BOOL, FlipVertical: BOOL) { this.id3d11videocontext1_vtable.VideoProcessorSetStreamMirror(this, pVideoProcessor, StreamIndex, Enable, FlipHorizontal, FlipVertical); }
ID3D11VideoContext1_VideoProcessorGetStreamColorSpace1 :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *DXGI_COLOR_SPACE_TYPE) { this.id3d11videocontext1_vtable.VideoProcessorGetStreamColorSpace1(this, pVideoProcessor, StreamIndex, pColorSpace); }
ID3D11VideoContext1_VideoProcessorGetStreamMirror :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, StreamIndex: u32, pEnable: *BOOL, pFlipHorizontal: *BOOL, pFlipVertical: *BOOL) { this.id3d11videocontext1_vtable.VideoProcessorGetStreamMirror(this, pVideoProcessor, StreamIndex, pEnable, pFlipHorizontal, pFlipVertical); }
ID3D11VideoContext1_VideoProcessorGetBehaviorHints :: inline (this: *ID3D11VideoContext1, pVideoProcessor: *ID3D11VideoProcessor, OutputWidth: u32, OutputHeight: u32, OutputFormat: DXGI_FORMAT, StreamCount: u32, pStreams: *D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, pBehaviorHints: *u32) -> HRESULT { return this.id3d11videocontext1_vtable.VideoProcessorGetBehaviorHints(this, pVideoProcessor, OutputWidth, OutputHeight, OutputFormat, StreamCount, pStreams, pBehaviorHints); }

vtable :: (obj: *ID3D11VideoContext1) -> *ID3D11VideoContext1_VTable { return obj.id3d11videocontext1_vtable; }



ID3D11VideoDevice1_UUID :: "29DA1D51-1321-4454-804B-F5FC9F861F0F";
ID3D11VideoDevice1 :: struct {
    #as using id3d11videodevice: ID3D11VideoDevice;
    #place id3d11videodevice; id3d11videodevice1_vtable: *ID3D11VideoDevice1_VTable;
}
ID3D11VideoDevice1_VTable :: struct #type_info_none {
    using id3d11videodevice: ID3D11VideoDevice_VTable;
    GetCryptoSessionPrivateDataSize: (this: *ID3D11VideoDevice1, pCryptoType: *GUID, pDecoderProfile: *GUID, pKeyExchangeType: *GUID, pPrivateInputSize: *u32, pPrivateOutputSize: *u32) -> HRESULT #cpp_method;
    GetVideoDecoderCaps: (this: *ID3D11VideoDevice1, pDecoderProfile: *GUID, SampleWidth: u32, SampleHeight: u32, pFrameRate: *DXGI_RATIONAL, BitRate: u32, pCryptoType: *GUID, pDecoderCaps: *u32) -> HRESULT #cpp_method;
    CheckVideoDecoderDownsampling: (this: *ID3D11VideoDevice1, pInputDesc: *D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: *D3D11_VIDEO_DECODER_CONFIG, pFrameRate: *DXGI_RATIONAL, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC, pSupported: *BOOL, pRealTimeHint: *BOOL) -> HRESULT #cpp_method;
    RecommendVideoDecoderDownsampleParameters: (this: *ID3D11VideoDevice1, pInputDesc: *D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: *D3D11_VIDEO_DECODER_CONFIG, pFrameRate: *DXGI_RATIONAL, pRecommendedOutputDesc: *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT #cpp_method;
}
ID3D11VideoDevice1_GetCryptoSessionPrivateDataSize :: inline (this: *ID3D11VideoDevice1, pCryptoType: *GUID, pDecoderProfile: *GUID, pKeyExchangeType: *GUID, pPrivateInputSize: *u32, pPrivateOutputSize: *u32) -> HRESULT { return this.id3d11videodevice1_vtable.GetCryptoSessionPrivateDataSize(this, pCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize); }
ID3D11VideoDevice1_GetVideoDecoderCaps :: inline (this: *ID3D11VideoDevice1, pDecoderProfile: *GUID, SampleWidth: u32, SampleHeight: u32, pFrameRate: *DXGI_RATIONAL, BitRate: u32, pCryptoType: *GUID, pDecoderCaps: *u32) -> HRESULT { return this.id3d11videodevice1_vtable.GetVideoDecoderCaps(this, pDecoderProfile, SampleWidth, SampleHeight, pFrameRate, BitRate, pCryptoType, pDecoderCaps); }
ID3D11VideoDevice1_CheckVideoDecoderDownsampling :: inline (this: *ID3D11VideoDevice1, pInputDesc: *D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: *D3D11_VIDEO_DECODER_CONFIG, pFrameRate: *DXGI_RATIONAL, pOutputDesc: *D3D11_VIDEO_SAMPLE_DESC, pSupported: *BOOL, pRealTimeHint: *BOOL) -> HRESULT { return this.id3d11videodevice1_vtable.CheckVideoDecoderDownsampling(this, pInputDesc, InputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint); }
ID3D11VideoDevice1_RecommendVideoDecoderDownsampleParameters :: inline (this: *ID3D11VideoDevice1, pInputDesc: *D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: *D3D11_VIDEO_DECODER_CONFIG, pFrameRate: *DXGI_RATIONAL, pRecommendedOutputDesc: *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT { return this.id3d11videodevice1_vtable.RecommendVideoDecoderDownsampleParameters(this, pInputDesc, InputColorSpace, pInputConfig, pFrameRate, pRecommendedOutputDesc); }

vtable :: (obj: *ID3D11VideoDevice1) -> *ID3D11VideoDevice1_VTable { return obj.id3d11videodevice1_vtable; }



ID3D11VideoProcessorEnumerator1_UUID :: "465217F2-5568-43CF-B5B9-F61D54531CA1";
ID3D11VideoProcessorEnumerator1 :: struct {
    #as using id3d11videoprocessorenumerator: ID3D11VideoProcessorEnumerator;
    #place id3d11videoprocessorenumerator; id3d11videoprocessorenumerator1_vtable: *ID3D11VideoProcessorEnumerator1_VTable;
}
ID3D11VideoProcessorEnumerator1_VTable :: struct #type_info_none {
    using id3d11videoprocessorenumerator: ID3D11VideoProcessorEnumerator_VTable;
    CheckVideoProcessorFormatConversion: (this: *ID3D11VideoProcessorEnumerator1, InputFormat: DXGI_FORMAT, InputColorSpace: DXGI_COLOR_SPACE_TYPE, OutputFormat: DXGI_FORMAT, OutputColorSpace: DXGI_COLOR_SPACE_TYPE, pSupported: *BOOL) -> HRESULT #cpp_method;
}
ID3D11VideoProcessorEnumerator1_CheckVideoProcessorFormatConversion :: inline (this: *ID3D11VideoProcessorEnumerator1, InputFormat: DXGI_FORMAT, InputColorSpace: DXGI_COLOR_SPACE_TYPE, OutputFormat: DXGI_FORMAT, OutputColorSpace: DXGI_COLOR_SPACE_TYPE, pSupported: *BOOL) -> HRESULT { return this.id3d11videoprocessorenumerator1_vtable.CheckVideoProcessorFormatConversion(this, InputFormat, InputColorSpace, OutputFormat, OutputColorSpace, pSupported); }

vtable :: (obj: *ID3D11VideoProcessorEnumerator1) -> *ID3D11VideoProcessorEnumerator1_VTable { return obj.id3d11videoprocessorenumerator1_vtable; }



ID3D11Device1_UUID :: "a04bfb29-08ef-43d6-a49c-a9bdbdcbe686";
ID3D11Device1 :: struct {
    #as using id3d11device: ID3D11Device;
    #place id3d11device; id3d11device1_vtable: *ID3D11Device1_VTable;
}
ID3D11Device1_VTable :: struct #type_info_none {
    using id3d11device: ID3D11Device_VTable;
    GetImmediateContext1: (this: *ID3D11Device1, ppImmediateContext: **ID3D11DeviceContext1) -> void #cpp_method;
    CreateDeferredContext1: (this: *ID3D11Device1, ContextFlags: u32, ppDeferredContext: **ID3D11DeviceContext1) -> HRESULT #cpp_method;
    CreateBlendState1: (this: *ID3D11Device1, pBlendStateDesc: *D3D11_BLEND_DESC1, ppBlendState: **ID3D11BlendState1) -> HRESULT #cpp_method;
    CreateRasterizerState1: (this: *ID3D11Device1, pRasterizerDesc: *D3D11_RASTERIZER_DESC1, ppRasterizerState: **ID3D11RasterizerState1) -> HRESULT #cpp_method;
    CreateDeviceContextState: (this: *ID3D11Device1, Flags: u32, pFeatureLevels: *D3D_FEATURE_LEVEL, FeatureLevels: u32, SDKVersion: u32, EmulatedInterface: *IID, pChosenFeatureLevel: *D3D_FEATURE_LEVEL, ppContextState: **ID3DDeviceContextState) -> HRESULT #cpp_method;
    OpenSharedResource1: (this: *ID3D11Device1, hResource: HANDLE, returnedInterface: *IID, ppResource: **void) -> HRESULT #cpp_method;
    OpenSharedResourceByName: (this: *ID3D11Device1, lpName: *s16, dwDesiredAccess: u32, returnedInterface: *IID, ppResource: **void) -> HRESULT #cpp_method;
}
ID3D11Device1_GetImmediateContext1 :: inline (this: *ID3D11Device1, ppImmediateContext: **ID3D11DeviceContext1) { this.id3d11device1_vtable.GetImmediateContext1(this, ppImmediateContext); }
ID3D11Device1_CreateDeferredContext1 :: inline (this: *ID3D11Device1, ContextFlags: u32, ppDeferredContext: **ID3D11DeviceContext1) -> HRESULT { return this.id3d11device1_vtable.CreateDeferredContext1(this, ContextFlags, ppDeferredContext); }
ID3D11Device1_CreateBlendState1 :: inline (this: *ID3D11Device1, pBlendStateDesc: *D3D11_BLEND_DESC1, ppBlendState: **ID3D11BlendState1) -> HRESULT { return this.id3d11device1_vtable.CreateBlendState1(this, pBlendStateDesc, ppBlendState); }
ID3D11Device1_CreateRasterizerState1 :: inline (this: *ID3D11Device1, pRasterizerDesc: *D3D11_RASTERIZER_DESC1, ppRasterizerState: **ID3D11RasterizerState1) -> HRESULT { return this.id3d11device1_vtable.CreateRasterizerState1(this, pRasterizerDesc, ppRasterizerState); }
ID3D11Device1_CreateDeviceContextState :: inline (this: *ID3D11Device1, Flags: u32, pFeatureLevels: *D3D_FEATURE_LEVEL, FeatureLevels: u32, SDKVersion: u32, EmulatedInterface: *IID, pChosenFeatureLevel: *D3D_FEATURE_LEVEL, ppContextState: **ID3DDeviceContextState) -> HRESULT { return this.id3d11device1_vtable.CreateDeviceContextState(this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState); }
ID3D11Device1_OpenSharedResource1 :: inline (this: *ID3D11Device1, hResource: HANDLE, returnedInterface: *IID, ppResource: **void) -> HRESULT { return this.id3d11device1_vtable.OpenSharedResource1(this, hResource, returnedInterface, ppResource); }
ID3D11Device1_OpenSharedResourceByName :: inline (this: *ID3D11Device1, lpName: *s16, dwDesiredAccess: u32, returnedInterface: *IID, ppResource: **void) -> HRESULT { return this.id3d11device1_vtable.OpenSharedResourceByName(this, lpName, dwDesiredAccess, returnedInterface, ppResource); }

vtable :: (obj: *ID3D11Device1) -> *ID3D11Device1_VTable { return obj.id3d11device1_vtable; }



ID3DUserDefinedAnnotation_UUID :: "b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab";
ID3DUserDefinedAnnotation :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3duserdefinedannotation_vtable: *ID3DUserDefinedAnnotation_VTable;
}
ID3DUserDefinedAnnotation_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    BeginEvent: (this: *ID3DUserDefinedAnnotation, Name: *s16) -> s32 #cpp_method;
    EndEvent: (this: *ID3DUserDefinedAnnotation) -> s32 #cpp_method;
    SetMarker: (this: *ID3DUserDefinedAnnotation, Name: *s16) -> void #cpp_method;
    GetStatus: (this: *ID3DUserDefinedAnnotation) -> BOOL #cpp_method;
}
ID3DUserDefinedAnnotation_BeginEvent :: inline (this: *ID3DUserDefinedAnnotation, Name: *s16) -> s32 { return this.id3duserdefinedannotation_vtable.BeginEvent(this, Name); }
ID3DUserDefinedAnnotation_EndEvent :: inline (this: *ID3DUserDefinedAnnotation) -> s32 { return this.id3duserdefinedannotation_vtable.EndEvent(this); }
ID3DUserDefinedAnnotation_SetMarker :: inline (this: *ID3DUserDefinedAnnotation, Name: *s16) { this.id3duserdefinedannotation_vtable.SetMarker(this, Name); }
ID3DUserDefinedAnnotation_GetStatus :: inline (this: *ID3DUserDefinedAnnotation) -> BOOL { return this.id3duserdefinedannotation_vtable.GetStatus(this); }

vtable :: (obj: *ID3DUserDefinedAnnotation) -> *ID3DUserDefinedAnnotation_VTable { return obj.id3duserdefinedannotation_vtable; }


D3D11_SHADER_VERSION_TYPE :: enum s32 {
    PIXEL_SHADER    :: 0;
    VERTEX_SHADER   :: 1;
    GEOMETRY_SHADER :: 2;

    HULL_SHADER     :: 3;
    DOMAIN_SHADER   :: 4;
    COMPUTE_SHADER  :: 5;

    RESERVED0       :: 65520;

    D3D11_SHVER_PIXEL_SHADER    :: PIXEL_SHADER;
    D3D11_SHVER_VERTEX_SHADER   :: VERTEX_SHADER;
    D3D11_SHVER_GEOMETRY_SHADER :: GEOMETRY_SHADER;

    D3D11_SHVER_HULL_SHADER     :: HULL_SHADER;
    D3D11_SHVER_DOMAIN_SHADER   :: DOMAIN_SHADER;
    D3D11_SHVER_COMPUTE_SHADER  :: COMPUTE_SHADER;

    D3D11_SHVER_RESERVED0       :: RESERVED0;
}

D3D11_RESOURCE_RETURN_TYPE :: D3D_RESOURCE_RETURN_TYPE;

D3D11_CBUFFER_TYPE :: D3D_CBUFFER_TYPE;

D3D11_SIGNATURE_PARAMETER_DESC :: struct {
    SemanticName:    *u8;
    SemanticIndex:   u32;
    Register:        u32;
    SystemValueType: D3D_NAME;
    ComponentType:   D3D_REGISTER_COMPONENT_TYPE;
    Mask:            u8;

    ReadWriteMask:   u8;

    Stream:          u32;
    MinPrecision:    D3D_MIN_PRECISION;
}

D3D11_SHADER_BUFFER_DESC :: struct {
    Name:      *u8;
    Type:      D3D_CBUFFER_TYPE;
    Variables: u32;
    Size:      u32;
    uFlags:    u32;
}

D3D11_SHADER_VARIABLE_DESC :: struct {
    Name:         *u8;
    StartOffset:  u32;
    Size:         u32;
    uFlags:       u32;
    DefaultValue: *void;
    StartTexture: u32;
    TextureSize:  u32;
    StartSampler: u32;
    SamplerSize:  u32;
}

D3D11_SHADER_TYPE_DESC :: struct {
    Class:    D3D_SHADER_VARIABLE_CLASS;
    Type:     D3D_SHADER_VARIABLE_TYPE;
    Rows:     u32;
    Columns:  u32;
    Elements: u32;
    Members:  u32;
    Offset:   u32;
    Name:     *u8;
}

D3D11_TESSELLATOR_DOMAIN :: D3D_TESSELLATOR_DOMAIN;

D3D11_TESSELLATOR_PARTITIONING :: D3D_TESSELLATOR_PARTITIONING;

D3D11_TESSELLATOR_OUTPUT_PRIMITIVE :: D3D_TESSELLATOR_OUTPUT_PRIMITIVE;

D3D11_SHADER_DESC :: struct {
    Version:                     u32;
    Creator:                     *u8;
    Flags:                       u32;

    ConstantBuffers:             u32;
    BoundResources:              u32;
    InputParameters:             u32;
    OutputParameters:            u32;

    InstructionCount:            u32;
    TempRegisterCount:           u32;
    TempArrayCount:              u32;
    DefCount:                    u32;
    DclCount:                    u32;
    TextureNormalInstructions:   u32;
    TextureLoadInstructions:     u32;
    TextureCompInstructions:     u32;
    TextureBiasInstructions:     u32;
    TextureGradientInstructions: u32;
    FloatInstructionCount:       u32;
    IntInstructionCount:         u32;
    UintInstructionCount:        u32;
    StaticFlowControlCount:      u32;
    DynamicFlowControlCount:     u32;
    MacroInstructionCount:       u32;
    ArrayInstructionCount:       u32;
    CutInstructionCount:         u32;
    EmitInstructionCount:        u32;
    GSOutputTopology:            D3D_PRIMITIVE_TOPOLOGY;
    GSMaxOutputVertexCount:      u32;
    InputPrimitive:              D3D_PRIMITIVE;
    PatchConstantParameters:     u32;
    cGSInstanceCount:            u32;
    cControlPoints:              u32;
    HSOutputPrimitive:           D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
    HSPartitioning:              D3D_TESSELLATOR_PARTITIONING;
    TessellatorDomain:           D3D_TESSELLATOR_DOMAIN;

    cBarrierInstructions:        u32;
    cInterlockedInstructions:    u32;
    cTextureStoreInstructions:   u32;
}

D3D11_SHADER_INPUT_BIND_DESC :: struct {
    Name:       *u8;
    Type:       D3D_SHADER_INPUT_TYPE;
    BindPoint:  u32;
    BindCount:  u32;

    uFlags:     u32;
    ReturnType: D3D_RESOURCE_RETURN_TYPE;
    Dimension:  D3D_SRV_DIMENSION;
    NumSamples: u32;
}

D3D11_LIBRARY_DESC :: struct {
    Creator:       *u8;
    Flags:         u32;
    FunctionCount: u32;
}

D3D11_FUNCTION_DESC :: struct {
    Version:                     u32;
    Creator:                     *u8;
    Flags:                       u32;

    ConstantBuffers:             u32;
    BoundResources:              u32;

    InstructionCount:            u32;
    TempRegisterCount:           u32;
    TempArrayCount:              u32;
    DefCount:                    u32;
    DclCount:                    u32;
    TextureNormalInstructions:   u32;
    TextureLoadInstructions:     u32;
    TextureCompInstructions:     u32;
    TextureBiasInstructions:     u32;
    TextureGradientInstructions: u32;
    FloatInstructionCount:       u32;
    IntInstructionCount:         u32;
    UintInstructionCount:        u32;
    StaticFlowControlCount:      u32;
    DynamicFlowControlCount:     u32;
    MacroInstructionCount:       u32;
    ArrayInstructionCount:       u32;
    MovInstructionCount:         u32;
    MovcInstructionCount:        u32;
    ConversionInstructionCount:  u32;
    BitwiseInstructionCount:     u32;
    MinFeatureLevel:             D3D_FEATURE_LEVEL;
    RequiredFeatureFlags:        u64;

    Name:                        *u8;
    FunctionParameterCount:      s32;
    HasReturn:                   BOOL;
    Has10Level9VertexShader:     BOOL;
    Has10Level9PixelShader:      BOOL;
}

D3D11_PARAMETER_DESC :: struct {
    Name:              *u8;
    SemanticName:      *u8;
    Type:              D3D_SHADER_VARIABLE_TYPE;
    Class:             D3D_SHADER_VARIABLE_CLASS;
    Rows:              u32;
    Columns:           u32;
    InterpolationMode: D3D_INTERPOLATION_MODE;
    Flags:             D3D_PARAMETER_FLAGS;

    FirstInRegister:   u32;
    FirstInComponent:  u32;
    FirstOutRegister:  u32;
    FirstOutComponent: u32;
}

ID3D11ShaderReflectionType :: struct {
    vtable: *ID3D11ShaderReflectionType_VTable;
}
ID3D11ShaderReflectionType_VTable :: struct #type_info_none {
    GetDesc: (this: *ID3D11ShaderReflectionType, pDesc: *D3D11_SHADER_TYPE_DESC) -> HRESULT #cpp_method;
    GetMemberTypeByIndex: (this: *ID3D11ShaderReflectionType, Index: u32) -> *ID3D11ShaderReflectionType #cpp_method;
    GetMemberTypeByName: (this: *ID3D11ShaderReflectionType, Name: *u8) -> *ID3D11ShaderReflectionType #cpp_method;
    GetMemberTypeName: (this: *ID3D11ShaderReflectionType, Index: u32) -> *u8 #cpp_method;
    IsEqual: (this: *ID3D11ShaderReflectionType, pType: *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
    GetSubType: (this: *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #cpp_method;
    GetBaseClass: (this: *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #cpp_method;
    GetNumInterfaces: (this: *ID3D11ShaderReflectionType) -> u32 #cpp_method;
    GetInterfaceByIndex: (this: *ID3D11ShaderReflectionType, uIndex: u32) -> *ID3D11ShaderReflectionType #cpp_method;
    IsOfType: (this: *ID3D11ShaderReflectionType, pType: *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
    ImplementsInterface: (this: *ID3D11ShaderReflectionType, pBase: *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
}
ID3D11ShaderReflectionType_GetDesc :: inline (this: *ID3D11ShaderReflectionType, pDesc: *D3D11_SHADER_TYPE_DESC) -> HRESULT { return this.vtable.GetDesc(this, pDesc); }
ID3D11ShaderReflectionType_GetMemberTypeByIndex :: inline (this: *ID3D11ShaderReflectionType, Index: u32) -> *ID3D11ShaderReflectionType { return this.vtable.GetMemberTypeByIndex(this, Index); }
ID3D11ShaderReflectionType_GetMemberTypeByName :: inline (this: *ID3D11ShaderReflectionType, Name: *u8) -> *ID3D11ShaderReflectionType { return this.vtable.GetMemberTypeByName(this, Name); }
ID3D11ShaderReflectionType_GetMemberTypeName :: inline (this: *ID3D11ShaderReflectionType, Index: u32) -> *u8 { return this.vtable.GetMemberTypeName(this, Index); }
ID3D11ShaderReflectionType_IsEqual :: inline (this: *ID3D11ShaderReflectionType, pType: *ID3D11ShaderReflectionType) -> HRESULT { return this.vtable.IsEqual(this, pType); }
ID3D11ShaderReflectionType_GetSubType :: inline (this: *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType { return this.vtable.GetSubType(this); }
ID3D11ShaderReflectionType_GetBaseClass :: inline (this: *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType { return this.vtable.GetBaseClass(this); }
ID3D11ShaderReflectionType_GetNumInterfaces :: inline (this: *ID3D11ShaderReflectionType) -> u32 { return this.vtable.GetNumInterfaces(this); }
ID3D11ShaderReflectionType_GetInterfaceByIndex :: inline (this: *ID3D11ShaderReflectionType, uIndex: u32) -> *ID3D11ShaderReflectionType { return this.vtable.GetInterfaceByIndex(this, uIndex); }
ID3D11ShaderReflectionType_IsOfType :: inline (this: *ID3D11ShaderReflectionType, pType: *ID3D11ShaderReflectionType) -> HRESULT { return this.vtable.IsOfType(this, pType); }
ID3D11ShaderReflectionType_ImplementsInterface :: inline (this: *ID3D11ShaderReflectionType, pBase: *ID3D11ShaderReflectionType) -> HRESULT { return this.vtable.ImplementsInterface(this, pBase); }

vtable :: (obj: *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType_VTable { return obj.vtable; }


ID3D11ShaderReflectionVariable :: struct {
    vtable: *ID3D11ShaderReflectionVariable_VTable;
}
ID3D11ShaderReflectionVariable_VTable :: struct #type_info_none {
    GetDesc: (this: *ID3D11ShaderReflectionVariable, pDesc: *D3D11_SHADER_VARIABLE_DESC) -> HRESULT #cpp_method;
    GetType: (this: *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionType #cpp_method;
    GetBuffer: (this: *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetInterfaceSlot: (this: *ID3D11ShaderReflectionVariable, uArrayIndex: u32) -> u32 #cpp_method;
}
ID3D11ShaderReflectionVariable_GetDesc :: inline (this: *ID3D11ShaderReflectionVariable, pDesc: *D3D11_SHADER_VARIABLE_DESC) -> HRESULT { return this.vtable.GetDesc(this, pDesc); }
ID3D11ShaderReflectionVariable_GetType :: inline (this: *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionType { return this.vtable.GetType(this); }
ID3D11ShaderReflectionVariable_GetBuffer :: inline (this: *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionConstantBuffer { return this.vtable.GetBuffer(this); }
ID3D11ShaderReflectionVariable_GetInterfaceSlot :: inline (this: *ID3D11ShaderReflectionVariable, uArrayIndex: u32) -> u32 { return this.vtable.GetInterfaceSlot(this, uArrayIndex); }

vtable :: (obj: *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionVariable_VTable { return obj.vtable; }


ID3D11ShaderReflectionConstantBuffer :: struct {
    vtable: *ID3D11ShaderReflectionConstantBuffer_VTable;
}
ID3D11ShaderReflectionConstantBuffer_VTable :: struct #type_info_none {
    GetDesc: (this: *ID3D11ShaderReflectionConstantBuffer, pDesc: *D3D11_SHADER_BUFFER_DESC) -> HRESULT #cpp_method;
    GetVariableByIndex: (this: *ID3D11ShaderReflectionConstantBuffer, Index: u32) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetVariableByName: (this: *ID3D11ShaderReflectionConstantBuffer, Name: *u8) -> *ID3D11ShaderReflectionVariable #cpp_method;
}
ID3D11ShaderReflectionConstantBuffer_GetDesc :: inline (this: *ID3D11ShaderReflectionConstantBuffer, pDesc: *D3D11_SHADER_BUFFER_DESC) -> HRESULT { return this.vtable.GetDesc(this, pDesc); }
ID3D11ShaderReflectionConstantBuffer_GetVariableByIndex :: inline (this: *ID3D11ShaderReflectionConstantBuffer, Index: u32) -> *ID3D11ShaderReflectionVariable { return this.vtable.GetVariableByIndex(this, Index); }
ID3D11ShaderReflectionConstantBuffer_GetVariableByName :: inline (this: *ID3D11ShaderReflectionConstantBuffer, Name: *u8) -> *ID3D11ShaderReflectionVariable { return this.vtable.GetVariableByName(this, Name); }

vtable :: (obj: *ID3D11ShaderReflectionConstantBuffer) -> *ID3D11ShaderReflectionConstantBuffer_VTable { return obj.vtable; }


ID3D11ShaderReflection :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11shaderreflection_vtable: *ID3D11ShaderReflection_VTable;
}
ID3D11ShaderReflection_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetDesc: (this: *ID3D11ShaderReflection, pDesc: *D3D11_SHADER_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex: (this: *ID3D11ShaderReflection, Index: u32) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName: (this: *ID3D11ShaderReflection, Name: *u8) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc: (this: *ID3D11ShaderReflection, ResourceIndex: u32, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetInputParameterDesc: (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetOutputParameterDesc: (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetPatchConstantParameterDesc: (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetVariableByName: (this: *ID3D11ShaderReflection, Name: *u8) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName: (this: *ID3D11ShaderReflection, Name: *u8, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetMovInstructionCount: (this: *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetMovcInstructionCount: (this: *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetConversionInstructionCount: (this: *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetBitwiseInstructionCount: (this: *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetGSInputPrimitive: (this: *ID3D11ShaderReflection) -> D3D_PRIMITIVE #cpp_method;
    IsSampleFrequencyShader: (this: *ID3D11ShaderReflection) -> BOOL #cpp_method;
    GetNumInterfaceSlots: (this: *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetMinFeatureLevel: (this: *ID3D11ShaderReflection, pLevel: *D3D_FEATURE_LEVEL) -> HRESULT #cpp_method;
    GetThreadGroupSize: (this: *ID3D11ShaderReflection, pSizeX: *u32, pSizeY: *u32, pSizeZ: *u32) -> u32 #cpp_method;
    GetRequiresFlags: (this: *ID3D11ShaderReflection) -> u64 #cpp_method;
}
ID3D11ShaderReflection_GetDesc :: inline (this: *ID3D11ShaderReflection, pDesc: *D3D11_SHADER_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetDesc(this, pDesc); }
ID3D11ShaderReflection_GetConstantBufferByIndex :: inline (this: *ID3D11ShaderReflection, Index: u32) -> *ID3D11ShaderReflectionConstantBuffer { return this.id3d11shaderreflection_vtable.GetConstantBufferByIndex(this, Index); }
ID3D11ShaderReflection_GetConstantBufferByName :: inline (this: *ID3D11ShaderReflection, Name: *u8) -> *ID3D11ShaderReflectionConstantBuffer { return this.id3d11shaderreflection_vtable.GetConstantBufferByName(this, Name); }
ID3D11ShaderReflection_GetResourceBindingDesc :: inline (this: *ID3D11ShaderReflection, ResourceIndex: u32, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetResourceBindingDesc(this, ResourceIndex, pDesc); }
ID3D11ShaderReflection_GetInputParameterDesc :: inline (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetInputParameterDesc(this, ParameterIndex, pDesc); }
ID3D11ShaderReflection_GetOutputParameterDesc :: inline (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetOutputParameterDesc(this, ParameterIndex, pDesc); }
ID3D11ShaderReflection_GetPatchConstantParameterDesc :: inline (this: *ID3D11ShaderReflection, ParameterIndex: u32, pDesc: *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetPatchConstantParameterDesc(this, ParameterIndex, pDesc); }
ID3D11ShaderReflection_GetVariableByName :: inline (this: *ID3D11ShaderReflection, Name: *u8) -> *ID3D11ShaderReflectionVariable { return this.id3d11shaderreflection_vtable.GetVariableByName(this, Name); }
ID3D11ShaderReflection_GetResourceBindingDescByName :: inline (this: *ID3D11ShaderReflection, Name: *u8, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT { return this.id3d11shaderreflection_vtable.GetResourceBindingDescByName(this, Name, pDesc); }
ID3D11ShaderReflection_GetMovInstructionCount :: inline (this: *ID3D11ShaderReflection) -> u32 { return this.id3d11shaderreflection_vtable.GetMovInstructionCount(this); }
ID3D11ShaderReflection_GetMovcInstructionCount :: inline (this: *ID3D11ShaderReflection) -> u32 { return this.id3d11shaderreflection_vtable.GetMovcInstructionCount(this); }
ID3D11ShaderReflection_GetConversionInstructionCount :: inline (this: *ID3D11ShaderReflection) -> u32 { return this.id3d11shaderreflection_vtable.GetConversionInstructionCount(this); }
ID3D11ShaderReflection_GetBitwiseInstructionCount :: inline (this: *ID3D11ShaderReflection) -> u32 { return this.id3d11shaderreflection_vtable.GetBitwiseInstructionCount(this); }
ID3D11ShaderReflection_GetGSInputPrimitive :: inline (this: *ID3D11ShaderReflection) -> D3D_PRIMITIVE { return this.id3d11shaderreflection_vtable.GetGSInputPrimitive(this); }
ID3D11ShaderReflection_IsSampleFrequencyShader :: inline (this: *ID3D11ShaderReflection) -> BOOL { return this.id3d11shaderreflection_vtable.IsSampleFrequencyShader(this); }
ID3D11ShaderReflection_GetNumInterfaceSlots :: inline (this: *ID3D11ShaderReflection) -> u32 { return this.id3d11shaderreflection_vtable.GetNumInterfaceSlots(this); }
ID3D11ShaderReflection_GetMinFeatureLevel :: inline (this: *ID3D11ShaderReflection, pLevel: *D3D_FEATURE_LEVEL) -> HRESULT { return this.id3d11shaderreflection_vtable.GetMinFeatureLevel(this, pLevel); }
ID3D11ShaderReflection_GetThreadGroupSize :: inline (this: *ID3D11ShaderReflection, pSizeX: *u32, pSizeY: *u32, pSizeZ: *u32) -> u32 { return this.id3d11shaderreflection_vtable.GetThreadGroupSize(this, pSizeX, pSizeY, pSizeZ); }
ID3D11ShaderReflection_GetRequiresFlags :: inline (this: *ID3D11ShaderReflection) -> u64 { return this.id3d11shaderreflection_vtable.GetRequiresFlags(this); }

vtable :: (obj: *ID3D11ShaderReflection) -> *ID3D11ShaderReflection_VTable { return obj.id3d11shaderreflection_vtable; }


ID3D11LibraryReflection :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11libraryreflection_vtable: *ID3D11LibraryReflection_VTable;
}
ID3D11LibraryReflection_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetDesc: (this: *ID3D11LibraryReflection, pDesc: *D3D11_LIBRARY_DESC) -> HRESULT #cpp_method;
    GetFunctionByIndex: (this: *ID3D11LibraryReflection, FunctionIndex: s32) -> *ID3D11FunctionReflection #cpp_method;
}
ID3D11LibraryReflection_GetDesc :: inline (this: *ID3D11LibraryReflection, pDesc: *D3D11_LIBRARY_DESC) -> HRESULT { return this.id3d11libraryreflection_vtable.GetDesc(this, pDesc); }
ID3D11LibraryReflection_GetFunctionByIndex :: inline (this: *ID3D11LibraryReflection, FunctionIndex: s32) -> *ID3D11FunctionReflection { return this.id3d11libraryreflection_vtable.GetFunctionByIndex(this, FunctionIndex); }

vtable :: (obj: *ID3D11LibraryReflection) -> *ID3D11LibraryReflection_VTable { return obj.id3d11libraryreflection_vtable; }


ID3D11FunctionReflection :: struct {
    vtable: *ID3D11FunctionReflection_VTable;
}
ID3D11FunctionReflection_VTable :: struct #type_info_none {
    GetDesc: (this: *ID3D11FunctionReflection, pDesc: *D3D11_FUNCTION_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex: (this: *ID3D11FunctionReflection, BufferIndex: u32) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName: (this: *ID3D11FunctionReflection, Name: *u8) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc: (this: *ID3D11FunctionReflection, ResourceIndex: u32, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetVariableByName: (this: *ID3D11FunctionReflection, Name: *u8) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName: (this: *ID3D11FunctionReflection, Name: *u8, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetFunctionParameter: (this: *ID3D11FunctionReflection, ParameterIndex: s32) -> *ID3D11FunctionParameterReflection #cpp_method;
}
ID3D11FunctionReflection_GetDesc :: inline (this: *ID3D11FunctionReflection, pDesc: *D3D11_FUNCTION_DESC) -> HRESULT { return this.vtable.GetDesc(this, pDesc); }
ID3D11FunctionReflection_GetConstantBufferByIndex :: inline (this: *ID3D11FunctionReflection, BufferIndex: u32) -> *ID3D11ShaderReflectionConstantBuffer { return this.vtable.GetConstantBufferByIndex(this, BufferIndex); }
ID3D11FunctionReflection_GetConstantBufferByName :: inline (this: *ID3D11FunctionReflection, Name: *u8) -> *ID3D11ShaderReflectionConstantBuffer { return this.vtable.GetConstantBufferByName(this, Name); }
ID3D11FunctionReflection_GetResourceBindingDesc :: inline (this: *ID3D11FunctionReflection, ResourceIndex: u32, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT { return this.vtable.GetResourceBindingDesc(this, ResourceIndex, pDesc); }
ID3D11FunctionReflection_GetVariableByName :: inline (this: *ID3D11FunctionReflection, Name: *u8) -> *ID3D11ShaderReflectionVariable { return this.vtable.GetVariableByName(this, Name); }
ID3D11FunctionReflection_GetResourceBindingDescByName :: inline (this: *ID3D11FunctionReflection, Name: *u8, pDesc: *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT { return this.vtable.GetResourceBindingDescByName(this, Name, pDesc); }
ID3D11FunctionReflection_GetFunctionParameter :: inline (this: *ID3D11FunctionReflection, ParameterIndex: s32) -> *ID3D11FunctionParameterReflection { return this.vtable.GetFunctionParameter(this, ParameterIndex); }

vtable :: (obj: *ID3D11FunctionReflection) -> *ID3D11FunctionReflection_VTable { return obj.vtable; }


ID3D11FunctionParameterReflection :: struct {
    vtable: *ID3D11FunctionParameterReflection_VTable;
}
ID3D11FunctionParameterReflection_VTable :: struct #type_info_none {
    GetDesc: (this: *ID3D11FunctionParameterReflection, pDesc: *D3D11_PARAMETER_DESC) -> HRESULT #cpp_method;
}
ID3D11FunctionParameterReflection_GetDesc :: inline (this: *ID3D11FunctionParameterReflection, pDesc: *D3D11_PARAMETER_DESC) -> HRESULT { return this.vtable.GetDesc(this, pDesc); }

vtable :: (obj: *ID3D11FunctionParameterReflection) -> *ID3D11FunctionParameterReflection_VTable { return obj.vtable; }


ID3D11LinkingNode :: struct {
    #as using iunknown: IUnknown;
}

ID3D11FunctionLinkingGraph :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d11functionlinkinggraph_vtable: *ID3D11FunctionLinkingGraph_VTable;
}
ID3D11FunctionLinkingGraph_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    CreateModuleInstance: (this: *ID3D11FunctionLinkingGraph, ppModuleInstance: **ID3D11ModuleInstance, ppErrorBuffer: **ID3DBlob) -> HRESULT #cpp_method;
    SetInputSignature: (this: *ID3D11FunctionLinkingGraph, pInputParameters: *D3D11_PARAMETER_DESC, cInputParameters: u32, ppInputNode: **ID3D11LinkingNode) -> HRESULT #cpp_method;
    SetOutputSignature: (this: *ID3D11FunctionLinkingGraph, pOutputParameters: *D3D11_PARAMETER_DESC, cOutputParameters: u32, ppOutputNode: **ID3D11LinkingNode) -> HRESULT #cpp_method;
    CallFunction: (this: *ID3D11FunctionLinkingGraph, pModuleInstanceNamespace: *u8, pModuleWithFunctionPrototype: *ID3D11Module, pFunctionName: *u8, ppCallNode: **ID3D11LinkingNode) -> HRESULT #cpp_method;
    PassValue: (this: *ID3D11FunctionLinkingGraph, pSrcNode: *ID3D11LinkingNode, SrcParameterIndex: s32, pDstNode: *ID3D11LinkingNode, DstParameterIndex: s32) -> HRESULT #cpp_method;
    PassValueWithSwizzle: (this: *ID3D11FunctionLinkingGraph, pSrcNode: *ID3D11LinkingNode, SrcParameterIndex: s32, pSrcSwizzle: *u8, pDstNode: *ID3D11LinkingNode, DstParameterIndex: s32, pDstSwizzle: *u8) -> HRESULT #cpp_method;
    GetLastError: (this: *ID3D11FunctionLinkingGraph, ppErrorBuffer: **ID3DBlob) -> HRESULT #cpp_method;
    GenerateHlsl: (this: *ID3D11FunctionLinkingGraph, uFlags: u32, ppBuffer: **ID3DBlob) -> HRESULT #cpp_method;
}
ID3D11FunctionLinkingGraph_CreateModuleInstance :: inline (this: *ID3D11FunctionLinkingGraph, ppModuleInstance: **ID3D11ModuleInstance, ppErrorBuffer: **ID3DBlob) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.CreateModuleInstance(this, ppModuleInstance, ppErrorBuffer); }
ID3D11FunctionLinkingGraph_SetInputSignature :: inline (this: *ID3D11FunctionLinkingGraph, pInputParameters: *D3D11_PARAMETER_DESC, cInputParameters: u32, ppInputNode: **ID3D11LinkingNode) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.SetInputSignature(this, pInputParameters, cInputParameters, ppInputNode); }
ID3D11FunctionLinkingGraph_SetOutputSignature :: inline (this: *ID3D11FunctionLinkingGraph, pOutputParameters: *D3D11_PARAMETER_DESC, cOutputParameters: u32, ppOutputNode: **ID3D11LinkingNode) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.SetOutputSignature(this, pOutputParameters, cOutputParameters, ppOutputNode); }
ID3D11FunctionLinkingGraph_CallFunction :: inline (this: *ID3D11FunctionLinkingGraph, pModuleInstanceNamespace: *u8, pModuleWithFunctionPrototype: *ID3D11Module, pFunctionName: *u8, ppCallNode: **ID3D11LinkingNode) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.CallFunction(this, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode); }
ID3D11FunctionLinkingGraph_PassValue :: inline (this: *ID3D11FunctionLinkingGraph, pSrcNode: *ID3D11LinkingNode, SrcParameterIndex: s32, pDstNode: *ID3D11LinkingNode, DstParameterIndex: s32) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.PassValue(this, pSrcNode, SrcParameterIndex, pDstNode, DstParameterIndex); }
ID3D11FunctionLinkingGraph_PassValueWithSwizzle :: inline (this: *ID3D11FunctionLinkingGraph, pSrcNode: *ID3D11LinkingNode, SrcParameterIndex: s32, pSrcSwizzle: *u8, pDstNode: *ID3D11LinkingNode, DstParameterIndex: s32, pDstSwizzle: *u8) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.PassValueWithSwizzle(this, pSrcNode, SrcParameterIndex, pSrcSwizzle, pDstNode, DstParameterIndex, pDstSwizzle); }
ID3D11FunctionLinkingGraph_GetLastError :: inline (this: *ID3D11FunctionLinkingGraph, ppErrorBuffer: **ID3DBlob) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.GetLastError(this, ppErrorBuffer); }
ID3D11FunctionLinkingGraph_GenerateHlsl :: inline (this: *ID3D11FunctionLinkingGraph, uFlags: u32, ppBuffer: **ID3DBlob) -> HRESULT { return this.id3d11functionlinkinggraph_vtable.GenerateHlsl(this, uFlags, ppBuffer); }

vtable :: (obj: *ID3D11FunctionLinkingGraph) -> *ID3D11FunctionLinkingGraph_VTable { return obj.id3d11functionlinkinggraph_vtable; }


#scope_file

d3d11 :: #library,system "d3d11";
